
Nucleo_401RE_Dev_Board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e6c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  0800500c  0800500c  0001500c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005104  08005104  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08005104  08005104  00015104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800510c  0800510c  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800510c  0800510c  0001510c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005110  08005110  00015110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08005114  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000208  20000088  0800519c  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000290  0800519c  00020290  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   000100a5  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fc9  00000000  00000000  0003015d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d70  00000000  00000000  00032128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cb8  00000000  00000000  00032e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017b66  00000000  00000000  00033b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f61a  00000000  00000000  0004b6b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a1ee  00000000  00000000  0005acd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f4ebe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d0c  00000000  00000000  000f4f14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000088 	.word	0x20000088
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004ff4 	.word	0x08004ff4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	08004ff4 	.word	0x08004ff4

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <GetStatusNum>:
/* USER CODE BEGIN 0 */

//If Alarmed -> return 2
//If ARMED   ->	return 1
//If Disarmed-> return 0
uint8_t GetStatusNum(int i) {
 80005a8:	b480      	push	{r7}
 80005aa:	b083      	sub	sp, #12
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
	if (i < 4) {
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	2b03      	cmp	r3, #3
 80005b4:	dc11      	bgt.n	80005da <GetStatusNum+0x32>
		if (!windowsArmed[i])
 80005b6:	4a16      	ldr	r2, [pc, #88]	; (8000610 <GetStatusNum+0x68>)
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	4413      	add	r3, r2
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d101      	bne.n	80005c6 <GetStatusNum+0x1e>
			return 0;
 80005c2:	2300      	movs	r3, #0
 80005c4:	e01d      	b.n	8000602 <GetStatusNum+0x5a>
		if (WinAlarm[i] )
 80005c6:	4a13      	ldr	r2, [pc, #76]	; (8000614 <GetStatusNum+0x6c>)
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	4413      	add	r3, r2
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <GetStatusNum+0x2e>
			return 2;
 80005d2:	2302      	movs	r3, #2
 80005d4:	e015      	b.n	8000602 <GetStatusNum+0x5a>
		return 1;
 80005d6:	2301      	movs	r3, #1
 80005d8:	e013      	b.n	8000602 <GetStatusNum+0x5a>

	}
	else {
		i -= 4;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	3b04      	subs	r3, #4
 80005de:	607b      	str	r3, [r7, #4]
		if (!doorsArmed[i])
 80005e0:	4a0d      	ldr	r2, [pc, #52]	; (8000618 <GetStatusNum+0x70>)
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	4413      	add	r3, r2
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d101      	bne.n	80005f0 <GetStatusNum+0x48>
			return 0;
 80005ec:	2300      	movs	r3, #0
 80005ee:	e008      	b.n	8000602 <GetStatusNum+0x5a>
		if (DoorAlarm[i])
 80005f0:	4a0a      	ldr	r2, [pc, #40]	; (800061c <GetStatusNum+0x74>)
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	4413      	add	r3, r2
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <GetStatusNum+0x58>
			return 2;
 80005fc:	2302      	movs	r3, #2
 80005fe:	e000      	b.n	8000602 <GetStatusNum+0x5a>
		return 1;
 8000600:	2301      	movs	r3, #1
	}
}
 8000602:	4618      	mov	r0, r3
 8000604:	370c      	adds	r7, #12
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	20000000 	.word	0x20000000
 8000614:	200000a4 	.word	0x200000a4
 8000618:	20000004 	.word	0x20000004
 800061c:	200000a8 	.word	0x200000a8

08000620 <UpdateLEDs>:
void UpdateLEDs() {
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
	//ALARM: Red    01
	//ARMED: Yellow 11
	//Disarmed: Green 10

	//Window LEDs
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, windowsArmed[0]); //RED
 8000624:	4b3d      	ldr	r3, [pc, #244]	; (800071c <UpdateLEDs+0xfc>)
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	461a      	mov	r2, r3
 800062a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800062e:	483c      	ldr	r0, [pc, #240]	; (8000720 <UpdateLEDs+0x100>)
 8000630:	f001 fed6 	bl	80023e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, !WinAlarm[0]); //GREEN
 8000634:	4b3b      	ldr	r3, [pc, #236]	; (8000724 <UpdateLEDs+0x104>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	2b00      	cmp	r3, #0
 800063a:	bf0c      	ite	eq
 800063c:	2301      	moveq	r3, #1
 800063e:	2300      	movne	r3, #0
 8000640:	b2db      	uxtb	r3, r3
 8000642:	461a      	mov	r2, r3
 8000644:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000648:	4835      	ldr	r0, [pc, #212]	; (8000720 <UpdateLEDs+0x100>)
 800064a:	f001 fec9 	bl	80023e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, windowsArmed[1]); //RED
 800064e:	4b33      	ldr	r3, [pc, #204]	; (800071c <UpdateLEDs+0xfc>)
 8000650:	785b      	ldrb	r3, [r3, #1]
 8000652:	461a      	mov	r2, r3
 8000654:	2110      	movs	r1, #16
 8000656:	4832      	ldr	r0, [pc, #200]	; (8000720 <UpdateLEDs+0x100>)
 8000658:	f001 fec2 	bl	80023e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, !WinAlarm[1]); //GREEN
 800065c:	4b31      	ldr	r3, [pc, #196]	; (8000724 <UpdateLEDs+0x104>)
 800065e:	785b      	ldrb	r3, [r3, #1]
 8000660:	2b00      	cmp	r3, #0
 8000662:	bf0c      	ite	eq
 8000664:	2301      	moveq	r3, #1
 8000666:	2300      	movne	r3, #0
 8000668:	b2db      	uxtb	r3, r3
 800066a:	461a      	mov	r2, r3
 800066c:	2120      	movs	r1, #32
 800066e:	482c      	ldr	r0, [pc, #176]	; (8000720 <UpdateLEDs+0x100>)
 8000670:	f001 feb6 	bl	80023e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, windowsArmed[2]); //RED
 8000674:	4b29      	ldr	r3, [pc, #164]	; (800071c <UpdateLEDs+0xfc>)
 8000676:	789b      	ldrb	r3, [r3, #2]
 8000678:	461a      	mov	r2, r3
 800067a:	2101      	movs	r1, #1
 800067c:	482a      	ldr	r0, [pc, #168]	; (8000728 <UpdateLEDs+0x108>)
 800067e:	f001 feaf 	bl	80023e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, !WinAlarm[2]); //GREEN
 8000682:	4b28      	ldr	r3, [pc, #160]	; (8000724 <UpdateLEDs+0x104>)
 8000684:	789b      	ldrb	r3, [r3, #2]
 8000686:	2b00      	cmp	r3, #0
 8000688:	bf0c      	ite	eq
 800068a:	2301      	moveq	r3, #1
 800068c:	2300      	movne	r3, #0
 800068e:	b2db      	uxtb	r3, r3
 8000690:	461a      	mov	r2, r3
 8000692:	2102      	movs	r1, #2
 8000694:	4824      	ldr	r0, [pc, #144]	; (8000728 <UpdateLEDs+0x108>)
 8000696:	f001 fea3 	bl	80023e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, windowsArmed[3]); //RED
 800069a:	4b20      	ldr	r3, [pc, #128]	; (800071c <UpdateLEDs+0xfc>)
 800069c:	78db      	ldrb	r3, [r3, #3]
 800069e:	461a      	mov	r2, r3
 80006a0:	2104      	movs	r1, #4
 80006a2:	4821      	ldr	r0, [pc, #132]	; (8000728 <UpdateLEDs+0x108>)
 80006a4:	f001 fe9c 	bl	80023e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, !WinAlarm[3]); //GREEN
 80006a8:	4b1e      	ldr	r3, [pc, #120]	; (8000724 <UpdateLEDs+0x104>)
 80006aa:	78db      	ldrb	r3, [r3, #3]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	bf0c      	ite	eq
 80006b0:	2301      	moveq	r3, #1
 80006b2:	2300      	movne	r3, #0
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	461a      	mov	r2, r3
 80006b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006bc:	481a      	ldr	r0, [pc, #104]	; (8000728 <UpdateLEDs+0x108>)
 80006be:	f001 fe8f 	bl	80023e0 <HAL_GPIO_WritePin>

	//Door LEDs
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, doorsArmed[0]); //RED
 80006c2:	4b1a      	ldr	r3, [pc, #104]	; (800072c <UpdateLEDs+0x10c>)
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	461a      	mov	r2, r3
 80006c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006cc:	4818      	ldr	r0, [pc, #96]	; (8000730 <UpdateLEDs+0x110>)
 80006ce:	f001 fe87 	bl	80023e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, !DoorAlarm[0]); //GREEN
 80006d2:	4b18      	ldr	r3, [pc, #96]	; (8000734 <UpdateLEDs+0x114>)
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	bf0c      	ite	eq
 80006da:	2301      	moveq	r3, #1
 80006dc:	2300      	movne	r3, #0
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	461a      	mov	r2, r3
 80006e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006e6:	4812      	ldr	r0, [pc, #72]	; (8000730 <UpdateLEDs+0x110>)
 80006e8:	f001 fe7a 	bl	80023e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, doorsArmed[1]); //RED
 80006ec:	4b0f      	ldr	r3, [pc, #60]	; (800072c <UpdateLEDs+0x10c>)
 80006ee:	785b      	ldrb	r3, [r3, #1]
 80006f0:	461a      	mov	r2, r3
 80006f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006f6:	480e      	ldr	r0, [pc, #56]	; (8000730 <UpdateLEDs+0x110>)
 80006f8:	f001 fe72 	bl	80023e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, !DoorAlarm[1]); //GREEN
 80006fc:	4b0d      	ldr	r3, [pc, #52]	; (8000734 <UpdateLEDs+0x114>)
 80006fe:	785b      	ldrb	r3, [r3, #1]
 8000700:	2b00      	cmp	r3, #0
 8000702:	bf0c      	ite	eq
 8000704:	2301      	moveq	r3, #1
 8000706:	2300      	movne	r3, #0
 8000708:	b2db      	uxtb	r3, r3
 800070a:	461a      	mov	r2, r3
 800070c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000710:	4807      	ldr	r0, [pc, #28]	; (8000730 <UpdateLEDs+0x110>)
 8000712:	f001 fe65 	bl	80023e0 <HAL_GPIO_WritePin>

}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	20000000 	.word	0x20000000
 8000720:	40020800 	.word	0x40020800
 8000724:	200000a4 	.word	0x200000a4
 8000728:	40020400 	.word	0x40020400
 800072c:	20000004 	.word	0x20000004
 8000730:	40020000 	.word	0x40020000
 8000734:	200000a8 	.word	0x200000a8

08000738 <ClearScreenLCD>:

void ClearScreenLCD() {
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
		uint8_t LCD_Instcode = 0xFE;
 800073e:	23fe      	movs	r3, #254	; 0xfe
 8000740:	71fb      	strb	r3, [r7, #7]
		uint8_t LCD_CLS = 1;
 8000742:	2301      	movs	r3, #1
 8000744:	71bb      	strb	r3, [r7, #6]
		uint8_t LCD_home = 0;
 8000746:	2300      	movs	r3, #0
 8000748:	717b      	strb	r3, [r7, #5]

	//Clear the LCD screen at the beginning
	HAL_UART_Transmit(&huart6,&LCD_Instcode,1,1000);
 800074a:	1df9      	adds	r1, r7, #7
 800074c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000750:	2201      	movs	r2, #1
 8000752:	4811      	ldr	r0, [pc, #68]	; (8000798 <ClearScreenLCD+0x60>)
 8000754:	f003 f86b 	bl	800382e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart6,&LCD_home,1,1000);
 8000758:	1d79      	adds	r1, r7, #5
 800075a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800075e:	2201      	movs	r2, #1
 8000760:	480d      	ldr	r0, [pc, #52]	; (8000798 <ClearScreenLCD+0x60>)
 8000762:	f003 f864 	bl	800382e <HAL_UART_Transmit>
	HAL_Delay(100);
 8000766:	2064      	movs	r0, #100	; 0x64
 8000768:	f001 f874 	bl	8001854 <HAL_Delay>
	HAL_UART_Transmit(&huart6,&LCD_Instcode,1,1000);
 800076c:	1df9      	adds	r1, r7, #7
 800076e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000772:	2201      	movs	r2, #1
 8000774:	4808      	ldr	r0, [pc, #32]	; (8000798 <ClearScreenLCD+0x60>)
 8000776:	f003 f85a 	bl	800382e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart6,&LCD_CLS,1,1000);
 800077a:	1db9      	adds	r1, r7, #6
 800077c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000780:	2201      	movs	r2, #1
 8000782:	4805      	ldr	r0, [pc, #20]	; (8000798 <ClearScreenLCD+0x60>)
 8000784:	f003 f853 	bl	800382e <HAL_UART_Transmit>
	HAL_Delay(100);
 8000788:	2064      	movs	r0, #100	; 0x64
 800078a:	f001 f863 	bl	8001854 <HAL_Delay>
}
 800078e:	bf00      	nop
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	200001ac 	.word	0x200001ac

0800079c <WriteLine>:

void WriteLine(const char* strLine, int nLineNum) {
 800079c:	b580      	push	{r7, lr}
 800079e:	b084      	sub	sp, #16
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
 80007a4:	6039      	str	r1, [r7, #0]
	uint8_t LCD_Instcode = 0xFE;
 80007a6:	23fe      	movs	r3, #254	; 0xfe
 80007a8:	73fb      	strb	r3, [r7, #15]
	uint8_t LCD_rows[4] = { 128, 192, 148, 212 };
 80007aa:	4b14      	ldr	r3, [pc, #80]	; (80007fc <WriteLine+0x60>)
 80007ac:	60bb      	str	r3, [r7, #8]

	HAL_UART_Transmit(&huart6, &LCD_Instcode, 1, 1000);
 80007ae:	f107 010f 	add.w	r1, r7, #15
 80007b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007b6:	2201      	movs	r2, #1
 80007b8:	4811      	ldr	r0, [pc, #68]	; (8000800 <WriteLine+0x64>)
 80007ba:	f003 f838 	bl	800382e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart6, &LCD_rows[nLineNum], 1, 1000);
 80007be:	f107 0208 	add.w	r2, r7, #8
 80007c2:	683b      	ldr	r3, [r7, #0]
 80007c4:	18d1      	adds	r1, r2, r3
 80007c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007ca:	2201      	movs	r2, #1
 80007cc:	480c      	ldr	r0, [pc, #48]	; (8000800 <WriteLine+0x64>)
 80007ce:	f003 f82e 	bl	800382e <HAL_UART_Transmit>
	HAL_Delay(100);
 80007d2:	2064      	movs	r0, #100	; 0x64
 80007d4:	f001 f83e 	bl	8001854 <HAL_Delay>
	HAL_UART_Transmit(&huart6, (uint8_t*)strLine, strlen((char*)strLine), 1000);
 80007d8:	6878      	ldr	r0, [r7, #4]
 80007da:	f7ff fd0b 	bl	80001f4 <strlen>
 80007de:	4603      	mov	r3, r0
 80007e0:	b29a      	uxth	r2, r3
 80007e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007e6:	6879      	ldr	r1, [r7, #4]
 80007e8:	4805      	ldr	r0, [pc, #20]	; (8000800 <WriteLine+0x64>)
 80007ea:	f003 f820 	bl	800382e <HAL_UART_Transmit>
	HAL_Delay(100);
 80007ee:	2064      	movs	r0, #100	; 0x64
 80007f0:	f001 f830 	bl	8001854 <HAL_Delay>
}
 80007f4:	bf00      	nop
 80007f6:	3710      	adds	r7, #16
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	d494c080 	.word	0xd494c080
 8000800:	200001ac 	.word	0x200001ac

08000804 <PadSpaces>:

void PadSpaces(char line[21]) {
 8000804:	b580      	push	{r7, lr}
 8000806:	b084      	sub	sp, #16
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
	int nLen = strlen(line);
 800080c:	6878      	ldr	r0, [r7, #4]
 800080e:	f7ff fcf1 	bl	80001f4 <strlen>
 8000812:	4603      	mov	r3, r0
 8000814:	60bb      	str	r3, [r7, #8]

	for (int i = nLen; i < 20; i++) {
 8000816:	68bb      	ldr	r3, [r7, #8]
 8000818:	60fb      	str	r3, [r7, #12]
 800081a:	e007      	b.n	800082c <PadSpaces+0x28>
		line[i] = ' ';
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	687a      	ldr	r2, [r7, #4]
 8000820:	4413      	add	r3, r2
 8000822:	2220      	movs	r2, #32
 8000824:	701a      	strb	r2, [r3, #0]
	for (int i = nLen; i < 20; i++) {
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	3301      	adds	r3, #1
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	2b13      	cmp	r3, #19
 8000830:	ddf4      	ble.n	800081c <PadSpaces+0x18>
	}
	line[20] = 0;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	3314      	adds	r3, #20
 8000836:	2200      	movs	r2, #0
 8000838:	701a      	strb	r2, [r3, #0]
}
 800083a:	bf00      	nop
 800083c:	3710      	adds	r7, #16
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
	...

08000844 <UpdateLCD>:
void UpdateLCD() {
 8000844:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000846:	b09f      	sub	sp, #124	; 0x7c
 8000848:	af02      	add	r7, sp, #8
	const char mapStatus[3][2] = {"D", "A", "X"};
 800084a:	4a95      	ldr	r2, [pc, #596]	; (8000aa0 <UpdateLCD+0x25c>)
 800084c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000850:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000854:	6018      	str	r0, [r3, #0]
 8000856:	3304      	adds	r3, #4
 8000858:	8019      	strh	r1, [r3, #0]
	char line1[21];
	char line2[21];
	char line3[21];
	char line4[21];

	if (g_bIsRunMode) {
 800085a:	4b92      	ldr	r3, [pc, #584]	; (8000aa4 <UpdateLCD+0x260>)
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d055      	beq.n	800090e <UpdateLCD+0xca>
		sprintf(line1, "M:RUN hh:mm:ss");
 8000862:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000866:	4990      	ldr	r1, [pc, #576]	; (8000aa8 <UpdateLCD+0x264>)
 8000868:	4618      	mov	r0, r3
 800086a:	f003 ff8d 	bl	8004788 <siprintf>
		sprintf(line2, "D1:%s D2:%s", mapStatus[GetStatusNum(4)], mapStatus[GetStatusNum(5)]);
 800086e:	2004      	movs	r0, #4
 8000870:	f7ff fe9a 	bl	80005a8 <GetStatusNum>
 8000874:	4603      	mov	r3, r0
 8000876:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800087a:	005b      	lsls	r3, r3, #1
 800087c:	18d4      	adds	r4, r2, r3
 800087e:	2005      	movs	r0, #5
 8000880:	f7ff fe92 	bl	80005a8 <GetStatusNum>
 8000884:	4603      	mov	r3, r0
 8000886:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800088a:	005b      	lsls	r3, r3, #1
 800088c:	4413      	add	r3, r2
 800088e:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8000892:	4622      	mov	r2, r4
 8000894:	4985      	ldr	r1, [pc, #532]	; (8000aac <UpdateLCD+0x268>)
 8000896:	f003 ff77 	bl	8004788 <siprintf>
		sprintf(line3, "W1:%s W2:%s W3:%s W4:%s", mapStatus[GetStatusNum(0)], mapStatus[GetStatusNum(1)], mapStatus[GetStatusNum(2)], mapStatus[GetStatusNum(3)]);
 800089a:	2000      	movs	r0, #0
 800089c:	f7ff fe84 	bl	80005a8 <GetStatusNum>
 80008a0:	4603      	mov	r3, r0
 80008a2:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80008a6:	005b      	lsls	r3, r3, #1
 80008a8:	18d5      	adds	r5, r2, r3
 80008aa:	2001      	movs	r0, #1
 80008ac:	f7ff fe7c 	bl	80005a8 <GetStatusNum>
 80008b0:	4603      	mov	r3, r0
 80008b2:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80008b6:	005b      	lsls	r3, r3, #1
 80008b8:	18d6      	adds	r6, r2, r3
 80008ba:	2002      	movs	r0, #2
 80008bc:	f7ff fe74 	bl	80005a8 <GetStatusNum>
 80008c0:	4603      	mov	r3, r0
 80008c2:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80008c6:	005b      	lsls	r3, r3, #1
 80008c8:	18d4      	adds	r4, r2, r3
 80008ca:	2003      	movs	r0, #3
 80008cc:	f7ff fe6c 	bl	80005a8 <GetStatusNum>
 80008d0:	4603      	mov	r3, r0
 80008d2:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80008d6:	005b      	lsls	r3, r3, #1
 80008d8:	4413      	add	r3, r2
 80008da:	f107 001c 	add.w	r0, r7, #28
 80008de:	9301      	str	r3, [sp, #4]
 80008e0:	9400      	str	r4, [sp, #0]
 80008e2:	4633      	mov	r3, r6
 80008e4:	462a      	mov	r2, r5
 80008e6:	4972      	ldr	r1, [pc, #456]	; (8000ab0 <UpdateLCD+0x26c>)
 80008e8:	f003 ff4e 	bl	8004788 <siprintf>

		for (int i = 0; i < 20; i++) {
 80008ec:	2300      	movs	r3, #0
 80008ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 80008f0:	e007      	b.n	8000902 <UpdateLCD+0xbe>
			line4[i] = ' ';
 80008f2:	1d3a      	adds	r2, r7, #4
 80008f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80008f6:	4413      	add	r3, r2
 80008f8:	2220      	movs	r2, #32
 80008fa:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 20; i++) {
 80008fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80008fe:	3301      	adds	r3, #1
 8000900:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000902:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000904:	2b13      	cmp	r3, #19
 8000906:	ddf4      	ble.n	80008f2 <UpdateLCD+0xae>
		}
		line4[20] = 0;
 8000908:	2300      	movs	r3, #0
 800090a:	763b      	strb	r3, [r7, #24]
 800090c:	e060      	b.n	80009d0 <UpdateLCD+0x18c>
	}
	else {
		sprintf(line1, "M:S hh:mm:ss K:%d%d%d%d", combination[0], combination[1], combination[2], combination[3]);
 800090e:	4b69      	ldr	r3, [pc, #420]	; (8000ab4 <UpdateLCD+0x270>)
 8000910:	881b      	ldrh	r3, [r3, #0]
 8000912:	4619      	mov	r1, r3
 8000914:	4b67      	ldr	r3, [pc, #412]	; (8000ab4 <UpdateLCD+0x270>)
 8000916:	885b      	ldrh	r3, [r3, #2]
 8000918:	461c      	mov	r4, r3
 800091a:	4b66      	ldr	r3, [pc, #408]	; (8000ab4 <UpdateLCD+0x270>)
 800091c:	889b      	ldrh	r3, [r3, #4]
 800091e:	461a      	mov	r2, r3
 8000920:	4b64      	ldr	r3, [pc, #400]	; (8000ab4 <UpdateLCD+0x270>)
 8000922:	88db      	ldrh	r3, [r3, #6]
 8000924:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8000928:	9301      	str	r3, [sp, #4]
 800092a:	9200      	str	r2, [sp, #0]
 800092c:	4623      	mov	r3, r4
 800092e:	460a      	mov	r2, r1
 8000930:	4961      	ldr	r1, [pc, #388]	; (8000ab8 <UpdateLCD+0x274>)
 8000932:	f003 ff29 	bl	8004788 <siprintf>
		sprintf(line2, "D1:%s D2:%s", mapStatus[GetStatusNum(4)], mapStatus[GetStatusNum(5)]);
 8000936:	2004      	movs	r0, #4
 8000938:	f7ff fe36 	bl	80005a8 <GetStatusNum>
 800093c:	4603      	mov	r3, r0
 800093e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8000942:	005b      	lsls	r3, r3, #1
 8000944:	18d4      	adds	r4, r2, r3
 8000946:	2005      	movs	r0, #5
 8000948:	f7ff fe2e 	bl	80005a8 <GetStatusNum>
 800094c:	4603      	mov	r3, r0
 800094e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8000952:	005b      	lsls	r3, r3, #1
 8000954:	4413      	add	r3, r2
 8000956:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800095a:	4622      	mov	r2, r4
 800095c:	4953      	ldr	r1, [pc, #332]	; (8000aac <UpdateLCD+0x268>)
 800095e:	f003 ff13 	bl	8004788 <siprintf>
		sprintf(line3, "W1:%s W2:%s W3:%s W4:%s", mapStatus[GetStatusNum(0)], mapStatus[GetStatusNum(1)], mapStatus[GetStatusNum(2)], mapStatus[GetStatusNum(3)]);
 8000962:	2000      	movs	r0, #0
 8000964:	f7ff fe20 	bl	80005a8 <GetStatusNum>
 8000968:	4603      	mov	r3, r0
 800096a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800096e:	005b      	lsls	r3, r3, #1
 8000970:	18d5      	adds	r5, r2, r3
 8000972:	2001      	movs	r0, #1
 8000974:	f7ff fe18 	bl	80005a8 <GetStatusNum>
 8000978:	4603      	mov	r3, r0
 800097a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800097e:	005b      	lsls	r3, r3, #1
 8000980:	18d6      	adds	r6, r2, r3
 8000982:	2002      	movs	r0, #2
 8000984:	f7ff fe10 	bl	80005a8 <GetStatusNum>
 8000988:	4603      	mov	r3, r0
 800098a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800098e:	005b      	lsls	r3, r3, #1
 8000990:	18d4      	adds	r4, r2, r3
 8000992:	2003      	movs	r0, #3
 8000994:	f7ff fe08 	bl	80005a8 <GetStatusNum>
 8000998:	4603      	mov	r3, r0
 800099a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800099e:	005b      	lsls	r3, r3, #1
 80009a0:	4413      	add	r3, r2
 80009a2:	f107 001c 	add.w	r0, r7, #28
 80009a6:	9301      	str	r3, [sp, #4]
 80009a8:	9400      	str	r4, [sp, #0]
 80009aa:	4633      	mov	r3, r6
 80009ac:	462a      	mov	r2, r5
 80009ae:	4940      	ldr	r1, [pc, #256]	; (8000ab0 <UpdateLCD+0x26c>)
 80009b0:	f003 feea 	bl	8004788 <siprintf>
		sprintf(line4, "FDD:%d BDD:%d AD:%d", g_FrontDoorDist, g_BackDoorDist, g_AlarmDelay);
 80009b4:	4b41      	ldr	r3, [pc, #260]	; (8000abc <UpdateLCD+0x278>)
 80009b6:	881b      	ldrh	r3, [r3, #0]
 80009b8:	461a      	mov	r2, r3
 80009ba:	4b41      	ldr	r3, [pc, #260]	; (8000ac0 <UpdateLCD+0x27c>)
 80009bc:	881b      	ldrh	r3, [r3, #0]
 80009be:	4619      	mov	r1, r3
 80009c0:	4b40      	ldr	r3, [pc, #256]	; (8000ac4 <UpdateLCD+0x280>)
 80009c2:	881b      	ldrh	r3, [r3, #0]
 80009c4:	1d38      	adds	r0, r7, #4
 80009c6:	9300      	str	r3, [sp, #0]
 80009c8:	460b      	mov	r3, r1
 80009ca:	493f      	ldr	r1, [pc, #252]	; (8000ac8 <UpdateLCD+0x284>)
 80009cc:	f003 fedc 	bl	8004788 <siprintf>
	}

	PadSpaces(line1);
 80009d0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80009d4:	4618      	mov	r0, r3
 80009d6:	f7ff ff15 	bl	8000804 <PadSpaces>
	PadSpaces(line2);
 80009da:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80009de:	4618      	mov	r0, r3
 80009e0:	f7ff ff10 	bl	8000804 <PadSpaces>
	PadSpaces(line3);
 80009e4:	f107 031c 	add.w	r3, r7, #28
 80009e8:	4618      	mov	r0, r3
 80009ea:	f7ff ff0b 	bl	8000804 <PadSpaces>
	PadSpaces(line4);
 80009ee:	1d3b      	adds	r3, r7, #4
 80009f0:	4618      	mov	r0, r3
 80009f2:	f7ff ff07 	bl	8000804 <PadSpaces>

	if (strcmp(g_LcdLine1, line1)) {
 80009f6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80009fa:	4619      	mov	r1, r3
 80009fc:	4833      	ldr	r0, [pc, #204]	; (8000acc <UpdateLCD+0x288>)
 80009fe:	f7ff fbef 	bl	80001e0 <strcmp>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d00b      	beq.n	8000a20 <UpdateLCD+0x1dc>
		WriteLine(line1, 0);
 8000a08:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f7ff fec4 	bl	800079c <WriteLine>
		strcpy(g_LcdLine1, line1);
 8000a14:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000a18:	4619      	mov	r1, r3
 8000a1a:	482c      	ldr	r0, [pc, #176]	; (8000acc <UpdateLCD+0x288>)
 8000a1c:	f003 fed4 	bl	80047c8 <strcpy>
	}
	if (strcmp(g_LcdLine2, line2)) {
 8000a20:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a24:	4619      	mov	r1, r3
 8000a26:	482a      	ldr	r0, [pc, #168]	; (8000ad0 <UpdateLCD+0x28c>)
 8000a28:	f7ff fbda 	bl	80001e0 <strcmp>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d00b      	beq.n	8000a4a <UpdateLCD+0x206>
		WriteLine(line2, 1);
 8000a32:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a36:	2101      	movs	r1, #1
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f7ff feaf 	bl	800079c <WriteLine>
		strcpy(g_LcdLine2, line2);
 8000a3e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a42:	4619      	mov	r1, r3
 8000a44:	4822      	ldr	r0, [pc, #136]	; (8000ad0 <UpdateLCD+0x28c>)
 8000a46:	f003 febf 	bl	80047c8 <strcpy>
	}
	if (strcmp(g_LcdLine3, line3)) {
 8000a4a:	f107 031c 	add.w	r3, r7, #28
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4820      	ldr	r0, [pc, #128]	; (8000ad4 <UpdateLCD+0x290>)
 8000a52:	f7ff fbc5 	bl	80001e0 <strcmp>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d00b      	beq.n	8000a74 <UpdateLCD+0x230>
		WriteLine(line3, 2);
 8000a5c:	f107 031c 	add.w	r3, r7, #28
 8000a60:	2102      	movs	r1, #2
 8000a62:	4618      	mov	r0, r3
 8000a64:	f7ff fe9a 	bl	800079c <WriteLine>
		strcpy(g_LcdLine3, line3);
 8000a68:	f107 031c 	add.w	r3, r7, #28
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4819      	ldr	r0, [pc, #100]	; (8000ad4 <UpdateLCD+0x290>)
 8000a70:	f003 feaa 	bl	80047c8 <strcpy>
	}
	if (strcmp(g_LcdLine4, line4)) {
 8000a74:	1d3b      	adds	r3, r7, #4
 8000a76:	4619      	mov	r1, r3
 8000a78:	4817      	ldr	r0, [pc, #92]	; (8000ad8 <UpdateLCD+0x294>)
 8000a7a:	f7ff fbb1 	bl	80001e0 <strcmp>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d009      	beq.n	8000a98 <UpdateLCD+0x254>
		WriteLine(line4, 3);
 8000a84:	1d3b      	adds	r3, r7, #4
 8000a86:	2103      	movs	r1, #3
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f7ff fe87 	bl	800079c <WriteLine>
		strcpy(g_LcdLine4, line4);
 8000a8e:	1d3b      	adds	r3, r7, #4
 8000a90:	4619      	mov	r1, r3
 8000a92:	4811      	ldr	r0, [pc, #68]	; (8000ad8 <UpdateLCD+0x294>)
 8000a94:	f003 fe98 	bl	80047c8 <strcpy>
	}
}
 8000a98:	bf00      	nop
 8000a9a:	3774      	adds	r7, #116	; 0x74
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000aa0:	0800506c 	.word	0x0800506c
 8000aa4:	200000aa 	.word	0x200000aa
 8000aa8:	0800500c 	.word	0x0800500c
 8000aac:	0800501c 	.word	0x0800501c
 8000ab0:	08005028 	.word	0x08005028
 8000ab4:	20000008 	.word	0x20000008
 8000ab8:	08005040 	.word	0x08005040
 8000abc:	20000010 	.word	0x20000010
 8000ac0:	20000012 	.word	0x20000012
 8000ac4:	20000014 	.word	0x20000014
 8000ac8:	08005058 	.word	0x08005058
 8000acc:	200000ac 	.word	0x200000ac
 8000ad0:	200000c4 	.word	0x200000c4
 8000ad4:	200000dc 	.word	0x200000dc
 8000ad8:	200000f4 	.word	0x200000f4

08000adc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000adc:	b5b0      	push	{r4, r5, r7, lr}
 8000ade:	b098      	sub	sp, #96	; 0x60
 8000ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	//Keypad Variables
	uint16_t keypadLastTimerCount = 0;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
	uint16_t keypadColState = 0;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	uint16_t keypadLastState = 0;
 8000aee:	2300      	movs	r3, #0
 8000af0:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

	GPIO_TypeDef* const mapKeypadInput[4] = { GPIOB, GPIOB, GPIOB, GPIOB };
 8000af4:	4bc2      	ldr	r3, [pc, #776]	; (8000e00 <main+0x324>)
 8000af6:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8000afa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000afc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint16_t mapKeypadInputNum[4] = { GPIO_PIN_15, GPIO_PIN_14, GPIO_PIN_13, GPIO_PIN_12 };
 8000b00:	4ac0      	ldr	r2, [pc, #768]	; (8000e04 <main+0x328>)
 8000b02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b06:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b0a:	e883 0003 	stmia.w	r3, {r0, r1}

	GPIO_TypeDef* const mapKeypadOutput[3] = { GPIOA, GPIOC, GPIOA };
 8000b0e:	4abe      	ldr	r2, [pc, #760]	; (8000e08 <main+0x32c>)
 8000b10:	f107 0320 	add.w	r3, r7, #32
 8000b14:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b16:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint16_t mapKeypadOutputNum[3] = { GPIO_PIN_8, GPIO_PIN_9, GPIO_PIN_15 };
 8000b1a:	4abc      	ldr	r2, [pc, #752]	; (8000e0c <main+0x330>)
 8000b1c:	f107 0318 	add.w	r3, r7, #24
 8000b20:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b24:	6018      	str	r0, [r3, #0]
 8000b26:	3304      	adds	r3, #4
 8000b28:	8019      	strh	r1, [r3, #0]


	uint16_t keymap [12]= {1,2,3,4,5,6,7,8,9,11,0,12}; //11=*, 12 = #
 8000b2a:	4bb9      	ldr	r3, [pc, #740]	; (8000e10 <main+0x334>)
 8000b2c:	463c      	mov	r4, r7
 8000b2e:	461d      	mov	r5, r3
 8000b30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b34:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000b38:	e884 0003 	stmia.w	r4, {r0, r1}
	uint16_t combinationIndex = 0; //What digit in the combination is being tested for.
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
	uint16_t combinationCorrect = 0; //How many digits in the current combination have been correct
 8000b42:	2300      	movs	r3, #0
 8000b44:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56


//	uint16_t LCDLastTimerCount = 0;
	uint16_t LEDLastTimerCount = 0;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b4e:	f000 fe0f 	bl	8001770 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b52:	f000 f983 	bl	8000e5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b56:	f000 fb31 	bl	80011bc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b5a:	f000 fadb 	bl	8001114 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8000b5e:	f000 fa7f 	bl	8001060 <MX_TIM4_Init>
  MX_ADC1_Init();
 8000b62:	f000 f9db 	bl	8000f1c <MX_ADC1_Init>
  MX_USART6_UART_Init();
 8000b66:	f000 faff 	bl	8001168 <MX_USART6_UART_Init>
  MX_TIM2_Init();
 8000b6a:	f000 fa2b 	bl	8000fc4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart6, &g_uartRcvByte, 1);
 8000b6e:	2201      	movs	r2, #1
 8000b70:	49a8      	ldr	r1, [pc, #672]	; (8000e14 <main+0x338>)
 8000b72:	48a9      	ldr	r0, [pc, #676]	; (8000e18 <main+0x33c>)
 8000b74:	f002 feed 	bl	8003952 <HAL_UART_Receive_IT>

  //Initialize timer
  uint16_t nCurTime2 = 0;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
  HAL_TIM_Base_Start(&htim2);
 8000b7e:	48a7      	ldr	r0, [pc, #668]	; (8000e1c <main+0x340>)
 8000b80:	f002 f926 	bl	8002dd0 <HAL_TIM_Base_Start>
  keypadLastTimerCount = __HAL_TIM_GET_COUNTER(&htim2);
 8000b84:	4ba5      	ldr	r3, [pc, #660]	; (8000e1c <main+0x340>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b8a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
  LEDLastTimerCount = __HAL_TIM_GET_COUNTER(&htim2);
 8000b8e:	4ba3      	ldr	r3, [pc, #652]	; (8000e1c <main+0x340>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b94:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54

  ClearScreenLCD();
 8000b98:	f7ff fdce 	bl	8000738 <ClearScreenLCD>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  nCurTime2 = __HAL_TIM_GET_COUNTER(&htim2);
 8000b9c:	4b9f      	ldr	r3, [pc, #636]	; (8000e1c <main+0x340>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ba2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	  ///////////////
	  //KEYPAD LOGIC
	  //////////////

	  if (nCurTime2-keypadLastTimerCount >= 10) //Only scan keypad every 10ms
 8000ba6:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8000baa:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000bae:	1ad3      	subs	r3, r2, r3
 8000bb0:	2b09      	cmp	r3, #9
 8000bb2:	f340 80b4 	ble.w	8000d1e <main+0x242>
	  {
		  keypadLastTimerCount = nCurTime2;
 8000bb6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8000bba:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
		  for (int i = 0; i < 4; i++) { //For all rows
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	653b      	str	r3, [r7, #80]	; 0x50
 8000bc2:	e073      	b.n	8000cac <main+0x1d0>
			  short nBitPos = keypadColState + 3*i;
 8000bc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000bc6:	b29b      	uxth	r3, r3
 8000bc8:	461a      	mov	r2, r3
 8000bca:	0052      	lsls	r2, r2, #1
 8000bcc:	4413      	add	r3, r2
 8000bce:	b29a      	uxth	r2, r3
 8000bd0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8000bd4:	4413      	add	r3, r2
 8000bd6:	b29b      	uxth	r3, r3
 8000bd8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
			  if (HAL_GPIO_ReadPin(mapKeypadInput[i], mapKeypadInputNum[i])) //Button i is down
 8000bdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000bde:	009b      	lsls	r3, r3, #2
 8000be0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8000be4:	4413      	add	r3, r2
 8000be6:	f853 2c2c 	ldr.w	r2, [r3, #-44]
 8000bea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000bec:	005b      	lsls	r3, r3, #1
 8000bee:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000bf2:	440b      	add	r3, r1
 8000bf4:	f833 3c34 	ldrh.w	r3, [r3, #-52]
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4610      	mov	r0, r2
 8000bfc:	f001 fbd8 	bl	80023b0 <HAL_GPIO_ReadPin>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d041      	beq.n	8000c8a <main+0x1ae>
			  {
				  if(!((keypadLastState >> nBitPos) & 1)){//button at i was just pressed.
 8000c06:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 8000c0a:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8000c0e:	fa42 f303 	asr.w	r3, r2, r3
 8000c12:	f003 0301 	and.w	r3, r3, #1
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d145      	bne.n	8000ca6 <main+0x1ca>
					  keypadLastState |= (1 << nBitPos);
 8000c1a:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8000c1e:	2201      	movs	r2, #1
 8000c20:	fa02 f303 	lsl.w	r3, r2, r3
 8000c24:	b21a      	sxth	r2, r3
 8000c26:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8000c2a:	4313      	orrs	r3, r2
 8000c2c:	b21b      	sxth	r3, r3
 8000c2e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

					  //Basic code to figure out whether the combination has been typed in. Invulnerable to De Brujin Sequence.
					  if(keymap[nBitPos] == combination[combinationIndex]){
 8000c32:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8000c36:	005b      	lsls	r3, r3, #1
 8000c38:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8000c3c:	4413      	add	r3, r2
 8000c3e:	f833 2c60 	ldrh.w	r2, [r3, #-96]
 8000c42:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8000c46:	4976      	ldr	r1, [pc, #472]	; (8000e20 <main+0x344>)
 8000c48:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	d109      	bne.n	8000c64 <main+0x188>
						  combinationCorrect++;
 8000c50:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000c54:	3301      	adds	r3, #1
 8000c56:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
						  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0); //One of the RGB LED's
 8000c5a:	2101      	movs	r1, #1
 8000c5c:	4871      	ldr	r0, [pc, #452]	; (8000e24 <main+0x348>)
 8000c5e:	f001 fbd8 	bl	8002412 <HAL_GPIO_TogglePin>
 8000c62:	e002      	b.n	8000c6a <main+0x18e>
					  }
					  else{
						  combinationCorrect = 0;
 8000c64:	2300      	movs	r3, #0
 8000c66:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
					  }

					  combinationIndex++;
 8000c6a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8000c6e:	3301      	adds	r3, #1
 8000c70:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
					  if (combinationIndex == 4){
 8000c74:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8000c78:	2b04      	cmp	r3, #4
 8000c7a:	d114      	bne.n	8000ca6 <main+0x1ca>
						  }
						  else{
//							  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_4); //Another one of the RGB LED's
						  }

						  combinationIndex = 0;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
						  combinationCorrect = 0;
 8000c82:	2300      	movs	r3, #0
 8000c84:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8000c88:	e00d      	b.n	8000ca6 <main+0x1ca>
					  }
				  }
			  }
			  else {
				  keypadLastState &= ~(1 << nBitPos);
 8000c8a:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8000c8e:	2201      	movs	r2, #1
 8000c90:	fa02 f303 	lsl.w	r3, r2, r3
 8000c94:	b21b      	sxth	r3, r3
 8000c96:	43db      	mvns	r3, r3
 8000c98:	b21a      	sxth	r2, r3
 8000c9a:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	b21b      	sxth	r3, r3
 8000ca2:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
		  for (int i = 0; i < 4; i++) { //For all rows
 8000ca6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000ca8:	3301      	adds	r3, #1
 8000caa:	653b      	str	r3, [r7, #80]	; 0x50
 8000cac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000cae:	2b03      	cmp	r3, #3
 8000cb0:	dd88      	ble.n	8000bc4 <main+0xe8>
			  }
		  }
		  keypadColState = (keypadColState+1) % 3; //Move to next column
 8000cb2:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8000cb6:	1c5a      	adds	r2, r3, #1
 8000cb8:	4b5b      	ldr	r3, [pc, #364]	; (8000e28 <main+0x34c>)
 8000cba:	fb83 3102 	smull	r3, r1, r3, r2
 8000cbe:	17d3      	asrs	r3, r2, #31
 8000cc0:	1ac9      	subs	r1, r1, r3
 8000cc2:	460b      	mov	r3, r1
 8000cc4:	005b      	lsls	r3, r3, #1
 8000cc6:	440b      	add	r3, r1
 8000cc8:	1ad1      	subs	r1, r2, r3
 8000cca:	460b      	mov	r3, r1
 8000ccc:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
		  for (int i = 0; i < 3; i++) {
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000cd4:	e020      	b.n	8000d18 <main+0x23c>
			  short nValue = (keypadColState == i);
 8000cd6:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8000cda:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	bf0c      	ite	eq
 8000ce0:	2301      	moveq	r3, #1
 8000ce2:	2300      	movne	r3, #0
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
			  HAL_GPIO_WritePin(mapKeypadOutput[i], mapKeypadOutputNum[i], nValue);
 8000cea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000cec:	009b      	lsls	r3, r3, #2
 8000cee:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8000cf2:	4413      	add	r3, r2
 8000cf4:	f853 0c40 	ldr.w	r0, [r3, #-64]
 8000cf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000cfa:	005b      	lsls	r3, r3, #1
 8000cfc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8000d00:	4413      	add	r3, r2
 8000d02:	f833 3c48 	ldrh.w	r3, [r3, #-72]
 8000d06:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8000d0a:	b2d2      	uxtb	r2, r2
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	f001 fb67 	bl	80023e0 <HAL_GPIO_WritePin>
		  for (int i = 0; i < 3; i++) {
 8000d12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d14:	3301      	adds	r3, #1
 8000d16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000d18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d1a:	2b02      	cmp	r3, #2
 8000d1c:	dddb      	ble.n	8000cd6 <main+0x1fa>
	  //Red on Armed and ALARM (!Disarmed)
	  //Currently, everything is armed all the time, and there is no way to disarm stuff.


	  //Update at xHz to avoid lag in Proteus.
	  if(nCurTime2-LEDLastTimerCount >= 50){
 8000d1e:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8000d22:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8000d26:	1ad3      	subs	r3, r2, r3
 8000d28:	2b31      	cmp	r3, #49	; 0x31
 8000d2a:	f340 808f 	ble.w	8000e4c <main+0x370>
		  LEDLastTimerCount = nCurTime2;
 8000d2e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8000d32:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54

//		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_11);

		  //Window/Door is_open
		  WinAlarm[0] = ( (!(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0))) && windowsArmed[0] );
 8000d36:	2101      	movs	r1, #1
 8000d38:	483c      	ldr	r0, [pc, #240]	; (8000e2c <main+0x350>)
 8000d3a:	f001 fb39 	bl	80023b0 <HAL_GPIO_ReadPin>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d105      	bne.n	8000d50 <main+0x274>
 8000d44:	4b3a      	ldr	r3, [pc, #232]	; (8000e30 <main+0x354>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <main+0x274>
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	e000      	b.n	8000d52 <main+0x276>
 8000d50:	2300      	movs	r3, #0
 8000d52:	b2da      	uxtb	r2, r3
 8000d54:	4b37      	ldr	r3, [pc, #220]	; (8000e34 <main+0x358>)
 8000d56:	701a      	strb	r2, [r3, #0]
		  WinAlarm[1] = ( (!(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1))) && windowsArmed[1] );
 8000d58:	2102      	movs	r1, #2
 8000d5a:	4834      	ldr	r0, [pc, #208]	; (8000e2c <main+0x350>)
 8000d5c:	f001 fb28 	bl	80023b0 <HAL_GPIO_ReadPin>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d105      	bne.n	8000d72 <main+0x296>
 8000d66:	4b32      	ldr	r3, [pc, #200]	; (8000e30 <main+0x354>)
 8000d68:	785b      	ldrb	r3, [r3, #1]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <main+0x296>
 8000d6e:	2301      	movs	r3, #1
 8000d70:	e000      	b.n	8000d74 <main+0x298>
 8000d72:	2300      	movs	r3, #0
 8000d74:	b2da      	uxtb	r2, r3
 8000d76:	4b2f      	ldr	r3, [pc, #188]	; (8000e34 <main+0x358>)
 8000d78:	705a      	strb	r2, [r3, #1]
		  WinAlarm[2] = ((!(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2))) && windowsArmed[2]);
 8000d7a:	2104      	movs	r1, #4
 8000d7c:	482b      	ldr	r0, [pc, #172]	; (8000e2c <main+0x350>)
 8000d7e:	f001 fb17 	bl	80023b0 <HAL_GPIO_ReadPin>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d105      	bne.n	8000d94 <main+0x2b8>
 8000d88:	4b29      	ldr	r3, [pc, #164]	; (8000e30 <main+0x354>)
 8000d8a:	789b      	ldrb	r3, [r3, #2]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <main+0x2b8>
 8000d90:	2301      	movs	r3, #1
 8000d92:	e000      	b.n	8000d96 <main+0x2ba>
 8000d94:	2300      	movs	r3, #0
 8000d96:	b2da      	uxtb	r2, r3
 8000d98:	4b26      	ldr	r3, [pc, #152]	; (8000e34 <main+0x358>)
 8000d9a:	709a      	strb	r2, [r3, #2]
		  WinAlarm[3] = ((!(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3))) && windowsArmed[3]);
 8000d9c:	2108      	movs	r1, #8
 8000d9e:	4823      	ldr	r0, [pc, #140]	; (8000e2c <main+0x350>)
 8000da0:	f001 fb06 	bl	80023b0 <HAL_GPIO_ReadPin>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d105      	bne.n	8000db6 <main+0x2da>
 8000daa:	4b21      	ldr	r3, [pc, #132]	; (8000e30 <main+0x354>)
 8000dac:	78db      	ldrb	r3, [r3, #3]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <main+0x2da>
 8000db2:	2301      	movs	r3, #1
 8000db4:	e000      	b.n	8000db8 <main+0x2dc>
 8000db6:	2300      	movs	r3, #0
 8000db8:	b2da      	uxtb	r2, r3
 8000dba:	4b1e      	ldr	r3, [pc, #120]	; (8000e34 <main+0x358>)
 8000dbc:	70da      	strb	r2, [r3, #3]
		  DoorAlarm[0] = ((!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9))) && doorsArmed[0]);
 8000dbe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dc2:	4818      	ldr	r0, [pc, #96]	; (8000e24 <main+0x348>)
 8000dc4:	f001 faf4 	bl	80023b0 <HAL_GPIO_ReadPin>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d105      	bne.n	8000dda <main+0x2fe>
 8000dce:	4b1a      	ldr	r3, [pc, #104]	; (8000e38 <main+0x35c>)
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <main+0x2fe>
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	e000      	b.n	8000ddc <main+0x300>
 8000dda:	2300      	movs	r3, #0
 8000ddc:	b2da      	uxtb	r2, r3
 8000dde:	4b17      	ldr	r3, [pc, #92]	; (8000e3c <main+0x360>)
 8000de0:	701a      	strb	r2, [r3, #0]
		  DoorAlarm[1] = ((!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8))) && doorsArmed[1]);
 8000de2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000de6:	480f      	ldr	r0, [pc, #60]	; (8000e24 <main+0x348>)
 8000de8:	f001 fae2 	bl	80023b0 <HAL_GPIO_ReadPin>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d126      	bne.n	8000e40 <main+0x364>
 8000df2:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <main+0x35c>)
 8000df4:	785b      	ldrb	r3, [r3, #1]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d022      	beq.n	8000e40 <main+0x364>
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e021      	b.n	8000e42 <main+0x366>
 8000dfe:	bf00      	nop
 8000e00:	08005074 	.word	0x08005074
 8000e04:	08005084 	.word	0x08005084
 8000e08:	0800508c 	.word	0x0800508c
 8000e0c:	08005098 	.word	0x08005098
 8000e10:	080050a0 	.word	0x080050a0
 8000e14:	20000118 	.word	0x20000118
 8000e18:	200001ac 	.word	0x200001ac
 8000e1c:	200001f0 	.word	0x200001f0
 8000e20:	20000008 	.word	0x20000008
 8000e24:	40020400 	.word	0x40020400
 8000e28:	55555556 	.word	0x55555556
 8000e2c:	40020800 	.word	0x40020800
 8000e30:	20000000 	.word	0x20000000
 8000e34:	200000a4 	.word	0x200000a4
 8000e38:	20000004 	.word	0x20000004
 8000e3c:	200000a8 	.word	0x200000a8
 8000e40:	2300      	movs	r3, #0
 8000e42:	b2da      	uxtb	r2, r3
 8000e44:	4b04      	ldr	r3, [pc, #16]	; (8000e58 <main+0x37c>)
 8000e46:	705a      	strb	r2, [r3, #1]

		  UpdateLEDs();
 8000e48:	f7ff fbea 	bl	8000620 <UpdateLEDs>
//	  if (nCurTime2 - LCDLastTimerCount >= 500) //Print every 500 ms
//	  {
//		  LCDLastTimerCount = nCurTime2;
//	  }

	  UpdateLCD();
 8000e4c:	f7ff fcfa 	bl	8000844 <UpdateLCD>


	  HAL_Delay(2);
 8000e50:	2002      	movs	r0, #2
 8000e52:	f000 fcff 	bl	8001854 <HAL_Delay>
	  nCurTime2 = __HAL_TIM_GET_COUNTER(&htim2);
 8000e56:	e6a1      	b.n	8000b9c <main+0xc0>
 8000e58:	200000a8 	.word	0x200000a8

08000e5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b094      	sub	sp, #80	; 0x50
 8000e60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e62:	f107 0320 	add.w	r3, r7, #32
 8000e66:	2230      	movs	r2, #48	; 0x30
 8000e68:	2100      	movs	r1, #0
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f003 fc84 	bl	8004778 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e70:	f107 030c 	add.w	r3, r7, #12
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]
 8000e7e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e80:	2300      	movs	r3, #0
 8000e82:	60bb      	str	r3, [r7, #8]
 8000e84:	4b23      	ldr	r3, [pc, #140]	; (8000f14 <SystemClock_Config+0xb8>)
 8000e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e88:	4a22      	ldr	r2, [pc, #136]	; (8000f14 <SystemClock_Config+0xb8>)
 8000e8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e8e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e90:	4b20      	ldr	r3, [pc, #128]	; (8000f14 <SystemClock_Config+0xb8>)
 8000e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e98:	60bb      	str	r3, [r7, #8]
 8000e9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	607b      	str	r3, [r7, #4]
 8000ea0:	4b1d      	ldr	r3, [pc, #116]	; (8000f18 <SystemClock_Config+0xbc>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ea8:	4a1b      	ldr	r2, [pc, #108]	; (8000f18 <SystemClock_Config+0xbc>)
 8000eaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000eae:	6013      	str	r3, [r2, #0]
 8000eb0:	4b19      	ldr	r3, [pc, #100]	; (8000f18 <SystemClock_Config+0xbc>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000eb8:	607b      	str	r3, [r7, #4]
 8000eba:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ec4:	2310      	movs	r3, #16
 8000ec6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ecc:	f107 0320 	add.w	r3, r7, #32
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f001 fab9 	bl	8002448 <HAL_RCC_OscConfig>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000edc:	f000 fa2e 	bl	800133c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ee0:	230f      	movs	r3, #15
 8000ee2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000eec:	2300      	movs	r3, #0
 8000eee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ef4:	f107 030c 	add.w	r3, r7, #12
 8000ef8:	2100      	movs	r1, #0
 8000efa:	4618      	mov	r0, r3
 8000efc:	f001 fd1c 	bl	8002938 <HAL_RCC_ClockConfig>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000f06:	f000 fa19 	bl	800133c <Error_Handler>
  }
}
 8000f0a:	bf00      	nop
 8000f0c:	3750      	adds	r7, #80	; 0x50
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40023800 	.word	0x40023800
 8000f18:	40007000 	.word	0x40007000

08000f1c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f22:	463b      	mov	r3, r7
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
 8000f2c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f2e:	4b22      	ldr	r3, [pc, #136]	; (8000fb8 <MX_ADC1_Init+0x9c>)
 8000f30:	4a22      	ldr	r2, [pc, #136]	; (8000fbc <MX_ADC1_Init+0xa0>)
 8000f32:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000f34:	4b20      	ldr	r3, [pc, #128]	; (8000fb8 <MX_ADC1_Init+0x9c>)
 8000f36:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000f3a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000f3c:	4b1e      	ldr	r3, [pc, #120]	; (8000fb8 <MX_ADC1_Init+0x9c>)
 8000f3e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000f42:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000f44:	4b1c      	ldr	r3, [pc, #112]	; (8000fb8 <MX_ADC1_Init+0x9c>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f4a:	4b1b      	ldr	r3, [pc, #108]	; (8000fb8 <MX_ADC1_Init+0x9c>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f50:	4b19      	ldr	r3, [pc, #100]	; (8000fb8 <MX_ADC1_Init+0x9c>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f58:	4b17      	ldr	r3, [pc, #92]	; (8000fb8 <MX_ADC1_Init+0x9c>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f5e:	4b16      	ldr	r3, [pc, #88]	; (8000fb8 <MX_ADC1_Init+0x9c>)
 8000f60:	4a17      	ldr	r2, [pc, #92]	; (8000fc0 <MX_ADC1_Init+0xa4>)
 8000f62:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f64:	4b14      	ldr	r3, [pc, #80]	; (8000fb8 <MX_ADC1_Init+0x9c>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f6a:	4b13      	ldr	r3, [pc, #76]	; (8000fb8 <MX_ADC1_Init+0x9c>)
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f70:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <MX_ADC1_Init+0x9c>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f78:	4b0f      	ldr	r3, [pc, #60]	; (8000fb8 <MX_ADC1_Init+0x9c>)
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f7e:	480e      	ldr	r0, [pc, #56]	; (8000fb8 <MX_ADC1_Init+0x9c>)
 8000f80:	f000 fc8c 	bl	800189c <HAL_ADC_Init>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8000f8a:	f000 f9d7 	bl	800133c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000f8e:	2306      	movs	r3, #6
 8000f90:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f92:	2301      	movs	r3, #1
 8000f94:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8000f96:	2302      	movs	r3, #2
 8000f98:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f9a:	463b      	mov	r3, r7
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4806      	ldr	r0, [pc, #24]	; (8000fb8 <MX_ADC1_Init+0x9c>)
 8000fa0:	f000 fcc0 	bl	8001924 <HAL_ADC_ConfigChannel>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000faa:	f000 f9c7 	bl	800133c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fae:	bf00      	nop
 8000fb0:	3710      	adds	r7, #16
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20000164 	.word	0x20000164
 8000fbc:	40012000 	.word	0x40012000
 8000fc0:	0f000001 	.word	0x0f000001

08000fc4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fca:	f107 0308 	add.w	r3, r7, #8
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
 8000fd2:	605a      	str	r2, [r3, #4]
 8000fd4:	609a      	str	r2, [r3, #8]
 8000fd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fd8:	463b      	mov	r3, r7
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fe0:	4b1e      	ldr	r3, [pc, #120]	; (800105c <MX_TIM2_Init+0x98>)
 8000fe2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fe6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15999;
 8000fe8:	4b1c      	ldr	r3, [pc, #112]	; (800105c <MX_TIM2_Init+0x98>)
 8000fea:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8000fee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ff0:	4b1a      	ldr	r3, [pc, #104]	; (800105c <MX_TIM2_Init+0x98>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000ff6:	4b19      	ldr	r3, [pc, #100]	; (800105c <MX_TIM2_Init+0x98>)
 8000ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8000ffc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ffe:	4b17      	ldr	r3, [pc, #92]	; (800105c <MX_TIM2_Init+0x98>)
 8001000:	2200      	movs	r2, #0
 8001002:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001004:	4b15      	ldr	r3, [pc, #84]	; (800105c <MX_TIM2_Init+0x98>)
 8001006:	2200      	movs	r2, #0
 8001008:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800100a:	4814      	ldr	r0, [pc, #80]	; (800105c <MX_TIM2_Init+0x98>)
 800100c:	f001 fe90 	bl	8002d30 <HAL_TIM_Base_Init>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001016:	f000 f991 	bl	800133c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800101a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800101e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001020:	f107 0308 	add.w	r3, r7, #8
 8001024:	4619      	mov	r1, r3
 8001026:	480d      	ldr	r0, [pc, #52]	; (800105c <MX_TIM2_Init+0x98>)
 8001028:	f001 ffd8 	bl	8002fdc <HAL_TIM_ConfigClockSource>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001032:	f000 f983 	bl	800133c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001036:	2300      	movs	r3, #0
 8001038:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800103a:	2300      	movs	r3, #0
 800103c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800103e:	463b      	mov	r3, r7
 8001040:	4619      	mov	r1, r3
 8001042:	4806      	ldr	r0, [pc, #24]	; (800105c <MX_TIM2_Init+0x98>)
 8001044:	f002 fb38 	bl	80036b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800104e:	f000 f975 	bl	800133c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001052:	bf00      	nop
 8001054:	3718      	adds	r7, #24
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	200001f0 	.word	0x200001f0

08001060 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b08a      	sub	sp, #40	; 0x28
 8001064:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001066:	f107 0320 	add.w	r3, r7, #32
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001070:	1d3b      	adds	r3, r7, #4
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	605a      	str	r2, [r3, #4]
 8001078:	609a      	str	r2, [r3, #8]
 800107a:	60da      	str	r2, [r3, #12]
 800107c:	611a      	str	r2, [r3, #16]
 800107e:	615a      	str	r2, [r3, #20]
 8001080:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001082:	4b22      	ldr	r3, [pc, #136]	; (800110c <MX_TIM4_Init+0xac>)
 8001084:	4a22      	ldr	r2, [pc, #136]	; (8001110 <MX_TIM4_Init+0xb0>)
 8001086:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16-1;
 8001088:	4b20      	ldr	r3, [pc, #128]	; (800110c <MX_TIM4_Init+0xac>)
 800108a:	220f      	movs	r2, #15
 800108c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800108e:	4b1f      	ldr	r3, [pc, #124]	; (800110c <MX_TIM4_Init+0xac>)
 8001090:	2200      	movs	r2, #0
 8001092:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8001094:	4b1d      	ldr	r3, [pc, #116]	; (800110c <MX_TIM4_Init+0xac>)
 8001096:	f240 32e7 	movw	r2, #999	; 0x3e7
 800109a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800109c:	4b1b      	ldr	r3, [pc, #108]	; (800110c <MX_TIM4_Init+0xac>)
 800109e:	2200      	movs	r2, #0
 80010a0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010a2:	4b1a      	ldr	r3, [pc, #104]	; (800110c <MX_TIM4_Init+0xac>)
 80010a4:	2280      	movs	r2, #128	; 0x80
 80010a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 80010a8:	4818      	ldr	r0, [pc, #96]	; (800110c <MX_TIM4_Init+0xac>)
 80010aa:	f001 feeb 	bl	8002e84 <HAL_TIM_OC_Init>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80010b4:	f000 f942 	bl	800133c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010b8:	2300      	movs	r3, #0
 80010ba:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010bc:	2300      	movs	r3, #0
 80010be:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80010c0:	f107 0320 	add.w	r3, r7, #32
 80010c4:	4619      	mov	r1, r3
 80010c6:	4811      	ldr	r0, [pc, #68]	; (800110c <MX_TIM4_Init+0xac>)
 80010c8:	f002 faf6 	bl	80036b8 <HAL_TIMEx_MasterConfigSynchronization>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80010d2:	f000 f933 	bl	800133c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80010d6:	2330      	movs	r3, #48	; 0x30
 80010d8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80010da:	2300      	movs	r3, #0
 80010dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010de:	2300      	movs	r3, #0
 80010e0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010e2:	2300      	movs	r3, #0
 80010e4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010e6:	1d3b      	adds	r3, r7, #4
 80010e8:	2204      	movs	r2, #4
 80010ea:	4619      	mov	r1, r3
 80010ec:	4807      	ldr	r0, [pc, #28]	; (800110c <MX_TIM4_Init+0xac>)
 80010ee:	f001 ff19 	bl	8002f24 <HAL_TIM_OC_ConfigChannel>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80010f8:	f000 f920 	bl	800133c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80010fc:	4803      	ldr	r0, [pc, #12]	; (800110c <MX_TIM4_Init+0xac>)
 80010fe:	f000 f9d1 	bl	80014a4 <HAL_TIM_MspPostInit>

}
 8001102:	bf00      	nop
 8001104:	3728      	adds	r7, #40	; 0x28
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	2000011c 	.word	0x2000011c
 8001110:	40000800 	.word	0x40000800

08001114 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001118:	4b11      	ldr	r3, [pc, #68]	; (8001160 <MX_USART2_UART_Init+0x4c>)
 800111a:	4a12      	ldr	r2, [pc, #72]	; (8001164 <MX_USART2_UART_Init+0x50>)
 800111c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800111e:	4b10      	ldr	r3, [pc, #64]	; (8001160 <MX_USART2_UART_Init+0x4c>)
 8001120:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001124:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001126:	4b0e      	ldr	r3, [pc, #56]	; (8001160 <MX_USART2_UART_Init+0x4c>)
 8001128:	2200      	movs	r2, #0
 800112a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800112c:	4b0c      	ldr	r3, [pc, #48]	; (8001160 <MX_USART2_UART_Init+0x4c>)
 800112e:	2200      	movs	r2, #0
 8001130:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001132:	4b0b      	ldr	r3, [pc, #44]	; (8001160 <MX_USART2_UART_Init+0x4c>)
 8001134:	2200      	movs	r2, #0
 8001136:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001138:	4b09      	ldr	r3, [pc, #36]	; (8001160 <MX_USART2_UART_Init+0x4c>)
 800113a:	220c      	movs	r2, #12
 800113c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800113e:	4b08      	ldr	r3, [pc, #32]	; (8001160 <MX_USART2_UART_Init+0x4c>)
 8001140:	2200      	movs	r2, #0
 8001142:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001144:	4b06      	ldr	r3, [pc, #24]	; (8001160 <MX_USART2_UART_Init+0x4c>)
 8001146:	2200      	movs	r2, #0
 8001148:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800114a:	4805      	ldr	r0, [pc, #20]	; (8001160 <MX_USART2_UART_Init+0x4c>)
 800114c:	f002 fb22 	bl	8003794 <HAL_UART_Init>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001156:	f000 f8f1 	bl	800133c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800115a:	bf00      	nop
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	20000238 	.word	0x20000238
 8001164:	40004400 	.word	0x40004400

08001168 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800116c:	4b11      	ldr	r3, [pc, #68]	; (80011b4 <MX_USART6_UART_Init+0x4c>)
 800116e:	4a12      	ldr	r2, [pc, #72]	; (80011b8 <MX_USART6_UART_Init+0x50>)
 8001170:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8001172:	4b10      	ldr	r3, [pc, #64]	; (80011b4 <MX_USART6_UART_Init+0x4c>)
 8001174:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001178:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800117a:	4b0e      	ldr	r3, [pc, #56]	; (80011b4 <MX_USART6_UART_Init+0x4c>)
 800117c:	2200      	movs	r2, #0
 800117e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001180:	4b0c      	ldr	r3, [pc, #48]	; (80011b4 <MX_USART6_UART_Init+0x4c>)
 8001182:	2200      	movs	r2, #0
 8001184:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001186:	4b0b      	ldr	r3, [pc, #44]	; (80011b4 <MX_USART6_UART_Init+0x4c>)
 8001188:	2200      	movs	r2, #0
 800118a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800118c:	4b09      	ldr	r3, [pc, #36]	; (80011b4 <MX_USART6_UART_Init+0x4c>)
 800118e:	220c      	movs	r2, #12
 8001190:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001192:	4b08      	ldr	r3, [pc, #32]	; (80011b4 <MX_USART6_UART_Init+0x4c>)
 8001194:	2200      	movs	r2, #0
 8001196:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001198:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <MX_USART6_UART_Init+0x4c>)
 800119a:	2200      	movs	r2, #0
 800119c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800119e:	4805      	ldr	r0, [pc, #20]	; (80011b4 <MX_USART6_UART_Init+0x4c>)
 80011a0:	f002 faf8 	bl	8003794 <HAL_UART_Init>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80011aa:	f000 f8c7 	bl	800133c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80011ae:	bf00      	nop
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	200001ac 	.word	0x200001ac
 80011b8:	40011400 	.word	0x40011400

080011bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b08a      	sub	sp, #40	; 0x28
 80011c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c2:	f107 0314 	add.w	r3, r7, #20
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	605a      	str	r2, [r3, #4]
 80011cc:	609a      	str	r2, [r3, #8]
 80011ce:	60da      	str	r2, [r3, #12]
 80011d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	613b      	str	r3, [r7, #16]
 80011d6:	4b50      	ldr	r3, [pc, #320]	; (8001318 <MX_GPIO_Init+0x15c>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	4a4f      	ldr	r2, [pc, #316]	; (8001318 <MX_GPIO_Init+0x15c>)
 80011dc:	f043 0304 	orr.w	r3, r3, #4
 80011e0:	6313      	str	r3, [r2, #48]	; 0x30
 80011e2:	4b4d      	ldr	r3, [pc, #308]	; (8001318 <MX_GPIO_Init+0x15c>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	f003 0304 	and.w	r3, r3, #4
 80011ea:	613b      	str	r3, [r7, #16]
 80011ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	60fb      	str	r3, [r7, #12]
 80011f2:	4b49      	ldr	r3, [pc, #292]	; (8001318 <MX_GPIO_Init+0x15c>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	4a48      	ldr	r2, [pc, #288]	; (8001318 <MX_GPIO_Init+0x15c>)
 80011f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011fc:	6313      	str	r3, [r2, #48]	; 0x30
 80011fe:	4b46      	ldr	r3, [pc, #280]	; (8001318 <MX_GPIO_Init+0x15c>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	60bb      	str	r3, [r7, #8]
 800120e:	4b42      	ldr	r3, [pc, #264]	; (8001318 <MX_GPIO_Init+0x15c>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	4a41      	ldr	r2, [pc, #260]	; (8001318 <MX_GPIO_Init+0x15c>)
 8001214:	f043 0301 	orr.w	r3, r3, #1
 8001218:	6313      	str	r3, [r2, #48]	; 0x30
 800121a:	4b3f      	ldr	r3, [pc, #252]	; (8001318 <MX_GPIO_Init+0x15c>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	f003 0301 	and.w	r3, r3, #1
 8001222:	60bb      	str	r3, [r7, #8]
 8001224:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	607b      	str	r3, [r7, #4]
 800122a:	4b3b      	ldr	r3, [pc, #236]	; (8001318 <MX_GPIO_Init+0x15c>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	4a3a      	ldr	r2, [pc, #232]	; (8001318 <MX_GPIO_Init+0x15c>)
 8001230:	f043 0302 	orr.w	r3, r3, #2
 8001234:	6313      	str	r3, [r2, #48]	; 0x30
 8001236:	4b38      	ldr	r3, [pc, #224]	; (8001318 <MX_GPIO_Init+0x15c>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	f003 0302 	and.w	r3, r3, #2
 800123e:	607b      	str	r3, [r7, #4]
 8001240:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Keypad_Input___Column_1_Pin|Door_2_Status_LED_Pin|Door_2_Status_LEDA10_Pin
 8001242:	2200      	movs	r2, #0
 8001244:	f44f 51f9 	mov.w	r1, #7968	; 0x1f20
 8001248:	4834      	ldr	r0, [pc, #208]	; (800131c <MX_GPIO_Init+0x160>)
 800124a:	f001 f8c9 	bl	80023e0 <HAL_GPIO_WritePin>
                          |Door_1_Status_LED_Pin|Door_1_Status_LEDA12_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Window_2_Status_LED_Pin|Window_2_Status_LEDC5_Pin|Keypad_Input___Column_2_Pin|Window_1_Status_LED_Pin
 800124e:	2200      	movs	r2, #0
 8001250:	f641 6130 	movw	r1, #7728	; 0x1e30
 8001254:	4832      	ldr	r0, [pc, #200]	; (8001320 <MX_GPIO_Init+0x164>)
 8001256:	f001 f8c3 	bl	80023e0 <HAL_GPIO_WritePin>
                          |Window_1_Status_LEDC11_Pin|SystemAlarm_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Window_3_Status_LED_Pin|Window_3_Status_LEDB1_Pin|Window_4_Status_LED_Pin|Window_4_Status_LEDB10_Pin
 800125a:	2200      	movs	r2, #0
 800125c:	f240 4177 	movw	r1, #1143	; 0x477
 8001260:	4830      	ldr	r0, [pc, #192]	; (8001324 <MX_GPIO_Init+0x168>)
 8001262:	f001 f8bd 	bl	80023e0 <HAL_GPIO_WritePin>
                          |Lighting_Relay_2_Pin|Lighting_Relay_1_Pin|Alarm_Relay_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001266:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800126a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800126c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001270:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001272:	2300      	movs	r3, #0
 8001274:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001276:	f107 0314 	add.w	r3, r7, #20
 800127a:	4619      	mov	r1, r3
 800127c:	4828      	ldr	r0, [pc, #160]	; (8001320 <MX_GPIO_Init+0x164>)
 800127e:	f000 ff13 	bl	80020a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Window_Switch_1_Pin Window_Switch_2_Pin Window_Switch_3_Pin Window_Switch_4_Pin */
  GPIO_InitStruct.Pin = Window_Switch_1_Pin|Window_Switch_2_Pin|Window_Switch_3_Pin|Window_Switch_4_Pin;
 8001282:	230f      	movs	r3, #15
 8001284:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001286:	2300      	movs	r3, #0
 8001288:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	2300      	movs	r3, #0
 800128c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800128e:	f107 0314 	add.w	r3, r7, #20
 8001292:	4619      	mov	r1, r3
 8001294:	4822      	ldr	r0, [pc, #136]	; (8001320 <MX_GPIO_Init+0x164>)
 8001296:	f000 ff07 	bl	80020a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Keypad_Input___Column_1_Pin Door_2_Status_LED_Pin Door_2_Status_LEDA10_Pin
                           Door_1_Status_LED_Pin Door_1_Status_LEDA12_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Keypad_Input___Column_1_Pin|Door_2_Status_LED_Pin|Door_2_Status_LEDA10_Pin
 800129a:	f44f 53f9 	mov.w	r3, #7968	; 0x1f20
 800129e:	617b      	str	r3, [r7, #20]
                          |Door_1_Status_LED_Pin|Door_1_Status_LEDA12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a0:	2301      	movs	r3, #1
 80012a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a4:	2300      	movs	r3, #0
 80012a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a8:	2300      	movs	r3, #0
 80012aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ac:	f107 0314 	add.w	r3, r7, #20
 80012b0:	4619      	mov	r1, r3
 80012b2:	481a      	ldr	r0, [pc, #104]	; (800131c <MX_GPIO_Init+0x160>)
 80012b4:	f000 fef8 	bl	80020a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Window_2_Status_LED_Pin Window_2_Status_LEDC5_Pin Keypad_Input___Column_2_Pin Window_1_Status_LED_Pin
                           Window_1_Status_LEDC11_Pin SystemAlarm_Pin */
  GPIO_InitStruct.Pin = Window_2_Status_LED_Pin|Window_2_Status_LEDC5_Pin|Keypad_Input___Column_2_Pin|Window_1_Status_LED_Pin
 80012b8:	f641 6330 	movw	r3, #7728	; 0x1e30
 80012bc:	617b      	str	r3, [r7, #20]
                          |Window_1_Status_LEDC11_Pin|SystemAlarm_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012be:	2301      	movs	r3, #1
 80012c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c2:	2300      	movs	r3, #0
 80012c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c6:	2300      	movs	r3, #0
 80012c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012ca:	f107 0314 	add.w	r3, r7, #20
 80012ce:	4619      	mov	r1, r3
 80012d0:	4813      	ldr	r0, [pc, #76]	; (8001320 <MX_GPIO_Init+0x164>)
 80012d2:	f000 fee9 	bl	80020a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Window_3_Status_LED_Pin Window_3_Status_LEDB1_Pin Window_4_Status_LED_Pin Window_4_Status_LEDB10_Pin
                           Lighting_Relay_2_Pin Lighting_Relay_1_Pin Alarm_Relay_Pin */
  GPIO_InitStruct.Pin = Window_3_Status_LED_Pin|Window_3_Status_LEDB1_Pin|Window_4_Status_LED_Pin|Window_4_Status_LEDB10_Pin
 80012d6:	f240 4377 	movw	r3, #1143	; 0x477
 80012da:	617b      	str	r3, [r7, #20]
                          |Lighting_Relay_2_Pin|Lighting_Relay_1_Pin|Alarm_Relay_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012dc:	2301      	movs	r3, #1
 80012de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e4:	2300      	movs	r3, #0
 80012e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e8:	f107 0314 	add.w	r3, r7, #20
 80012ec:	4619      	mov	r1, r3
 80012ee:	480d      	ldr	r0, [pc, #52]	; (8001324 <MX_GPIO_Init+0x168>)
 80012f0:	f000 feda 	bl	80020a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Keypad_Output___Row_D_Pin Keypad_Output___Row_C_Pin Keypad_Output___Row_B_Pin Keypad_Output___Row_A_Pin
                           Door_Switch_2_Pin Door_Switch_1_Pin */
  GPIO_InitStruct.Pin = Keypad_Output___Row_D_Pin|Keypad_Output___Row_C_Pin|Keypad_Output___Row_B_Pin|Keypad_Output___Row_A_Pin
 80012f4:	f44f 4373 	mov.w	r3, #62208	; 0xf300
 80012f8:	617b      	str	r3, [r7, #20]
                          |Door_Switch_2_Pin|Door_Switch_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012fa:	2300      	movs	r3, #0
 80012fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fe:	2300      	movs	r3, #0
 8001300:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001302:	f107 0314 	add.w	r3, r7, #20
 8001306:	4619      	mov	r1, r3
 8001308:	4806      	ldr	r0, [pc, #24]	; (8001324 <MX_GPIO_Init+0x168>)
 800130a:	f000 fecd 	bl	80020a8 <HAL_GPIO_Init>

}
 800130e:	bf00      	nop
 8001310:	3728      	adds	r7, #40	; 0x28
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40023800 	.word	0x40023800
 800131c:	40020000 	.word	0x40020000
 8001320:	40020800 	.word	0x40020800
 8001324:	40020400 	.word	0x40020400

08001328 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

/* This callback is called by the HAL_UART_IRQHandler when the given number of bytes are received */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
//    HAL_UART_Transmit(&huart6, &g_uartRcvByte, 1, 100);

    /* Receive one byte in interrupt mode */
//    HAL_UART_Receive_IT(&huart6, &g_uartRcvByte, 1);
  }
}
 8001330:	bf00      	nop
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001340:	b672      	cpsid	i
}
 8001342:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001344:	e7fe      	b.n	8001344 <Error_Handler+0x8>
	...

08001348 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	607b      	str	r3, [r7, #4]
 8001352:	4b10      	ldr	r3, [pc, #64]	; (8001394 <HAL_MspInit+0x4c>)
 8001354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001356:	4a0f      	ldr	r2, [pc, #60]	; (8001394 <HAL_MspInit+0x4c>)
 8001358:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800135c:	6453      	str	r3, [r2, #68]	; 0x44
 800135e:	4b0d      	ldr	r3, [pc, #52]	; (8001394 <HAL_MspInit+0x4c>)
 8001360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001362:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001366:	607b      	str	r3, [r7, #4]
 8001368:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	603b      	str	r3, [r7, #0]
 800136e:	4b09      	ldr	r3, [pc, #36]	; (8001394 <HAL_MspInit+0x4c>)
 8001370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001372:	4a08      	ldr	r2, [pc, #32]	; (8001394 <HAL_MspInit+0x4c>)
 8001374:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001378:	6413      	str	r3, [r2, #64]	; 0x40
 800137a:	4b06      	ldr	r3, [pc, #24]	; (8001394 <HAL_MspInit+0x4c>)
 800137c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001382:	603b      	str	r3, [r7, #0]
 8001384:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001386:	2007      	movs	r0, #7
 8001388:	f000 fdba 	bl	8001f00 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800138c:	bf00      	nop
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40023800 	.word	0x40023800

08001398 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b08a      	sub	sp, #40	; 0x28
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a0:	f107 0314 	add.w	r3, r7, #20
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	605a      	str	r2, [r3, #4]
 80013aa:	609a      	str	r2, [r3, #8]
 80013ac:	60da      	str	r2, [r3, #12]
 80013ae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a17      	ldr	r2, [pc, #92]	; (8001414 <HAL_ADC_MspInit+0x7c>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d127      	bne.n	800140a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	613b      	str	r3, [r7, #16]
 80013be:	4b16      	ldr	r3, [pc, #88]	; (8001418 <HAL_ADC_MspInit+0x80>)
 80013c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c2:	4a15      	ldr	r2, [pc, #84]	; (8001418 <HAL_ADC_MspInit+0x80>)
 80013c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013c8:	6453      	str	r3, [r2, #68]	; 0x44
 80013ca:	4b13      	ldr	r3, [pc, #76]	; (8001418 <HAL_ADC_MspInit+0x80>)
 80013cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013d2:	613b      	str	r3, [r7, #16]
 80013d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	60fb      	str	r3, [r7, #12]
 80013da:	4b0f      	ldr	r3, [pc, #60]	; (8001418 <HAL_ADC_MspInit+0x80>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	4a0e      	ldr	r2, [pc, #56]	; (8001418 <HAL_ADC_MspInit+0x80>)
 80013e0:	f043 0301 	orr.w	r3, r3, #1
 80013e4:	6313      	str	r3, [r2, #48]	; 0x30
 80013e6:	4b0c      	ldr	r3, [pc, #48]	; (8001418 <HAL_ADC_MspInit+0x80>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	f003 0301 	and.w	r3, r3, #1
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = Distance_Sensor_1_Pin|Distance_sensor_2_Pin;
 80013f2:	23c0      	movs	r3, #192	; 0xc0
 80013f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013f6:	2303      	movs	r3, #3
 80013f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fa:	2300      	movs	r3, #0
 80013fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013fe:	f107 0314 	add.w	r3, r7, #20
 8001402:	4619      	mov	r1, r3
 8001404:	4805      	ldr	r0, [pc, #20]	; (800141c <HAL_ADC_MspInit+0x84>)
 8001406:	f000 fe4f 	bl	80020a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800140a:	bf00      	nop
 800140c:	3728      	adds	r7, #40	; 0x28
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40012000 	.word	0x40012000
 8001418:	40023800 	.word	0x40023800
 800141c:	40020000 	.word	0x40020000

08001420 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001420:	b480      	push	{r7}
 8001422:	b085      	sub	sp, #20
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001430:	d10d      	bne.n	800144e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	60fb      	str	r3, [r7, #12]
 8001436:	4b09      	ldr	r3, [pc, #36]	; (800145c <HAL_TIM_Base_MspInit+0x3c>)
 8001438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143a:	4a08      	ldr	r2, [pc, #32]	; (800145c <HAL_TIM_Base_MspInit+0x3c>)
 800143c:	f043 0301 	orr.w	r3, r3, #1
 8001440:	6413      	str	r3, [r2, #64]	; 0x40
 8001442:	4b06      	ldr	r3, [pc, #24]	; (800145c <HAL_TIM_Base_MspInit+0x3c>)
 8001444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800144e:	bf00      	nop
 8001450:	3714      	adds	r7, #20
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	40023800 	.word	0x40023800

08001460 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8001460:	b480      	push	{r7}
 8001462:	b085      	sub	sp, #20
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM4)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a0b      	ldr	r2, [pc, #44]	; (800149c <HAL_TIM_OC_MspInit+0x3c>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d10d      	bne.n	800148e <HAL_TIM_OC_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	60fb      	str	r3, [r7, #12]
 8001476:	4b0a      	ldr	r3, [pc, #40]	; (80014a0 <HAL_TIM_OC_MspInit+0x40>)
 8001478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147a:	4a09      	ldr	r2, [pc, #36]	; (80014a0 <HAL_TIM_OC_MspInit+0x40>)
 800147c:	f043 0304 	orr.w	r3, r3, #4
 8001480:	6413      	str	r3, [r2, #64]	; 0x40
 8001482:	4b07      	ldr	r3, [pc, #28]	; (80014a0 <HAL_TIM_OC_MspInit+0x40>)
 8001484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001486:	f003 0304 	and.w	r3, r3, #4
 800148a:	60fb      	str	r3, [r7, #12]
 800148c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800148e:	bf00      	nop
 8001490:	3714      	adds	r7, #20
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	40000800 	.word	0x40000800
 80014a0:	40023800 	.word	0x40023800

080014a4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b088      	sub	sp, #32
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ac:	f107 030c 	add.w	r3, r7, #12
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	605a      	str	r2, [r3, #4]
 80014b6:	609a      	str	r2, [r3, #8]
 80014b8:	60da      	str	r2, [r3, #12]
 80014ba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a12      	ldr	r2, [pc, #72]	; (800150c <HAL_TIM_MspPostInit+0x68>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d11d      	bne.n	8001502 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	60bb      	str	r3, [r7, #8]
 80014ca:	4b11      	ldr	r3, [pc, #68]	; (8001510 <HAL_TIM_MspPostInit+0x6c>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	4a10      	ldr	r2, [pc, #64]	; (8001510 <HAL_TIM_MspPostInit+0x6c>)
 80014d0:	f043 0302 	orr.w	r3, r3, #2
 80014d4:	6313      	str	r3, [r2, #48]	; 0x30
 80014d6:	4b0e      	ldr	r3, [pc, #56]	; (8001510 <HAL_TIM_MspPostInit+0x6c>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	60bb      	str	r3, [r7, #8]
 80014e0:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80014e2:	2380      	movs	r3, #128	; 0x80
 80014e4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e6:	2302      	movs	r3, #2
 80014e8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ea:	2300      	movs	r3, #0
 80014ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ee:	2300      	movs	r3, #0
 80014f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80014f2:	2302      	movs	r3, #2
 80014f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f6:	f107 030c 	add.w	r3, r7, #12
 80014fa:	4619      	mov	r1, r3
 80014fc:	4805      	ldr	r0, [pc, #20]	; (8001514 <HAL_TIM_MspPostInit+0x70>)
 80014fe:	f000 fdd3 	bl	80020a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001502:	bf00      	nop
 8001504:	3720      	adds	r7, #32
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	40000800 	.word	0x40000800
 8001510:	40023800 	.word	0x40023800
 8001514:	40020400 	.word	0x40020400

08001518 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b08c      	sub	sp, #48	; 0x30
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001520:	f107 031c 	add.w	r3, r7, #28
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	605a      	str	r2, [r3, #4]
 800152a:	609a      	str	r2, [r3, #8]
 800152c:	60da      	str	r2, [r3, #12]
 800152e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a36      	ldr	r2, [pc, #216]	; (8001610 <HAL_UART_MspInit+0xf8>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d12c      	bne.n	8001594 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	61bb      	str	r3, [r7, #24]
 800153e:	4b35      	ldr	r3, [pc, #212]	; (8001614 <HAL_UART_MspInit+0xfc>)
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	4a34      	ldr	r2, [pc, #208]	; (8001614 <HAL_UART_MspInit+0xfc>)
 8001544:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001548:	6413      	str	r3, [r2, #64]	; 0x40
 800154a:	4b32      	ldr	r3, [pc, #200]	; (8001614 <HAL_UART_MspInit+0xfc>)
 800154c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001552:	61bb      	str	r3, [r7, #24]
 8001554:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	617b      	str	r3, [r7, #20]
 800155a:	4b2e      	ldr	r3, [pc, #184]	; (8001614 <HAL_UART_MspInit+0xfc>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	4a2d      	ldr	r2, [pc, #180]	; (8001614 <HAL_UART_MspInit+0xfc>)
 8001560:	f043 0301 	orr.w	r3, r3, #1
 8001564:	6313      	str	r3, [r2, #48]	; 0x30
 8001566:	4b2b      	ldr	r3, [pc, #172]	; (8001614 <HAL_UART_MspInit+0xfc>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	617b      	str	r3, [r7, #20]
 8001570:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001572:	230c      	movs	r3, #12
 8001574:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001576:	2302      	movs	r3, #2
 8001578:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157a:	2300      	movs	r3, #0
 800157c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157e:	2300      	movs	r3, #0
 8001580:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001582:	2307      	movs	r3, #7
 8001584:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001586:	f107 031c 	add.w	r3, r7, #28
 800158a:	4619      	mov	r1, r3
 800158c:	4822      	ldr	r0, [pc, #136]	; (8001618 <HAL_UART_MspInit+0x100>)
 800158e:	f000 fd8b 	bl	80020a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001592:	e038      	b.n	8001606 <HAL_UART_MspInit+0xee>
  else if(huart->Instance==USART6)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a20      	ldr	r2, [pc, #128]	; (800161c <HAL_UART_MspInit+0x104>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d133      	bne.n	8001606 <HAL_UART_MspInit+0xee>
    __HAL_RCC_USART6_CLK_ENABLE();
 800159e:	2300      	movs	r3, #0
 80015a0:	613b      	str	r3, [r7, #16]
 80015a2:	4b1c      	ldr	r3, [pc, #112]	; (8001614 <HAL_UART_MspInit+0xfc>)
 80015a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a6:	4a1b      	ldr	r2, [pc, #108]	; (8001614 <HAL_UART_MspInit+0xfc>)
 80015a8:	f043 0320 	orr.w	r3, r3, #32
 80015ac:	6453      	str	r3, [r2, #68]	; 0x44
 80015ae:	4b19      	ldr	r3, [pc, #100]	; (8001614 <HAL_UART_MspInit+0xfc>)
 80015b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b2:	f003 0320 	and.w	r3, r3, #32
 80015b6:	613b      	str	r3, [r7, #16]
 80015b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ba:	2300      	movs	r3, #0
 80015bc:	60fb      	str	r3, [r7, #12]
 80015be:	4b15      	ldr	r3, [pc, #84]	; (8001614 <HAL_UART_MspInit+0xfc>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c2:	4a14      	ldr	r2, [pc, #80]	; (8001614 <HAL_UART_MspInit+0xfc>)
 80015c4:	f043 0304 	orr.w	r3, r3, #4
 80015c8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ca:	4b12      	ldr	r3, [pc, #72]	; (8001614 <HAL_UART_MspInit+0xfc>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ce:	f003 0304 	and.w	r3, r3, #4
 80015d2:	60fb      	str	r3, [r7, #12]
 80015d4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015d6:	23c0      	movs	r3, #192	; 0xc0
 80015d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015da:	2302      	movs	r3, #2
 80015dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015de:	2300      	movs	r3, #0
 80015e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e2:	2303      	movs	r3, #3
 80015e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80015e6:	2308      	movs	r3, #8
 80015e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015ea:	f107 031c 	add.w	r3, r7, #28
 80015ee:	4619      	mov	r1, r3
 80015f0:	480b      	ldr	r0, [pc, #44]	; (8001620 <HAL_UART_MspInit+0x108>)
 80015f2:	f000 fd59 	bl	80020a8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80015f6:	2200      	movs	r2, #0
 80015f8:	2100      	movs	r1, #0
 80015fa:	2047      	movs	r0, #71	; 0x47
 80015fc:	f000 fc8b 	bl	8001f16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001600:	2047      	movs	r0, #71	; 0x47
 8001602:	f000 fca4 	bl	8001f4e <HAL_NVIC_EnableIRQ>
}
 8001606:	bf00      	nop
 8001608:	3730      	adds	r7, #48	; 0x30
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	40004400 	.word	0x40004400
 8001614:	40023800 	.word	0x40023800
 8001618:	40020000 	.word	0x40020000
 800161c:	40011400 	.word	0x40011400
 8001620:	40020800 	.word	0x40020800

08001624 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001628:	e7fe      	b.n	8001628 <NMI_Handler+0x4>

0800162a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800162a:	b480      	push	{r7}
 800162c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800162e:	e7fe      	b.n	800162e <HardFault_Handler+0x4>

08001630 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001634:	e7fe      	b.n	8001634 <MemManage_Handler+0x4>

08001636 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001636:	b480      	push	{r7}
 8001638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800163a:	e7fe      	b.n	800163a <BusFault_Handler+0x4>

0800163c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001640:	e7fe      	b.n	8001640 <UsageFault_Handler+0x4>

08001642 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001642:	b480      	push	{r7}
 8001644:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001646:	bf00      	nop
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001654:	bf00      	nop
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr

0800165e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800165e:	b480      	push	{r7}
 8001660:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001662:	bf00      	nop
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001670:	f000 f8d0 	bl	8001814 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001674:	bf00      	nop
 8001676:	bd80      	pop	{r7, pc}

08001678 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800167c:	4802      	ldr	r0, [pc, #8]	; (8001688 <USART6_IRQHandler+0x10>)
 800167e:	f002 f999 	bl	80039b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001682:	bf00      	nop
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	200001ac 	.word	0x200001ac

0800168c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b086      	sub	sp, #24
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001694:	4a14      	ldr	r2, [pc, #80]	; (80016e8 <_sbrk+0x5c>)
 8001696:	4b15      	ldr	r3, [pc, #84]	; (80016ec <_sbrk+0x60>)
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016a0:	4b13      	ldr	r3, [pc, #76]	; (80016f0 <_sbrk+0x64>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d102      	bne.n	80016ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016a8:	4b11      	ldr	r3, [pc, #68]	; (80016f0 <_sbrk+0x64>)
 80016aa:	4a12      	ldr	r2, [pc, #72]	; (80016f4 <_sbrk+0x68>)
 80016ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016ae:	4b10      	ldr	r3, [pc, #64]	; (80016f0 <_sbrk+0x64>)
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4413      	add	r3, r2
 80016b6:	693a      	ldr	r2, [r7, #16]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d207      	bcs.n	80016cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016bc:	f003 f832 	bl	8004724 <__errno>
 80016c0:	4603      	mov	r3, r0
 80016c2:	220c      	movs	r2, #12
 80016c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016c6:	f04f 33ff 	mov.w	r3, #4294967295
 80016ca:	e009      	b.n	80016e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016cc:	4b08      	ldr	r3, [pc, #32]	; (80016f0 <_sbrk+0x64>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016d2:	4b07      	ldr	r3, [pc, #28]	; (80016f0 <_sbrk+0x64>)
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4413      	add	r3, r2
 80016da:	4a05      	ldr	r2, [pc, #20]	; (80016f0 <_sbrk+0x64>)
 80016dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016de:	68fb      	ldr	r3, [r7, #12]
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3718      	adds	r7, #24
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	20018000 	.word	0x20018000
 80016ec:	00000400 	.word	0x00000400
 80016f0:	2000010c 	.word	0x2000010c
 80016f4:	20000290 	.word	0x20000290

080016f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016fc:	4b06      	ldr	r3, [pc, #24]	; (8001718 <SystemInit+0x20>)
 80016fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001702:	4a05      	ldr	r2, [pc, #20]	; (8001718 <SystemInit+0x20>)
 8001704:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001708:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800170c:	bf00      	nop
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	e000ed00 	.word	0xe000ed00

0800171c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800171c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001754 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001720:	480d      	ldr	r0, [pc, #52]	; (8001758 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001722:	490e      	ldr	r1, [pc, #56]	; (800175c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001724:	4a0e      	ldr	r2, [pc, #56]	; (8001760 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001726:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001728:	e002      	b.n	8001730 <LoopCopyDataInit>

0800172a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800172a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800172c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800172e:	3304      	adds	r3, #4

08001730 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001730:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001732:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001734:	d3f9      	bcc.n	800172a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001736:	4a0b      	ldr	r2, [pc, #44]	; (8001764 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001738:	4c0b      	ldr	r4, [pc, #44]	; (8001768 <LoopFillZerobss+0x26>)
  movs r3, #0
 800173a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800173c:	e001      	b.n	8001742 <LoopFillZerobss>

0800173e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800173e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001740:	3204      	adds	r2, #4

08001742 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001742:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001744:	d3fb      	bcc.n	800173e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001746:	f7ff ffd7 	bl	80016f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800174a:	f002 fff1 	bl	8004730 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800174e:	f7ff f9c5 	bl	8000adc <main>
  bx  lr    
 8001752:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001754:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001758:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800175c:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001760:	08005114 	.word	0x08005114
  ldr r2, =_sbss
 8001764:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001768:	20000290 	.word	0x20000290

0800176c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800176c:	e7fe      	b.n	800176c <ADC_IRQHandler>
	...

08001770 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001774:	4b0e      	ldr	r3, [pc, #56]	; (80017b0 <HAL_Init+0x40>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a0d      	ldr	r2, [pc, #52]	; (80017b0 <HAL_Init+0x40>)
 800177a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800177e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001780:	4b0b      	ldr	r3, [pc, #44]	; (80017b0 <HAL_Init+0x40>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a0a      	ldr	r2, [pc, #40]	; (80017b0 <HAL_Init+0x40>)
 8001786:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800178a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800178c:	4b08      	ldr	r3, [pc, #32]	; (80017b0 <HAL_Init+0x40>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a07      	ldr	r2, [pc, #28]	; (80017b0 <HAL_Init+0x40>)
 8001792:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001796:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001798:	2003      	movs	r0, #3
 800179a:	f000 fbb1 	bl	8001f00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800179e:	2000      	movs	r0, #0
 80017a0:	f000 f808 	bl	80017b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017a4:	f7ff fdd0 	bl	8001348 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017a8:	2300      	movs	r3, #0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	40023c00 	.word	0x40023c00

080017b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017bc:	4b12      	ldr	r3, [pc, #72]	; (8001808 <HAL_InitTick+0x54>)
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	4b12      	ldr	r3, [pc, #72]	; (800180c <HAL_InitTick+0x58>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	4619      	mov	r1, r3
 80017c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80017ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80017d2:	4618      	mov	r0, r3
 80017d4:	f000 fbc9 	bl	8001f6a <HAL_SYSTICK_Config>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e00e      	b.n	8001800 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2b0f      	cmp	r3, #15
 80017e6:	d80a      	bhi.n	80017fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017e8:	2200      	movs	r2, #0
 80017ea:	6879      	ldr	r1, [r7, #4]
 80017ec:	f04f 30ff 	mov.w	r0, #4294967295
 80017f0:	f000 fb91 	bl	8001f16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017f4:	4a06      	ldr	r2, [pc, #24]	; (8001810 <HAL_InitTick+0x5c>)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017fa:	2300      	movs	r3, #0
 80017fc:	e000      	b.n	8001800 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
}
 8001800:	4618      	mov	r0, r3
 8001802:	3708      	adds	r7, #8
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	20000018 	.word	0x20000018
 800180c:	20000020 	.word	0x20000020
 8001810:	2000001c 	.word	0x2000001c

08001814 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001818:	4b06      	ldr	r3, [pc, #24]	; (8001834 <HAL_IncTick+0x20>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	461a      	mov	r2, r3
 800181e:	4b06      	ldr	r3, [pc, #24]	; (8001838 <HAL_IncTick+0x24>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4413      	add	r3, r2
 8001824:	4a04      	ldr	r2, [pc, #16]	; (8001838 <HAL_IncTick+0x24>)
 8001826:	6013      	str	r3, [r2, #0]
}
 8001828:	bf00      	nop
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	20000020 	.word	0x20000020
 8001838:	2000027c 	.word	0x2000027c

0800183c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  return uwTick;
 8001840:	4b03      	ldr	r3, [pc, #12]	; (8001850 <HAL_GetTick+0x14>)
 8001842:	681b      	ldr	r3, [r3, #0]
}
 8001844:	4618      	mov	r0, r3
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	2000027c 	.word	0x2000027c

08001854 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800185c:	f7ff ffee 	bl	800183c <HAL_GetTick>
 8001860:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800186c:	d005      	beq.n	800187a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800186e:	4b0a      	ldr	r3, [pc, #40]	; (8001898 <HAL_Delay+0x44>)
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	461a      	mov	r2, r3
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	4413      	add	r3, r2
 8001878:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800187a:	bf00      	nop
 800187c:	f7ff ffde 	bl	800183c <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	68fa      	ldr	r2, [r7, #12]
 8001888:	429a      	cmp	r2, r3
 800188a:	d8f7      	bhi.n	800187c <HAL_Delay+0x28>
  {
  }
}
 800188c:	bf00      	nop
 800188e:	bf00      	nop
 8001890:	3710      	adds	r7, #16
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	20000020 	.word	0x20000020

0800189c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018a4:	2300      	movs	r3, #0
 80018a6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d101      	bne.n	80018b2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e033      	b.n	800191a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d109      	bne.n	80018ce <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f7ff fd6c 	bl	8001398 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2200      	movs	r2, #0
 80018c4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d2:	f003 0310 	and.w	r3, r3, #16
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d118      	bne.n	800190c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018de:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80018e2:	f023 0302 	bic.w	r3, r3, #2
 80018e6:	f043 0202 	orr.w	r2, r3, #2
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f000 f93a 	bl	8001b68 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2200      	movs	r2, #0
 80018f8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fe:	f023 0303 	bic.w	r3, r3, #3
 8001902:	f043 0201 	orr.w	r2, r3, #1
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	641a      	str	r2, [r3, #64]	; 0x40
 800190a:	e001      	b.n	8001910 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2200      	movs	r2, #0
 8001914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001918:	7bfb      	ldrb	r3, [r7, #15]
}
 800191a:	4618      	mov	r0, r3
 800191c:	3710      	adds	r7, #16
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
	...

08001924 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001924:	b480      	push	{r7}
 8001926:	b085      	sub	sp, #20
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800192e:	2300      	movs	r3, #0
 8001930:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001938:	2b01      	cmp	r3, #1
 800193a:	d101      	bne.n	8001940 <HAL_ADC_ConfigChannel+0x1c>
 800193c:	2302      	movs	r3, #2
 800193e:	e105      	b.n	8001b4c <HAL_ADC_ConfigChannel+0x228>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2201      	movs	r2, #1
 8001944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2b09      	cmp	r3, #9
 800194e:	d925      	bls.n	800199c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	68d9      	ldr	r1, [r3, #12]
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	b29b      	uxth	r3, r3
 800195c:	461a      	mov	r2, r3
 800195e:	4613      	mov	r3, r2
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	4413      	add	r3, r2
 8001964:	3b1e      	subs	r3, #30
 8001966:	2207      	movs	r2, #7
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	43da      	mvns	r2, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	400a      	ands	r2, r1
 8001974:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	68d9      	ldr	r1, [r3, #12]
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	689a      	ldr	r2, [r3, #8]
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	b29b      	uxth	r3, r3
 8001986:	4618      	mov	r0, r3
 8001988:	4603      	mov	r3, r0
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	4403      	add	r3, r0
 800198e:	3b1e      	subs	r3, #30
 8001990:	409a      	lsls	r2, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	430a      	orrs	r2, r1
 8001998:	60da      	str	r2, [r3, #12]
 800199a:	e022      	b.n	80019e2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	6919      	ldr	r1, [r3, #16]
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	b29b      	uxth	r3, r3
 80019a8:	461a      	mov	r2, r3
 80019aa:	4613      	mov	r3, r2
 80019ac:	005b      	lsls	r3, r3, #1
 80019ae:	4413      	add	r3, r2
 80019b0:	2207      	movs	r2, #7
 80019b2:	fa02 f303 	lsl.w	r3, r2, r3
 80019b6:	43da      	mvns	r2, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	400a      	ands	r2, r1
 80019be:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	6919      	ldr	r1, [r3, #16]
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	689a      	ldr	r2, [r3, #8]
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	b29b      	uxth	r3, r3
 80019d0:	4618      	mov	r0, r3
 80019d2:	4603      	mov	r3, r0
 80019d4:	005b      	lsls	r3, r3, #1
 80019d6:	4403      	add	r3, r0
 80019d8:	409a      	lsls	r2, r3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	430a      	orrs	r2, r1
 80019e0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	2b06      	cmp	r3, #6
 80019e8:	d824      	bhi.n	8001a34 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685a      	ldr	r2, [r3, #4]
 80019f4:	4613      	mov	r3, r2
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	4413      	add	r3, r2
 80019fa:	3b05      	subs	r3, #5
 80019fc:	221f      	movs	r2, #31
 80019fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001a02:	43da      	mvns	r2, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	400a      	ands	r2, r1
 8001a0a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	b29b      	uxth	r3, r3
 8001a18:	4618      	mov	r0, r3
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	685a      	ldr	r2, [r3, #4]
 8001a1e:	4613      	mov	r3, r2
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	4413      	add	r3, r2
 8001a24:	3b05      	subs	r3, #5
 8001a26:	fa00 f203 	lsl.w	r2, r0, r3
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	430a      	orrs	r2, r1
 8001a30:	635a      	str	r2, [r3, #52]	; 0x34
 8001a32:	e04c      	b.n	8001ace <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	2b0c      	cmp	r3, #12
 8001a3a:	d824      	bhi.n	8001a86 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	685a      	ldr	r2, [r3, #4]
 8001a46:	4613      	mov	r3, r2
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	4413      	add	r3, r2
 8001a4c:	3b23      	subs	r3, #35	; 0x23
 8001a4e:	221f      	movs	r2, #31
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	43da      	mvns	r2, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	400a      	ands	r2, r1
 8001a5c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685a      	ldr	r2, [r3, #4]
 8001a70:	4613      	mov	r3, r2
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	4413      	add	r3, r2
 8001a76:	3b23      	subs	r3, #35	; 0x23
 8001a78:	fa00 f203 	lsl.w	r2, r0, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	430a      	orrs	r2, r1
 8001a82:	631a      	str	r2, [r3, #48]	; 0x30
 8001a84:	e023      	b.n	8001ace <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685a      	ldr	r2, [r3, #4]
 8001a90:	4613      	mov	r3, r2
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	4413      	add	r3, r2
 8001a96:	3b41      	subs	r3, #65	; 0x41
 8001a98:	221f      	movs	r2, #31
 8001a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9e:	43da      	mvns	r2, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	400a      	ands	r2, r1
 8001aa6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685a      	ldr	r2, [r3, #4]
 8001aba:	4613      	mov	r3, r2
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	4413      	add	r3, r2
 8001ac0:	3b41      	subs	r3, #65	; 0x41
 8001ac2:	fa00 f203 	lsl.w	r2, r0, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	430a      	orrs	r2, r1
 8001acc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ace:	4b22      	ldr	r3, [pc, #136]	; (8001b58 <HAL_ADC_ConfigChannel+0x234>)
 8001ad0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a21      	ldr	r2, [pc, #132]	; (8001b5c <HAL_ADC_ConfigChannel+0x238>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d109      	bne.n	8001af0 <HAL_ADC_ConfigChannel+0x1cc>
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2b12      	cmp	r3, #18
 8001ae2:	d105      	bne.n	8001af0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a19      	ldr	r2, [pc, #100]	; (8001b5c <HAL_ADC_ConfigChannel+0x238>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d123      	bne.n	8001b42 <HAL_ADC_ConfigChannel+0x21e>
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	2b10      	cmp	r3, #16
 8001b00:	d003      	beq.n	8001b0a <HAL_ADC_ConfigChannel+0x1e6>
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	2b11      	cmp	r3, #17
 8001b08:	d11b      	bne.n	8001b42 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	2b10      	cmp	r3, #16
 8001b1c:	d111      	bne.n	8001b42 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001b1e:	4b10      	ldr	r3, [pc, #64]	; (8001b60 <HAL_ADC_ConfigChannel+0x23c>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a10      	ldr	r2, [pc, #64]	; (8001b64 <HAL_ADC_ConfigChannel+0x240>)
 8001b24:	fba2 2303 	umull	r2, r3, r2, r3
 8001b28:	0c9a      	lsrs	r2, r3, #18
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	4413      	add	r3, r2
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001b34:	e002      	b.n	8001b3c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	3b01      	subs	r3, #1
 8001b3a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d1f9      	bne.n	8001b36 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2200      	movs	r2, #0
 8001b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001b4a:	2300      	movs	r3, #0
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3714      	adds	r7, #20
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr
 8001b58:	40012300 	.word	0x40012300
 8001b5c:	40012000 	.word	0x40012000
 8001b60:	20000018 	.word	0x20000018
 8001b64:	431bde83 	.word	0x431bde83

08001b68 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b085      	sub	sp, #20
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b70:	4b79      	ldr	r3, [pc, #484]	; (8001d58 <ADC_Init+0x1f0>)
 8001b72:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	685a      	ldr	r2, [r3, #4]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	431a      	orrs	r2, r3
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	685a      	ldr	r2, [r3, #4]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b9c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	6859      	ldr	r1, [r3, #4]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	691b      	ldr	r3, [r3, #16]
 8001ba8:	021a      	lsls	r2, r3, #8
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	430a      	orrs	r2, r1
 8001bb0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	685a      	ldr	r2, [r3, #4]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001bc0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	6859      	ldr	r1, [r3, #4]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	689a      	ldr	r2, [r3, #8]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	430a      	orrs	r2, r1
 8001bd2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	689a      	ldr	r2, [r3, #8]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001be2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	6899      	ldr	r1, [r3, #8]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	68da      	ldr	r2, [r3, #12]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	430a      	orrs	r2, r1
 8001bf4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bfa:	4a58      	ldr	r2, [pc, #352]	; (8001d5c <ADC_Init+0x1f4>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d022      	beq.n	8001c46 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	689a      	ldr	r2, [r3, #8]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c0e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	6899      	ldr	r1, [r3, #8]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	430a      	orrs	r2, r1
 8001c20:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	689a      	ldr	r2, [r3, #8]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001c30:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	6899      	ldr	r1, [r3, #8]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	430a      	orrs	r2, r1
 8001c42:	609a      	str	r2, [r3, #8]
 8001c44:	e00f      	b.n	8001c66 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	689a      	ldr	r2, [r3, #8]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c54:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	689a      	ldr	r2, [r3, #8]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001c64:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	689a      	ldr	r2, [r3, #8]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f022 0202 	bic.w	r2, r2, #2
 8001c74:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	6899      	ldr	r1, [r3, #8]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	7e1b      	ldrb	r3, [r3, #24]
 8001c80:	005a      	lsls	r2, r3, #1
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	430a      	orrs	r2, r1
 8001c88:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d01b      	beq.n	8001ccc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	685a      	ldr	r2, [r3, #4]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ca2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	685a      	ldr	r2, [r3, #4]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001cb2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	6859      	ldr	r1, [r3, #4]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cbe:	3b01      	subs	r3, #1
 8001cc0:	035a      	lsls	r2, r3, #13
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	430a      	orrs	r2, r1
 8001cc8:	605a      	str	r2, [r3, #4]
 8001cca:	e007      	b.n	8001cdc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	685a      	ldr	r2, [r3, #4]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cda:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001cea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	69db      	ldr	r3, [r3, #28]
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	051a      	lsls	r2, r3, #20
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	430a      	orrs	r2, r1
 8001d00:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	689a      	ldr	r2, [r3, #8]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001d10:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	6899      	ldr	r1, [r3, #8]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d1e:	025a      	lsls	r2, r3, #9
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	430a      	orrs	r2, r1
 8001d26:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	689a      	ldr	r2, [r3, #8]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d36:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	6899      	ldr	r1, [r3, #8]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	695b      	ldr	r3, [r3, #20]
 8001d42:	029a      	lsls	r2, r3, #10
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	430a      	orrs	r2, r1
 8001d4a:	609a      	str	r2, [r3, #8]
}
 8001d4c:	bf00      	nop
 8001d4e:	3714      	adds	r7, #20
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr
 8001d58:	40012300 	.word	0x40012300
 8001d5c:	0f000001 	.word	0x0f000001

08001d60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b085      	sub	sp, #20
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f003 0307 	and.w	r3, r3, #7
 8001d6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d70:	4b0c      	ldr	r3, [pc, #48]	; (8001da4 <__NVIC_SetPriorityGrouping+0x44>)
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d76:	68ba      	ldr	r2, [r7, #8]
 8001d78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d92:	4a04      	ldr	r2, [pc, #16]	; (8001da4 <__NVIC_SetPriorityGrouping+0x44>)
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	60d3      	str	r3, [r2, #12]
}
 8001d98:	bf00      	nop
 8001d9a:	3714      	adds	r7, #20
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr
 8001da4:	e000ed00 	.word	0xe000ed00

08001da8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dac:	4b04      	ldr	r3, [pc, #16]	; (8001dc0 <__NVIC_GetPriorityGrouping+0x18>)
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	0a1b      	lsrs	r3, r3, #8
 8001db2:	f003 0307 	and.w	r3, r3, #7
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr
 8001dc0:	e000ed00 	.word	0xe000ed00

08001dc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	4603      	mov	r3, r0
 8001dcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	db0b      	blt.n	8001dee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dd6:	79fb      	ldrb	r3, [r7, #7]
 8001dd8:	f003 021f 	and.w	r2, r3, #31
 8001ddc:	4907      	ldr	r1, [pc, #28]	; (8001dfc <__NVIC_EnableIRQ+0x38>)
 8001dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de2:	095b      	lsrs	r3, r3, #5
 8001de4:	2001      	movs	r0, #1
 8001de6:	fa00 f202 	lsl.w	r2, r0, r2
 8001dea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dee:	bf00      	nop
 8001df0:	370c      	adds	r7, #12
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	e000e100 	.word	0xe000e100

08001e00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	4603      	mov	r3, r0
 8001e08:	6039      	str	r1, [r7, #0]
 8001e0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	db0a      	blt.n	8001e2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	b2da      	uxtb	r2, r3
 8001e18:	490c      	ldr	r1, [pc, #48]	; (8001e4c <__NVIC_SetPriority+0x4c>)
 8001e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1e:	0112      	lsls	r2, r2, #4
 8001e20:	b2d2      	uxtb	r2, r2
 8001e22:	440b      	add	r3, r1
 8001e24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e28:	e00a      	b.n	8001e40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	b2da      	uxtb	r2, r3
 8001e2e:	4908      	ldr	r1, [pc, #32]	; (8001e50 <__NVIC_SetPriority+0x50>)
 8001e30:	79fb      	ldrb	r3, [r7, #7]
 8001e32:	f003 030f 	and.w	r3, r3, #15
 8001e36:	3b04      	subs	r3, #4
 8001e38:	0112      	lsls	r2, r2, #4
 8001e3a:	b2d2      	uxtb	r2, r2
 8001e3c:	440b      	add	r3, r1
 8001e3e:	761a      	strb	r2, [r3, #24]
}
 8001e40:	bf00      	nop
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr
 8001e4c:	e000e100 	.word	0xe000e100
 8001e50:	e000ed00 	.word	0xe000ed00

08001e54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b089      	sub	sp, #36	; 0x24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	60f8      	str	r0, [r7, #12]
 8001e5c:	60b9      	str	r1, [r7, #8]
 8001e5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f003 0307 	and.w	r3, r3, #7
 8001e66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	f1c3 0307 	rsb	r3, r3, #7
 8001e6e:	2b04      	cmp	r3, #4
 8001e70:	bf28      	it	cs
 8001e72:	2304      	movcs	r3, #4
 8001e74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	3304      	adds	r3, #4
 8001e7a:	2b06      	cmp	r3, #6
 8001e7c:	d902      	bls.n	8001e84 <NVIC_EncodePriority+0x30>
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	3b03      	subs	r3, #3
 8001e82:	e000      	b.n	8001e86 <NVIC_EncodePriority+0x32>
 8001e84:	2300      	movs	r3, #0
 8001e86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e88:	f04f 32ff 	mov.w	r2, #4294967295
 8001e8c:	69bb      	ldr	r3, [r7, #24]
 8001e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e92:	43da      	mvns	r2, r3
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	401a      	ands	r2, r3
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea6:	43d9      	mvns	r1, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eac:	4313      	orrs	r3, r2
         );
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3724      	adds	r7, #36	; 0x24
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
	...

08001ebc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ecc:	d301      	bcc.n	8001ed2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e00f      	b.n	8001ef2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ed2:	4a0a      	ldr	r2, [pc, #40]	; (8001efc <SysTick_Config+0x40>)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eda:	210f      	movs	r1, #15
 8001edc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ee0:	f7ff ff8e 	bl	8001e00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ee4:	4b05      	ldr	r3, [pc, #20]	; (8001efc <SysTick_Config+0x40>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eea:	4b04      	ldr	r3, [pc, #16]	; (8001efc <SysTick_Config+0x40>)
 8001eec:	2207      	movs	r2, #7
 8001eee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	e000e010 	.word	0xe000e010

08001f00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f7ff ff29 	bl	8001d60 <__NVIC_SetPriorityGrouping>
}
 8001f0e:	bf00      	nop
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b086      	sub	sp, #24
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	60b9      	str	r1, [r7, #8]
 8001f20:	607a      	str	r2, [r7, #4]
 8001f22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f24:	2300      	movs	r3, #0
 8001f26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f28:	f7ff ff3e 	bl	8001da8 <__NVIC_GetPriorityGrouping>
 8001f2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	68b9      	ldr	r1, [r7, #8]
 8001f32:	6978      	ldr	r0, [r7, #20]
 8001f34:	f7ff ff8e 	bl	8001e54 <NVIC_EncodePriority>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f3e:	4611      	mov	r1, r2
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7ff ff5d 	bl	8001e00 <__NVIC_SetPriority>
}
 8001f46:	bf00      	nop
 8001f48:	3718      	adds	r7, #24
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b082      	sub	sp, #8
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	4603      	mov	r3, r0
 8001f56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7ff ff31 	bl	8001dc4 <__NVIC_EnableIRQ>
}
 8001f62:	bf00      	nop
 8001f64:	3708      	adds	r7, #8
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}

08001f6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f6a:	b580      	push	{r7, lr}
 8001f6c:	b082      	sub	sp, #8
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f7ff ffa2 	bl	8001ebc <SysTick_Config>
 8001f78:	4603      	mov	r3, r0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b084      	sub	sp, #16
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f8e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001f90:	f7ff fc54 	bl	800183c <HAL_GetTick>
 8001f94:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d008      	beq.n	8001fb4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2280      	movs	r2, #128	; 0x80
 8001fa6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e052      	b.n	800205a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f022 0216 	bic.w	r2, r2, #22
 8001fc2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	695a      	ldr	r2, [r3, #20]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fd2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d103      	bne.n	8001fe4 <HAL_DMA_Abort+0x62>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d007      	beq.n	8001ff4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f022 0208 	bic.w	r2, r2, #8
 8001ff2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f022 0201 	bic.w	r2, r2, #1
 8002002:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002004:	e013      	b.n	800202e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002006:	f7ff fc19 	bl	800183c <HAL_GetTick>
 800200a:	4602      	mov	r2, r0
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	2b05      	cmp	r3, #5
 8002012:	d90c      	bls.n	800202e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2220      	movs	r2, #32
 8002018:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2203      	movs	r2, #3
 800201e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e015      	b.n	800205a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0301 	and.w	r3, r3, #1
 8002038:	2b00      	cmp	r3, #0
 800203a:	d1e4      	bne.n	8002006 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002040:	223f      	movs	r2, #63	; 0x3f
 8002042:	409a      	lsls	r2, r3
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2201      	movs	r2, #1
 800204c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	3710      	adds	r7, #16
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}

08002062 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002062:	b480      	push	{r7}
 8002064:	b083      	sub	sp, #12
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002070:	b2db      	uxtb	r3, r3
 8002072:	2b02      	cmp	r3, #2
 8002074:	d004      	beq.n	8002080 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2280      	movs	r2, #128	; 0x80
 800207a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e00c      	b.n	800209a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2205      	movs	r2, #5
 8002084:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f022 0201 	bic.w	r2, r2, #1
 8002096:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
	...

080020a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b089      	sub	sp, #36	; 0x24
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020b2:	2300      	movs	r3, #0
 80020b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020b6:	2300      	movs	r3, #0
 80020b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020ba:	2300      	movs	r3, #0
 80020bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020be:	2300      	movs	r3, #0
 80020c0:	61fb      	str	r3, [r7, #28]
 80020c2:	e159      	b.n	8002378 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020c4:	2201      	movs	r2, #1
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	fa02 f303 	lsl.w	r3, r2, r3
 80020cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	697a      	ldr	r2, [r7, #20]
 80020d4:	4013      	ands	r3, r2
 80020d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020d8:	693a      	ldr	r2, [r7, #16]
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	429a      	cmp	r2, r3
 80020de:	f040 8148 	bne.w	8002372 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f003 0303 	and.w	r3, r3, #3
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d005      	beq.n	80020fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d130      	bne.n	800215c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	2203      	movs	r2, #3
 8002106:	fa02 f303 	lsl.w	r3, r2, r3
 800210a:	43db      	mvns	r3, r3
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	4013      	ands	r3, r2
 8002110:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	68da      	ldr	r2, [r3, #12]
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	fa02 f303 	lsl.w	r3, r2, r3
 800211e:	69ba      	ldr	r2, [r7, #24]
 8002120:	4313      	orrs	r3, r2
 8002122:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	69ba      	ldr	r2, [r7, #24]
 8002128:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002130:	2201      	movs	r2, #1
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	43db      	mvns	r3, r3
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	4013      	ands	r3, r2
 800213e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	091b      	lsrs	r3, r3, #4
 8002146:	f003 0201 	and.w	r2, r3, #1
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	fa02 f303 	lsl.w	r3, r2, r3
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	4313      	orrs	r3, r2
 8002154:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f003 0303 	and.w	r3, r3, #3
 8002164:	2b03      	cmp	r3, #3
 8002166:	d017      	beq.n	8002198 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	005b      	lsls	r3, r3, #1
 8002172:	2203      	movs	r2, #3
 8002174:	fa02 f303 	lsl.w	r3, r2, r3
 8002178:	43db      	mvns	r3, r3
 800217a:	69ba      	ldr	r2, [r7, #24]
 800217c:	4013      	ands	r3, r2
 800217e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	689a      	ldr	r2, [r3, #8]
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	005b      	lsls	r3, r3, #1
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	4313      	orrs	r3, r2
 8002190:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f003 0303 	and.w	r3, r3, #3
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d123      	bne.n	80021ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	08da      	lsrs	r2, r3, #3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	3208      	adds	r2, #8
 80021ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	f003 0307 	and.w	r3, r3, #7
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	220f      	movs	r2, #15
 80021bc:	fa02 f303 	lsl.w	r3, r2, r3
 80021c0:	43db      	mvns	r3, r3
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	4013      	ands	r3, r2
 80021c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	691a      	ldr	r2, [r3, #16]
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	f003 0307 	and.w	r3, r3, #7
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	4313      	orrs	r3, r2
 80021dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	08da      	lsrs	r2, r3, #3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	3208      	adds	r2, #8
 80021e6:	69b9      	ldr	r1, [r7, #24]
 80021e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	2203      	movs	r2, #3
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	43db      	mvns	r3, r3
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	4013      	ands	r3, r2
 8002202:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f003 0203 	and.w	r2, r3, #3
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	005b      	lsls	r3, r3, #1
 8002210:	fa02 f303 	lsl.w	r3, r2, r3
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	4313      	orrs	r3, r2
 8002218:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002228:	2b00      	cmp	r3, #0
 800222a:	f000 80a2 	beq.w	8002372 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800222e:	2300      	movs	r3, #0
 8002230:	60fb      	str	r3, [r7, #12]
 8002232:	4b57      	ldr	r3, [pc, #348]	; (8002390 <HAL_GPIO_Init+0x2e8>)
 8002234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002236:	4a56      	ldr	r2, [pc, #344]	; (8002390 <HAL_GPIO_Init+0x2e8>)
 8002238:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800223c:	6453      	str	r3, [r2, #68]	; 0x44
 800223e:	4b54      	ldr	r3, [pc, #336]	; (8002390 <HAL_GPIO_Init+0x2e8>)
 8002240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002242:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002246:	60fb      	str	r3, [r7, #12]
 8002248:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800224a:	4a52      	ldr	r2, [pc, #328]	; (8002394 <HAL_GPIO_Init+0x2ec>)
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	089b      	lsrs	r3, r3, #2
 8002250:	3302      	adds	r3, #2
 8002252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002256:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	f003 0303 	and.w	r3, r3, #3
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	220f      	movs	r2, #15
 8002262:	fa02 f303 	lsl.w	r3, r2, r3
 8002266:	43db      	mvns	r3, r3
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	4013      	ands	r3, r2
 800226c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a49      	ldr	r2, [pc, #292]	; (8002398 <HAL_GPIO_Init+0x2f0>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d019      	beq.n	80022aa <HAL_GPIO_Init+0x202>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a48      	ldr	r2, [pc, #288]	; (800239c <HAL_GPIO_Init+0x2f4>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d013      	beq.n	80022a6 <HAL_GPIO_Init+0x1fe>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a47      	ldr	r2, [pc, #284]	; (80023a0 <HAL_GPIO_Init+0x2f8>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d00d      	beq.n	80022a2 <HAL_GPIO_Init+0x1fa>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a46      	ldr	r2, [pc, #280]	; (80023a4 <HAL_GPIO_Init+0x2fc>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d007      	beq.n	800229e <HAL_GPIO_Init+0x1f6>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a45      	ldr	r2, [pc, #276]	; (80023a8 <HAL_GPIO_Init+0x300>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d101      	bne.n	800229a <HAL_GPIO_Init+0x1f2>
 8002296:	2304      	movs	r3, #4
 8002298:	e008      	b.n	80022ac <HAL_GPIO_Init+0x204>
 800229a:	2307      	movs	r3, #7
 800229c:	e006      	b.n	80022ac <HAL_GPIO_Init+0x204>
 800229e:	2303      	movs	r3, #3
 80022a0:	e004      	b.n	80022ac <HAL_GPIO_Init+0x204>
 80022a2:	2302      	movs	r3, #2
 80022a4:	e002      	b.n	80022ac <HAL_GPIO_Init+0x204>
 80022a6:	2301      	movs	r3, #1
 80022a8:	e000      	b.n	80022ac <HAL_GPIO_Init+0x204>
 80022aa:	2300      	movs	r3, #0
 80022ac:	69fa      	ldr	r2, [r7, #28]
 80022ae:	f002 0203 	and.w	r2, r2, #3
 80022b2:	0092      	lsls	r2, r2, #2
 80022b4:	4093      	lsls	r3, r2
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022bc:	4935      	ldr	r1, [pc, #212]	; (8002394 <HAL_GPIO_Init+0x2ec>)
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	089b      	lsrs	r3, r3, #2
 80022c2:	3302      	adds	r3, #2
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022ca:	4b38      	ldr	r3, [pc, #224]	; (80023ac <HAL_GPIO_Init+0x304>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	43db      	mvns	r3, r3
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	4013      	ands	r3, r2
 80022d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d003      	beq.n	80022ee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80022e6:	69ba      	ldr	r2, [r7, #24]
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022ee:	4a2f      	ldr	r2, [pc, #188]	; (80023ac <HAL_GPIO_Init+0x304>)
 80022f0:	69bb      	ldr	r3, [r7, #24]
 80022f2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80022f4:	4b2d      	ldr	r3, [pc, #180]	; (80023ac <HAL_GPIO_Init+0x304>)
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	43db      	mvns	r3, r3
 80022fe:	69ba      	ldr	r2, [r7, #24]
 8002300:	4013      	ands	r3, r2
 8002302:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d003      	beq.n	8002318 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	4313      	orrs	r3, r2
 8002316:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002318:	4a24      	ldr	r2, [pc, #144]	; (80023ac <HAL_GPIO_Init+0x304>)
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800231e:	4b23      	ldr	r3, [pc, #140]	; (80023ac <HAL_GPIO_Init+0x304>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	43db      	mvns	r3, r3
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	4013      	ands	r3, r2
 800232c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d003      	beq.n	8002342 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800233a:	69ba      	ldr	r2, [r7, #24]
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	4313      	orrs	r3, r2
 8002340:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002342:	4a1a      	ldr	r2, [pc, #104]	; (80023ac <HAL_GPIO_Init+0x304>)
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002348:	4b18      	ldr	r3, [pc, #96]	; (80023ac <HAL_GPIO_Init+0x304>)
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	43db      	mvns	r3, r3
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	4013      	ands	r3, r2
 8002356:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d003      	beq.n	800236c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	4313      	orrs	r3, r2
 800236a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800236c:	4a0f      	ldr	r2, [pc, #60]	; (80023ac <HAL_GPIO_Init+0x304>)
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	3301      	adds	r3, #1
 8002376:	61fb      	str	r3, [r7, #28]
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	2b0f      	cmp	r3, #15
 800237c:	f67f aea2 	bls.w	80020c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002380:	bf00      	nop
 8002382:	bf00      	nop
 8002384:	3724      	adds	r7, #36	; 0x24
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	40023800 	.word	0x40023800
 8002394:	40013800 	.word	0x40013800
 8002398:	40020000 	.word	0x40020000
 800239c:	40020400 	.word	0x40020400
 80023a0:	40020800 	.word	0x40020800
 80023a4:	40020c00 	.word	0x40020c00
 80023a8:	40021000 	.word	0x40021000
 80023ac:	40013c00 	.word	0x40013c00

080023b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b085      	sub	sp, #20
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	460b      	mov	r3, r1
 80023ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	691a      	ldr	r2, [r3, #16]
 80023c0:	887b      	ldrh	r3, [r7, #2]
 80023c2:	4013      	ands	r3, r2
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d002      	beq.n	80023ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80023c8:	2301      	movs	r3, #1
 80023ca:	73fb      	strb	r3, [r7, #15]
 80023cc:	e001      	b.n	80023d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023ce:	2300      	movs	r3, #0
 80023d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80023d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3714      	adds	r7, #20
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	460b      	mov	r3, r1
 80023ea:	807b      	strh	r3, [r7, #2]
 80023ec:	4613      	mov	r3, r2
 80023ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023f0:	787b      	ldrb	r3, [r7, #1]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d003      	beq.n	80023fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023f6:	887a      	ldrh	r2, [r7, #2]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023fc:	e003      	b.n	8002406 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023fe:	887b      	ldrh	r3, [r7, #2]
 8002400:	041a      	lsls	r2, r3, #16
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	619a      	str	r2, [r3, #24]
}
 8002406:	bf00      	nop
 8002408:	370c      	adds	r7, #12
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr

08002412 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002412:	b480      	push	{r7}
 8002414:	b085      	sub	sp, #20
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
 800241a:	460b      	mov	r3, r1
 800241c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	695b      	ldr	r3, [r3, #20]
 8002422:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002424:	887a      	ldrh	r2, [r7, #2]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	4013      	ands	r3, r2
 800242a:	041a      	lsls	r2, r3, #16
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	43d9      	mvns	r1, r3
 8002430:	887b      	ldrh	r3, [r7, #2]
 8002432:	400b      	ands	r3, r1
 8002434:	431a      	orrs	r2, r3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	619a      	str	r2, [r3, #24]
}
 800243a:	bf00      	nop
 800243c:	3714      	adds	r7, #20
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
	...

08002448 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b086      	sub	sp, #24
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d101      	bne.n	800245a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e264      	b.n	8002924 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0301 	and.w	r3, r3, #1
 8002462:	2b00      	cmp	r3, #0
 8002464:	d075      	beq.n	8002552 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002466:	4ba3      	ldr	r3, [pc, #652]	; (80026f4 <HAL_RCC_OscConfig+0x2ac>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f003 030c 	and.w	r3, r3, #12
 800246e:	2b04      	cmp	r3, #4
 8002470:	d00c      	beq.n	800248c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002472:	4ba0      	ldr	r3, [pc, #640]	; (80026f4 <HAL_RCC_OscConfig+0x2ac>)
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800247a:	2b08      	cmp	r3, #8
 800247c:	d112      	bne.n	80024a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800247e:	4b9d      	ldr	r3, [pc, #628]	; (80026f4 <HAL_RCC_OscConfig+0x2ac>)
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002486:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800248a:	d10b      	bne.n	80024a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800248c:	4b99      	ldr	r3, [pc, #612]	; (80026f4 <HAL_RCC_OscConfig+0x2ac>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d05b      	beq.n	8002550 <HAL_RCC_OscConfig+0x108>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d157      	bne.n	8002550 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e23f      	b.n	8002924 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024ac:	d106      	bne.n	80024bc <HAL_RCC_OscConfig+0x74>
 80024ae:	4b91      	ldr	r3, [pc, #580]	; (80026f4 <HAL_RCC_OscConfig+0x2ac>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a90      	ldr	r2, [pc, #576]	; (80026f4 <HAL_RCC_OscConfig+0x2ac>)
 80024b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024b8:	6013      	str	r3, [r2, #0]
 80024ba:	e01d      	b.n	80024f8 <HAL_RCC_OscConfig+0xb0>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024c4:	d10c      	bne.n	80024e0 <HAL_RCC_OscConfig+0x98>
 80024c6:	4b8b      	ldr	r3, [pc, #556]	; (80026f4 <HAL_RCC_OscConfig+0x2ac>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a8a      	ldr	r2, [pc, #552]	; (80026f4 <HAL_RCC_OscConfig+0x2ac>)
 80024cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024d0:	6013      	str	r3, [r2, #0]
 80024d2:	4b88      	ldr	r3, [pc, #544]	; (80026f4 <HAL_RCC_OscConfig+0x2ac>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a87      	ldr	r2, [pc, #540]	; (80026f4 <HAL_RCC_OscConfig+0x2ac>)
 80024d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024dc:	6013      	str	r3, [r2, #0]
 80024de:	e00b      	b.n	80024f8 <HAL_RCC_OscConfig+0xb0>
 80024e0:	4b84      	ldr	r3, [pc, #528]	; (80026f4 <HAL_RCC_OscConfig+0x2ac>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a83      	ldr	r2, [pc, #524]	; (80026f4 <HAL_RCC_OscConfig+0x2ac>)
 80024e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024ea:	6013      	str	r3, [r2, #0]
 80024ec:	4b81      	ldr	r3, [pc, #516]	; (80026f4 <HAL_RCC_OscConfig+0x2ac>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a80      	ldr	r2, [pc, #512]	; (80026f4 <HAL_RCC_OscConfig+0x2ac>)
 80024f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d013      	beq.n	8002528 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002500:	f7ff f99c 	bl	800183c <HAL_GetTick>
 8002504:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002506:	e008      	b.n	800251a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002508:	f7ff f998 	bl	800183c <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	2b64      	cmp	r3, #100	; 0x64
 8002514:	d901      	bls.n	800251a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e204      	b.n	8002924 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800251a:	4b76      	ldr	r3, [pc, #472]	; (80026f4 <HAL_RCC_OscConfig+0x2ac>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d0f0      	beq.n	8002508 <HAL_RCC_OscConfig+0xc0>
 8002526:	e014      	b.n	8002552 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002528:	f7ff f988 	bl	800183c <HAL_GetTick>
 800252c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800252e:	e008      	b.n	8002542 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002530:	f7ff f984 	bl	800183c <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	2b64      	cmp	r3, #100	; 0x64
 800253c:	d901      	bls.n	8002542 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e1f0      	b.n	8002924 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002542:	4b6c      	ldr	r3, [pc, #432]	; (80026f4 <HAL_RCC_OscConfig+0x2ac>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d1f0      	bne.n	8002530 <HAL_RCC_OscConfig+0xe8>
 800254e:	e000      	b.n	8002552 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002550:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d063      	beq.n	8002626 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800255e:	4b65      	ldr	r3, [pc, #404]	; (80026f4 <HAL_RCC_OscConfig+0x2ac>)
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f003 030c 	and.w	r3, r3, #12
 8002566:	2b00      	cmp	r3, #0
 8002568:	d00b      	beq.n	8002582 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800256a:	4b62      	ldr	r3, [pc, #392]	; (80026f4 <HAL_RCC_OscConfig+0x2ac>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002572:	2b08      	cmp	r3, #8
 8002574:	d11c      	bne.n	80025b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002576:	4b5f      	ldr	r3, [pc, #380]	; (80026f4 <HAL_RCC_OscConfig+0x2ac>)
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d116      	bne.n	80025b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002582:	4b5c      	ldr	r3, [pc, #368]	; (80026f4 <HAL_RCC_OscConfig+0x2ac>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	2b00      	cmp	r3, #0
 800258c:	d005      	beq.n	800259a <HAL_RCC_OscConfig+0x152>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	2b01      	cmp	r3, #1
 8002594:	d001      	beq.n	800259a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e1c4      	b.n	8002924 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800259a:	4b56      	ldr	r3, [pc, #344]	; (80026f4 <HAL_RCC_OscConfig+0x2ac>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	691b      	ldr	r3, [r3, #16]
 80025a6:	00db      	lsls	r3, r3, #3
 80025a8:	4952      	ldr	r1, [pc, #328]	; (80026f4 <HAL_RCC_OscConfig+0x2ac>)
 80025aa:	4313      	orrs	r3, r2
 80025ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ae:	e03a      	b.n	8002626 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d020      	beq.n	80025fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025b8:	4b4f      	ldr	r3, [pc, #316]	; (80026f8 <HAL_RCC_OscConfig+0x2b0>)
 80025ba:	2201      	movs	r2, #1
 80025bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025be:	f7ff f93d 	bl	800183c <HAL_GetTick>
 80025c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025c4:	e008      	b.n	80025d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025c6:	f7ff f939 	bl	800183c <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d901      	bls.n	80025d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	e1a5      	b.n	8002924 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025d8:	4b46      	ldr	r3, [pc, #280]	; (80026f4 <HAL_RCC_OscConfig+0x2ac>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0302 	and.w	r3, r3, #2
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d0f0      	beq.n	80025c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025e4:	4b43      	ldr	r3, [pc, #268]	; (80026f4 <HAL_RCC_OscConfig+0x2ac>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	691b      	ldr	r3, [r3, #16]
 80025f0:	00db      	lsls	r3, r3, #3
 80025f2:	4940      	ldr	r1, [pc, #256]	; (80026f4 <HAL_RCC_OscConfig+0x2ac>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	600b      	str	r3, [r1, #0]
 80025f8:	e015      	b.n	8002626 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025fa:	4b3f      	ldr	r3, [pc, #252]	; (80026f8 <HAL_RCC_OscConfig+0x2b0>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002600:	f7ff f91c 	bl	800183c <HAL_GetTick>
 8002604:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002606:	e008      	b.n	800261a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002608:	f7ff f918 	bl	800183c <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b02      	cmp	r3, #2
 8002614:	d901      	bls.n	800261a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e184      	b.n	8002924 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800261a:	4b36      	ldr	r3, [pc, #216]	; (80026f4 <HAL_RCC_OscConfig+0x2ac>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0302 	and.w	r3, r3, #2
 8002622:	2b00      	cmp	r3, #0
 8002624:	d1f0      	bne.n	8002608 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0308 	and.w	r3, r3, #8
 800262e:	2b00      	cmp	r3, #0
 8002630:	d030      	beq.n	8002694 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	695b      	ldr	r3, [r3, #20]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d016      	beq.n	8002668 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800263a:	4b30      	ldr	r3, [pc, #192]	; (80026fc <HAL_RCC_OscConfig+0x2b4>)
 800263c:	2201      	movs	r2, #1
 800263e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002640:	f7ff f8fc 	bl	800183c <HAL_GetTick>
 8002644:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002646:	e008      	b.n	800265a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002648:	f7ff f8f8 	bl	800183c <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	2b02      	cmp	r3, #2
 8002654:	d901      	bls.n	800265a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e164      	b.n	8002924 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800265a:	4b26      	ldr	r3, [pc, #152]	; (80026f4 <HAL_RCC_OscConfig+0x2ac>)
 800265c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d0f0      	beq.n	8002648 <HAL_RCC_OscConfig+0x200>
 8002666:	e015      	b.n	8002694 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002668:	4b24      	ldr	r3, [pc, #144]	; (80026fc <HAL_RCC_OscConfig+0x2b4>)
 800266a:	2200      	movs	r2, #0
 800266c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800266e:	f7ff f8e5 	bl	800183c <HAL_GetTick>
 8002672:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002674:	e008      	b.n	8002688 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002676:	f7ff f8e1 	bl	800183c <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	2b02      	cmp	r3, #2
 8002682:	d901      	bls.n	8002688 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e14d      	b.n	8002924 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002688:	4b1a      	ldr	r3, [pc, #104]	; (80026f4 <HAL_RCC_OscConfig+0x2ac>)
 800268a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800268c:	f003 0302 	and.w	r3, r3, #2
 8002690:	2b00      	cmp	r3, #0
 8002692:	d1f0      	bne.n	8002676 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0304 	and.w	r3, r3, #4
 800269c:	2b00      	cmp	r3, #0
 800269e:	f000 80a0 	beq.w	80027e2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026a2:	2300      	movs	r3, #0
 80026a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026a6:	4b13      	ldr	r3, [pc, #76]	; (80026f4 <HAL_RCC_OscConfig+0x2ac>)
 80026a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d10f      	bne.n	80026d2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026b2:	2300      	movs	r3, #0
 80026b4:	60bb      	str	r3, [r7, #8]
 80026b6:	4b0f      	ldr	r3, [pc, #60]	; (80026f4 <HAL_RCC_OscConfig+0x2ac>)
 80026b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ba:	4a0e      	ldr	r2, [pc, #56]	; (80026f4 <HAL_RCC_OscConfig+0x2ac>)
 80026bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026c0:	6413      	str	r3, [r2, #64]	; 0x40
 80026c2:	4b0c      	ldr	r3, [pc, #48]	; (80026f4 <HAL_RCC_OscConfig+0x2ac>)
 80026c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ca:	60bb      	str	r3, [r7, #8]
 80026cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026ce:	2301      	movs	r3, #1
 80026d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026d2:	4b0b      	ldr	r3, [pc, #44]	; (8002700 <HAL_RCC_OscConfig+0x2b8>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d121      	bne.n	8002722 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026de:	4b08      	ldr	r3, [pc, #32]	; (8002700 <HAL_RCC_OscConfig+0x2b8>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a07      	ldr	r2, [pc, #28]	; (8002700 <HAL_RCC_OscConfig+0x2b8>)
 80026e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026ea:	f7ff f8a7 	bl	800183c <HAL_GetTick>
 80026ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026f0:	e011      	b.n	8002716 <HAL_RCC_OscConfig+0x2ce>
 80026f2:	bf00      	nop
 80026f4:	40023800 	.word	0x40023800
 80026f8:	42470000 	.word	0x42470000
 80026fc:	42470e80 	.word	0x42470e80
 8002700:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002704:	f7ff f89a 	bl	800183c <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	2b02      	cmp	r3, #2
 8002710:	d901      	bls.n	8002716 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e106      	b.n	8002924 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002716:	4b85      	ldr	r3, [pc, #532]	; (800292c <HAL_RCC_OscConfig+0x4e4>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800271e:	2b00      	cmp	r3, #0
 8002720:	d0f0      	beq.n	8002704 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	2b01      	cmp	r3, #1
 8002728:	d106      	bne.n	8002738 <HAL_RCC_OscConfig+0x2f0>
 800272a:	4b81      	ldr	r3, [pc, #516]	; (8002930 <HAL_RCC_OscConfig+0x4e8>)
 800272c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800272e:	4a80      	ldr	r2, [pc, #512]	; (8002930 <HAL_RCC_OscConfig+0x4e8>)
 8002730:	f043 0301 	orr.w	r3, r3, #1
 8002734:	6713      	str	r3, [r2, #112]	; 0x70
 8002736:	e01c      	b.n	8002772 <HAL_RCC_OscConfig+0x32a>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	2b05      	cmp	r3, #5
 800273e:	d10c      	bne.n	800275a <HAL_RCC_OscConfig+0x312>
 8002740:	4b7b      	ldr	r3, [pc, #492]	; (8002930 <HAL_RCC_OscConfig+0x4e8>)
 8002742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002744:	4a7a      	ldr	r2, [pc, #488]	; (8002930 <HAL_RCC_OscConfig+0x4e8>)
 8002746:	f043 0304 	orr.w	r3, r3, #4
 800274a:	6713      	str	r3, [r2, #112]	; 0x70
 800274c:	4b78      	ldr	r3, [pc, #480]	; (8002930 <HAL_RCC_OscConfig+0x4e8>)
 800274e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002750:	4a77      	ldr	r2, [pc, #476]	; (8002930 <HAL_RCC_OscConfig+0x4e8>)
 8002752:	f043 0301 	orr.w	r3, r3, #1
 8002756:	6713      	str	r3, [r2, #112]	; 0x70
 8002758:	e00b      	b.n	8002772 <HAL_RCC_OscConfig+0x32a>
 800275a:	4b75      	ldr	r3, [pc, #468]	; (8002930 <HAL_RCC_OscConfig+0x4e8>)
 800275c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800275e:	4a74      	ldr	r2, [pc, #464]	; (8002930 <HAL_RCC_OscConfig+0x4e8>)
 8002760:	f023 0301 	bic.w	r3, r3, #1
 8002764:	6713      	str	r3, [r2, #112]	; 0x70
 8002766:	4b72      	ldr	r3, [pc, #456]	; (8002930 <HAL_RCC_OscConfig+0x4e8>)
 8002768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800276a:	4a71      	ldr	r2, [pc, #452]	; (8002930 <HAL_RCC_OscConfig+0x4e8>)
 800276c:	f023 0304 	bic.w	r3, r3, #4
 8002770:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d015      	beq.n	80027a6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800277a:	f7ff f85f 	bl	800183c <HAL_GetTick>
 800277e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002780:	e00a      	b.n	8002798 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002782:	f7ff f85b 	bl	800183c <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002790:	4293      	cmp	r3, r2
 8002792:	d901      	bls.n	8002798 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	e0c5      	b.n	8002924 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002798:	4b65      	ldr	r3, [pc, #404]	; (8002930 <HAL_RCC_OscConfig+0x4e8>)
 800279a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800279c:	f003 0302 	and.w	r3, r3, #2
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d0ee      	beq.n	8002782 <HAL_RCC_OscConfig+0x33a>
 80027a4:	e014      	b.n	80027d0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027a6:	f7ff f849 	bl	800183c <HAL_GetTick>
 80027aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027ac:	e00a      	b.n	80027c4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027ae:	f7ff f845 	bl	800183c <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80027bc:	4293      	cmp	r3, r2
 80027be:	d901      	bls.n	80027c4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80027c0:	2303      	movs	r3, #3
 80027c2:	e0af      	b.n	8002924 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027c4:	4b5a      	ldr	r3, [pc, #360]	; (8002930 <HAL_RCC_OscConfig+0x4e8>)
 80027c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c8:	f003 0302 	and.w	r3, r3, #2
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d1ee      	bne.n	80027ae <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027d0:	7dfb      	ldrb	r3, [r7, #23]
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d105      	bne.n	80027e2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027d6:	4b56      	ldr	r3, [pc, #344]	; (8002930 <HAL_RCC_OscConfig+0x4e8>)
 80027d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027da:	4a55      	ldr	r2, [pc, #340]	; (8002930 <HAL_RCC_OscConfig+0x4e8>)
 80027dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027e0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	699b      	ldr	r3, [r3, #24]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	f000 809b 	beq.w	8002922 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027ec:	4b50      	ldr	r3, [pc, #320]	; (8002930 <HAL_RCC_OscConfig+0x4e8>)
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	f003 030c 	and.w	r3, r3, #12
 80027f4:	2b08      	cmp	r3, #8
 80027f6:	d05c      	beq.n	80028b2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	699b      	ldr	r3, [r3, #24]
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d141      	bne.n	8002884 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002800:	4b4c      	ldr	r3, [pc, #304]	; (8002934 <HAL_RCC_OscConfig+0x4ec>)
 8002802:	2200      	movs	r2, #0
 8002804:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002806:	f7ff f819 	bl	800183c <HAL_GetTick>
 800280a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800280c:	e008      	b.n	8002820 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800280e:	f7ff f815 	bl	800183c <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	2b02      	cmp	r3, #2
 800281a:	d901      	bls.n	8002820 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e081      	b.n	8002924 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002820:	4b43      	ldr	r3, [pc, #268]	; (8002930 <HAL_RCC_OscConfig+0x4e8>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d1f0      	bne.n	800280e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	69da      	ldr	r2, [r3, #28]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a1b      	ldr	r3, [r3, #32]
 8002834:	431a      	orrs	r2, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283a:	019b      	lsls	r3, r3, #6
 800283c:	431a      	orrs	r2, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002842:	085b      	lsrs	r3, r3, #1
 8002844:	3b01      	subs	r3, #1
 8002846:	041b      	lsls	r3, r3, #16
 8002848:	431a      	orrs	r2, r3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800284e:	061b      	lsls	r3, r3, #24
 8002850:	4937      	ldr	r1, [pc, #220]	; (8002930 <HAL_RCC_OscConfig+0x4e8>)
 8002852:	4313      	orrs	r3, r2
 8002854:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002856:	4b37      	ldr	r3, [pc, #220]	; (8002934 <HAL_RCC_OscConfig+0x4ec>)
 8002858:	2201      	movs	r2, #1
 800285a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800285c:	f7fe ffee 	bl	800183c <HAL_GetTick>
 8002860:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002862:	e008      	b.n	8002876 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002864:	f7fe ffea 	bl	800183c <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	2b02      	cmp	r3, #2
 8002870:	d901      	bls.n	8002876 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e056      	b.n	8002924 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002876:	4b2e      	ldr	r3, [pc, #184]	; (8002930 <HAL_RCC_OscConfig+0x4e8>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d0f0      	beq.n	8002864 <HAL_RCC_OscConfig+0x41c>
 8002882:	e04e      	b.n	8002922 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002884:	4b2b      	ldr	r3, [pc, #172]	; (8002934 <HAL_RCC_OscConfig+0x4ec>)
 8002886:	2200      	movs	r2, #0
 8002888:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800288a:	f7fe ffd7 	bl	800183c <HAL_GetTick>
 800288e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002890:	e008      	b.n	80028a4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002892:	f7fe ffd3 	bl	800183c <HAL_GetTick>
 8002896:	4602      	mov	r2, r0
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	2b02      	cmp	r3, #2
 800289e:	d901      	bls.n	80028a4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80028a0:	2303      	movs	r3, #3
 80028a2:	e03f      	b.n	8002924 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028a4:	4b22      	ldr	r3, [pc, #136]	; (8002930 <HAL_RCC_OscConfig+0x4e8>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d1f0      	bne.n	8002892 <HAL_RCC_OscConfig+0x44a>
 80028b0:	e037      	b.n	8002922 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	699b      	ldr	r3, [r3, #24]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d101      	bne.n	80028be <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e032      	b.n	8002924 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028be:	4b1c      	ldr	r3, [pc, #112]	; (8002930 <HAL_RCC_OscConfig+0x4e8>)
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	699b      	ldr	r3, [r3, #24]
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d028      	beq.n	800291e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d121      	bne.n	800291e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d11a      	bne.n	800291e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028e8:	68fa      	ldr	r2, [r7, #12]
 80028ea:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028ee:	4013      	ands	r3, r2
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028f4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d111      	bne.n	800291e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002904:	085b      	lsrs	r3, r3, #1
 8002906:	3b01      	subs	r3, #1
 8002908:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800290a:	429a      	cmp	r2, r3
 800290c:	d107      	bne.n	800291e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002918:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800291a:	429a      	cmp	r2, r3
 800291c:	d001      	beq.n	8002922 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e000      	b.n	8002924 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002922:	2300      	movs	r3, #0
}
 8002924:	4618      	mov	r0, r3
 8002926:	3718      	adds	r7, #24
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	40007000 	.word	0x40007000
 8002930:	40023800 	.word	0x40023800
 8002934:	42470060 	.word	0x42470060

08002938 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d101      	bne.n	800294c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e0cc      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800294c:	4b68      	ldr	r3, [pc, #416]	; (8002af0 <HAL_RCC_ClockConfig+0x1b8>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0307 	and.w	r3, r3, #7
 8002954:	683a      	ldr	r2, [r7, #0]
 8002956:	429a      	cmp	r2, r3
 8002958:	d90c      	bls.n	8002974 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800295a:	4b65      	ldr	r3, [pc, #404]	; (8002af0 <HAL_RCC_ClockConfig+0x1b8>)
 800295c:	683a      	ldr	r2, [r7, #0]
 800295e:	b2d2      	uxtb	r2, r2
 8002960:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002962:	4b63      	ldr	r3, [pc, #396]	; (8002af0 <HAL_RCC_ClockConfig+0x1b8>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0307 	and.w	r3, r3, #7
 800296a:	683a      	ldr	r2, [r7, #0]
 800296c:	429a      	cmp	r2, r3
 800296e:	d001      	beq.n	8002974 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e0b8      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0302 	and.w	r3, r3, #2
 800297c:	2b00      	cmp	r3, #0
 800297e:	d020      	beq.n	80029c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0304 	and.w	r3, r3, #4
 8002988:	2b00      	cmp	r3, #0
 800298a:	d005      	beq.n	8002998 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800298c:	4b59      	ldr	r3, [pc, #356]	; (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	4a58      	ldr	r2, [pc, #352]	; (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 8002992:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002996:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0308 	and.w	r3, r3, #8
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d005      	beq.n	80029b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029a4:	4b53      	ldr	r3, [pc, #332]	; (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	4a52      	ldr	r2, [pc, #328]	; (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 80029aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80029ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029b0:	4b50      	ldr	r3, [pc, #320]	; (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	494d      	ldr	r1, [pc, #308]	; (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0301 	and.w	r3, r3, #1
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d044      	beq.n	8002a58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d107      	bne.n	80029e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029d6:	4b47      	ldr	r3, [pc, #284]	; (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d119      	bne.n	8002a16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e07f      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d003      	beq.n	80029f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029f2:	2b03      	cmp	r3, #3
 80029f4:	d107      	bne.n	8002a06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029f6:	4b3f      	ldr	r3, [pc, #252]	; (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d109      	bne.n	8002a16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e06f      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a06:	4b3b      	ldr	r3, [pc, #236]	; (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0302 	and.w	r3, r3, #2
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d101      	bne.n	8002a16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e067      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a16:	4b37      	ldr	r3, [pc, #220]	; (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	f023 0203 	bic.w	r2, r3, #3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	4934      	ldr	r1, [pc, #208]	; (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a28:	f7fe ff08 	bl	800183c <HAL_GetTick>
 8002a2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a2e:	e00a      	b.n	8002a46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a30:	f7fe ff04 	bl	800183c <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e04f      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a46:	4b2b      	ldr	r3, [pc, #172]	; (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f003 020c 	and.w	r2, r3, #12
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d1eb      	bne.n	8002a30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a58:	4b25      	ldr	r3, [pc, #148]	; (8002af0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0307 	and.w	r3, r3, #7
 8002a60:	683a      	ldr	r2, [r7, #0]
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d20c      	bcs.n	8002a80 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a66:	4b22      	ldr	r3, [pc, #136]	; (8002af0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a68:	683a      	ldr	r2, [r7, #0]
 8002a6a:	b2d2      	uxtb	r2, r2
 8002a6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a6e:	4b20      	ldr	r3, [pc, #128]	; (8002af0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0307 	and.w	r3, r3, #7
 8002a76:	683a      	ldr	r2, [r7, #0]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d001      	beq.n	8002a80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e032      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0304 	and.w	r3, r3, #4
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d008      	beq.n	8002a9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a8c:	4b19      	ldr	r3, [pc, #100]	; (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	4916      	ldr	r1, [pc, #88]	; (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0308 	and.w	r3, r3, #8
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d009      	beq.n	8002abe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002aaa:	4b12      	ldr	r3, [pc, #72]	; (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	691b      	ldr	r3, [r3, #16]
 8002ab6:	00db      	lsls	r3, r3, #3
 8002ab8:	490e      	ldr	r1, [pc, #56]	; (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002abe:	f000 f821 	bl	8002b04 <HAL_RCC_GetSysClockFreq>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	4b0b      	ldr	r3, [pc, #44]	; (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	091b      	lsrs	r3, r3, #4
 8002aca:	f003 030f 	and.w	r3, r3, #15
 8002ace:	490a      	ldr	r1, [pc, #40]	; (8002af8 <HAL_RCC_ClockConfig+0x1c0>)
 8002ad0:	5ccb      	ldrb	r3, [r1, r3]
 8002ad2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ad6:	4a09      	ldr	r2, [pc, #36]	; (8002afc <HAL_RCC_ClockConfig+0x1c4>)
 8002ad8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ada:	4b09      	ldr	r3, [pc, #36]	; (8002b00 <HAL_RCC_ClockConfig+0x1c8>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7fe fe68 	bl	80017b4 <HAL_InitTick>

  return HAL_OK;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3710      	adds	r7, #16
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	40023c00 	.word	0x40023c00
 8002af4:	40023800 	.word	0x40023800
 8002af8:	080050b8 	.word	0x080050b8
 8002afc:	20000018 	.word	0x20000018
 8002b00:	2000001c 	.word	0x2000001c

08002b04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b04:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002b08:	b084      	sub	sp, #16
 8002b0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	607b      	str	r3, [r7, #4]
 8002b10:	2300      	movs	r3, #0
 8002b12:	60fb      	str	r3, [r7, #12]
 8002b14:	2300      	movs	r3, #0
 8002b16:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b1c:	4b67      	ldr	r3, [pc, #412]	; (8002cbc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f003 030c 	and.w	r3, r3, #12
 8002b24:	2b08      	cmp	r3, #8
 8002b26:	d00d      	beq.n	8002b44 <HAL_RCC_GetSysClockFreq+0x40>
 8002b28:	2b08      	cmp	r3, #8
 8002b2a:	f200 80bd 	bhi.w	8002ca8 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d002      	beq.n	8002b38 <HAL_RCC_GetSysClockFreq+0x34>
 8002b32:	2b04      	cmp	r3, #4
 8002b34:	d003      	beq.n	8002b3e <HAL_RCC_GetSysClockFreq+0x3a>
 8002b36:	e0b7      	b.n	8002ca8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b38:	4b61      	ldr	r3, [pc, #388]	; (8002cc0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002b3a:	60bb      	str	r3, [r7, #8]
       break;
 8002b3c:	e0b7      	b.n	8002cae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b3e:	4b61      	ldr	r3, [pc, #388]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002b40:	60bb      	str	r3, [r7, #8]
      break;
 8002b42:	e0b4      	b.n	8002cae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b44:	4b5d      	ldr	r3, [pc, #372]	; (8002cbc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b4c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b4e:	4b5b      	ldr	r3, [pc, #364]	; (8002cbc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d04d      	beq.n	8002bf6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b5a:	4b58      	ldr	r3, [pc, #352]	; (8002cbc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	099b      	lsrs	r3, r3, #6
 8002b60:	461a      	mov	r2, r3
 8002b62:	f04f 0300 	mov.w	r3, #0
 8002b66:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002b6a:	f04f 0100 	mov.w	r1, #0
 8002b6e:	ea02 0800 	and.w	r8, r2, r0
 8002b72:	ea03 0901 	and.w	r9, r3, r1
 8002b76:	4640      	mov	r0, r8
 8002b78:	4649      	mov	r1, r9
 8002b7a:	f04f 0200 	mov.w	r2, #0
 8002b7e:	f04f 0300 	mov.w	r3, #0
 8002b82:	014b      	lsls	r3, r1, #5
 8002b84:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002b88:	0142      	lsls	r2, r0, #5
 8002b8a:	4610      	mov	r0, r2
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	ebb0 0008 	subs.w	r0, r0, r8
 8002b92:	eb61 0109 	sbc.w	r1, r1, r9
 8002b96:	f04f 0200 	mov.w	r2, #0
 8002b9a:	f04f 0300 	mov.w	r3, #0
 8002b9e:	018b      	lsls	r3, r1, #6
 8002ba0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002ba4:	0182      	lsls	r2, r0, #6
 8002ba6:	1a12      	subs	r2, r2, r0
 8002ba8:	eb63 0301 	sbc.w	r3, r3, r1
 8002bac:	f04f 0000 	mov.w	r0, #0
 8002bb0:	f04f 0100 	mov.w	r1, #0
 8002bb4:	00d9      	lsls	r1, r3, #3
 8002bb6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002bba:	00d0      	lsls	r0, r2, #3
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	460b      	mov	r3, r1
 8002bc0:	eb12 0208 	adds.w	r2, r2, r8
 8002bc4:	eb43 0309 	adc.w	r3, r3, r9
 8002bc8:	f04f 0000 	mov.w	r0, #0
 8002bcc:	f04f 0100 	mov.w	r1, #0
 8002bd0:	0259      	lsls	r1, r3, #9
 8002bd2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002bd6:	0250      	lsls	r0, r2, #9
 8002bd8:	4602      	mov	r2, r0
 8002bda:	460b      	mov	r3, r1
 8002bdc:	4610      	mov	r0, r2
 8002bde:	4619      	mov	r1, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	461a      	mov	r2, r3
 8002be4:	f04f 0300 	mov.w	r3, #0
 8002be8:	f7fd fb62 	bl	80002b0 <__aeabi_uldivmod>
 8002bec:	4602      	mov	r2, r0
 8002bee:	460b      	mov	r3, r1
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	60fb      	str	r3, [r7, #12]
 8002bf4:	e04a      	b.n	8002c8c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bf6:	4b31      	ldr	r3, [pc, #196]	; (8002cbc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	099b      	lsrs	r3, r3, #6
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	f04f 0300 	mov.w	r3, #0
 8002c02:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002c06:	f04f 0100 	mov.w	r1, #0
 8002c0a:	ea02 0400 	and.w	r4, r2, r0
 8002c0e:	ea03 0501 	and.w	r5, r3, r1
 8002c12:	4620      	mov	r0, r4
 8002c14:	4629      	mov	r1, r5
 8002c16:	f04f 0200 	mov.w	r2, #0
 8002c1a:	f04f 0300 	mov.w	r3, #0
 8002c1e:	014b      	lsls	r3, r1, #5
 8002c20:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002c24:	0142      	lsls	r2, r0, #5
 8002c26:	4610      	mov	r0, r2
 8002c28:	4619      	mov	r1, r3
 8002c2a:	1b00      	subs	r0, r0, r4
 8002c2c:	eb61 0105 	sbc.w	r1, r1, r5
 8002c30:	f04f 0200 	mov.w	r2, #0
 8002c34:	f04f 0300 	mov.w	r3, #0
 8002c38:	018b      	lsls	r3, r1, #6
 8002c3a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002c3e:	0182      	lsls	r2, r0, #6
 8002c40:	1a12      	subs	r2, r2, r0
 8002c42:	eb63 0301 	sbc.w	r3, r3, r1
 8002c46:	f04f 0000 	mov.w	r0, #0
 8002c4a:	f04f 0100 	mov.w	r1, #0
 8002c4e:	00d9      	lsls	r1, r3, #3
 8002c50:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002c54:	00d0      	lsls	r0, r2, #3
 8002c56:	4602      	mov	r2, r0
 8002c58:	460b      	mov	r3, r1
 8002c5a:	1912      	adds	r2, r2, r4
 8002c5c:	eb45 0303 	adc.w	r3, r5, r3
 8002c60:	f04f 0000 	mov.w	r0, #0
 8002c64:	f04f 0100 	mov.w	r1, #0
 8002c68:	0299      	lsls	r1, r3, #10
 8002c6a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002c6e:	0290      	lsls	r0, r2, #10
 8002c70:	4602      	mov	r2, r0
 8002c72:	460b      	mov	r3, r1
 8002c74:	4610      	mov	r0, r2
 8002c76:	4619      	mov	r1, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	f04f 0300 	mov.w	r3, #0
 8002c80:	f7fd fb16 	bl	80002b0 <__aeabi_uldivmod>
 8002c84:	4602      	mov	r2, r0
 8002c86:	460b      	mov	r3, r1
 8002c88:	4613      	mov	r3, r2
 8002c8a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c8c:	4b0b      	ldr	r3, [pc, #44]	; (8002cbc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	0c1b      	lsrs	r3, r3, #16
 8002c92:	f003 0303 	and.w	r3, r3, #3
 8002c96:	3301      	adds	r3, #1
 8002c98:	005b      	lsls	r3, r3, #1
 8002c9a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002c9c:	68fa      	ldr	r2, [r7, #12]
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ca4:	60bb      	str	r3, [r7, #8]
      break;
 8002ca6:	e002      	b.n	8002cae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ca8:	4b05      	ldr	r3, [pc, #20]	; (8002cc0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002caa:	60bb      	str	r3, [r7, #8]
      break;
 8002cac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cae:	68bb      	ldr	r3, [r7, #8]
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3710      	adds	r7, #16
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002cba:	bf00      	nop
 8002cbc:	40023800 	.word	0x40023800
 8002cc0:	00f42400 	.word	0x00f42400
 8002cc4:	007a1200 	.word	0x007a1200

08002cc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ccc:	4b03      	ldr	r3, [pc, #12]	; (8002cdc <HAL_RCC_GetHCLKFreq+0x14>)
 8002cce:	681b      	ldr	r3, [r3, #0]
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	20000018 	.word	0x20000018

08002ce0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ce4:	f7ff fff0 	bl	8002cc8 <HAL_RCC_GetHCLKFreq>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	4b05      	ldr	r3, [pc, #20]	; (8002d00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	0a9b      	lsrs	r3, r3, #10
 8002cf0:	f003 0307 	and.w	r3, r3, #7
 8002cf4:	4903      	ldr	r1, [pc, #12]	; (8002d04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cf6:	5ccb      	ldrb	r3, [r1, r3]
 8002cf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	40023800 	.word	0x40023800
 8002d04:	080050c8 	.word	0x080050c8

08002d08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002d0c:	f7ff ffdc 	bl	8002cc8 <HAL_RCC_GetHCLKFreq>
 8002d10:	4602      	mov	r2, r0
 8002d12:	4b05      	ldr	r3, [pc, #20]	; (8002d28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	0b5b      	lsrs	r3, r3, #13
 8002d18:	f003 0307 	and.w	r3, r3, #7
 8002d1c:	4903      	ldr	r1, [pc, #12]	; (8002d2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d1e:	5ccb      	ldrb	r3, [r1, r3]
 8002d20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	40023800 	.word	0x40023800
 8002d2c:	080050c8 	.word	0x080050c8

08002d30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d101      	bne.n	8002d42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e041      	b.n	8002dc6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d106      	bne.n	8002d5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f7fe fb62 	bl	8001420 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2202      	movs	r2, #2
 8002d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	3304      	adds	r3, #4
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	4610      	mov	r0, r2
 8002d70:	f000 f9fc 	bl	800316c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3708      	adds	r7, #8
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
	...

08002dd0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b085      	sub	sp, #20
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d001      	beq.n	8002de8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e03c      	b.n	8002e62 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2202      	movs	r2, #2
 8002dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a1e      	ldr	r2, [pc, #120]	; (8002e70 <HAL_TIM_Base_Start+0xa0>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d018      	beq.n	8002e2c <HAL_TIM_Base_Start+0x5c>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e02:	d013      	beq.n	8002e2c <HAL_TIM_Base_Start+0x5c>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a1a      	ldr	r2, [pc, #104]	; (8002e74 <HAL_TIM_Base_Start+0xa4>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d00e      	beq.n	8002e2c <HAL_TIM_Base_Start+0x5c>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a19      	ldr	r2, [pc, #100]	; (8002e78 <HAL_TIM_Base_Start+0xa8>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d009      	beq.n	8002e2c <HAL_TIM_Base_Start+0x5c>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a17      	ldr	r2, [pc, #92]	; (8002e7c <HAL_TIM_Base_Start+0xac>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d004      	beq.n	8002e2c <HAL_TIM_Base_Start+0x5c>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a16      	ldr	r2, [pc, #88]	; (8002e80 <HAL_TIM_Base_Start+0xb0>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d111      	bne.n	8002e50 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f003 0307 	and.w	r3, r3, #7
 8002e36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2b06      	cmp	r3, #6
 8002e3c:	d010      	beq.n	8002e60 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f042 0201 	orr.w	r2, r2, #1
 8002e4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e4e:	e007      	b.n	8002e60 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f042 0201 	orr.w	r2, r2, #1
 8002e5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e60:	2300      	movs	r3, #0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3714      	adds	r7, #20
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop
 8002e70:	40010000 	.word	0x40010000
 8002e74:	40000400 	.word	0x40000400
 8002e78:	40000800 	.word	0x40000800
 8002e7c:	40000c00 	.word	0x40000c00
 8002e80:	40014000 	.word	0x40014000

08002e84 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d101      	bne.n	8002e96 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e041      	b.n	8002f1a <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d106      	bne.n	8002eb0 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f7fe fad8 	bl	8001460 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2202      	movs	r2, #2
 8002eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	3304      	adds	r3, #4
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	4610      	mov	r0, r2
 8002ec4:	f000 f952 	bl	800316c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f18:	2300      	movs	r3, #0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3708      	adds	r7, #8
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
	...

08002f24 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b086      	sub	sp, #24
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	60b9      	str	r1, [r7, #8]
 8002f2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f30:	2300      	movs	r3, #0
 8002f32:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d101      	bne.n	8002f42 <HAL_TIM_OC_ConfigChannel+0x1e>
 8002f3e:	2302      	movs	r3, #2
 8002f40:	e048      	b.n	8002fd4 <HAL_TIM_OC_ConfigChannel+0xb0>
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2201      	movs	r2, #1
 8002f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2b0c      	cmp	r3, #12
 8002f4e:	d839      	bhi.n	8002fc4 <HAL_TIM_OC_ConfigChannel+0xa0>
 8002f50:	a201      	add	r2, pc, #4	; (adr r2, 8002f58 <HAL_TIM_OC_ConfigChannel+0x34>)
 8002f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f56:	bf00      	nop
 8002f58:	08002f8d 	.word	0x08002f8d
 8002f5c:	08002fc5 	.word	0x08002fc5
 8002f60:	08002fc5 	.word	0x08002fc5
 8002f64:	08002fc5 	.word	0x08002fc5
 8002f68:	08002f9b 	.word	0x08002f9b
 8002f6c:	08002fc5 	.word	0x08002fc5
 8002f70:	08002fc5 	.word	0x08002fc5
 8002f74:	08002fc5 	.word	0x08002fc5
 8002f78:	08002fa9 	.word	0x08002fa9
 8002f7c:	08002fc5 	.word	0x08002fc5
 8002f80:	08002fc5 	.word	0x08002fc5
 8002f84:	08002fc5 	.word	0x08002fc5
 8002f88:	08002fb7 	.word	0x08002fb7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	68b9      	ldr	r1, [r7, #8]
 8002f92:	4618      	mov	r0, r3
 8002f94:	f000 f96a 	bl	800326c <TIM_OC1_SetConfig>
      break;
 8002f98:	e017      	b.n	8002fca <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	68b9      	ldr	r1, [r7, #8]
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f000 f9c9 	bl	8003338 <TIM_OC2_SetConfig>
      break;
 8002fa6:	e010      	b.n	8002fca <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	68b9      	ldr	r1, [r7, #8]
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f000 fa2e 	bl	8003410 <TIM_OC3_SetConfig>
      break;
 8002fb4:	e009      	b.n	8002fca <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	68b9      	ldr	r1, [r7, #8]
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f000 fa91 	bl	80034e4 <TIM_OC4_SetConfig>
      break;
 8002fc2:	e002      	b.n	8002fca <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	75fb      	strb	r3, [r7, #23]
      break;
 8002fc8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002fd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3718      	adds	r7, #24
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b084      	sub	sp, #16
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d101      	bne.n	8002ff8 <HAL_TIM_ConfigClockSource+0x1c>
 8002ff4:	2302      	movs	r3, #2
 8002ff6:	e0b4      	b.n	8003162 <HAL_TIM_ConfigClockSource+0x186>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2202      	movs	r2, #2
 8003004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003016:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800301e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	68ba      	ldr	r2, [r7, #8]
 8003026:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003030:	d03e      	beq.n	80030b0 <HAL_TIM_ConfigClockSource+0xd4>
 8003032:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003036:	f200 8087 	bhi.w	8003148 <HAL_TIM_ConfigClockSource+0x16c>
 800303a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800303e:	f000 8086 	beq.w	800314e <HAL_TIM_ConfigClockSource+0x172>
 8003042:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003046:	d87f      	bhi.n	8003148 <HAL_TIM_ConfigClockSource+0x16c>
 8003048:	2b70      	cmp	r3, #112	; 0x70
 800304a:	d01a      	beq.n	8003082 <HAL_TIM_ConfigClockSource+0xa6>
 800304c:	2b70      	cmp	r3, #112	; 0x70
 800304e:	d87b      	bhi.n	8003148 <HAL_TIM_ConfigClockSource+0x16c>
 8003050:	2b60      	cmp	r3, #96	; 0x60
 8003052:	d050      	beq.n	80030f6 <HAL_TIM_ConfigClockSource+0x11a>
 8003054:	2b60      	cmp	r3, #96	; 0x60
 8003056:	d877      	bhi.n	8003148 <HAL_TIM_ConfigClockSource+0x16c>
 8003058:	2b50      	cmp	r3, #80	; 0x50
 800305a:	d03c      	beq.n	80030d6 <HAL_TIM_ConfigClockSource+0xfa>
 800305c:	2b50      	cmp	r3, #80	; 0x50
 800305e:	d873      	bhi.n	8003148 <HAL_TIM_ConfigClockSource+0x16c>
 8003060:	2b40      	cmp	r3, #64	; 0x40
 8003062:	d058      	beq.n	8003116 <HAL_TIM_ConfigClockSource+0x13a>
 8003064:	2b40      	cmp	r3, #64	; 0x40
 8003066:	d86f      	bhi.n	8003148 <HAL_TIM_ConfigClockSource+0x16c>
 8003068:	2b30      	cmp	r3, #48	; 0x30
 800306a:	d064      	beq.n	8003136 <HAL_TIM_ConfigClockSource+0x15a>
 800306c:	2b30      	cmp	r3, #48	; 0x30
 800306e:	d86b      	bhi.n	8003148 <HAL_TIM_ConfigClockSource+0x16c>
 8003070:	2b20      	cmp	r3, #32
 8003072:	d060      	beq.n	8003136 <HAL_TIM_ConfigClockSource+0x15a>
 8003074:	2b20      	cmp	r3, #32
 8003076:	d867      	bhi.n	8003148 <HAL_TIM_ConfigClockSource+0x16c>
 8003078:	2b00      	cmp	r3, #0
 800307a:	d05c      	beq.n	8003136 <HAL_TIM_ConfigClockSource+0x15a>
 800307c:	2b10      	cmp	r3, #16
 800307e:	d05a      	beq.n	8003136 <HAL_TIM_ConfigClockSource+0x15a>
 8003080:	e062      	b.n	8003148 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6818      	ldr	r0, [r3, #0]
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	6899      	ldr	r1, [r3, #8]
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	685a      	ldr	r2, [r3, #4]
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	f000 faf1 	bl	8003678 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80030a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	68ba      	ldr	r2, [r7, #8]
 80030ac:	609a      	str	r2, [r3, #8]
      break;
 80030ae:	e04f      	b.n	8003150 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6818      	ldr	r0, [r3, #0]
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	6899      	ldr	r1, [r3, #8]
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	685a      	ldr	r2, [r3, #4]
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	f000 fada 	bl	8003678 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	689a      	ldr	r2, [r3, #8]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030d2:	609a      	str	r2, [r3, #8]
      break;
 80030d4:	e03c      	b.n	8003150 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6818      	ldr	r0, [r3, #0]
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	6859      	ldr	r1, [r3, #4]
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	461a      	mov	r2, r3
 80030e4:	f000 fa4e 	bl	8003584 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2150      	movs	r1, #80	; 0x50
 80030ee:	4618      	mov	r0, r3
 80030f0:	f000 faa7 	bl	8003642 <TIM_ITRx_SetConfig>
      break;
 80030f4:	e02c      	b.n	8003150 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6818      	ldr	r0, [r3, #0]
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	6859      	ldr	r1, [r3, #4]
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	461a      	mov	r2, r3
 8003104:	f000 fa6d 	bl	80035e2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2160      	movs	r1, #96	; 0x60
 800310e:	4618      	mov	r0, r3
 8003110:	f000 fa97 	bl	8003642 <TIM_ITRx_SetConfig>
      break;
 8003114:	e01c      	b.n	8003150 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6818      	ldr	r0, [r3, #0]
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	6859      	ldr	r1, [r3, #4]
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	461a      	mov	r2, r3
 8003124:	f000 fa2e 	bl	8003584 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2140      	movs	r1, #64	; 0x40
 800312e:	4618      	mov	r0, r3
 8003130:	f000 fa87 	bl	8003642 <TIM_ITRx_SetConfig>
      break;
 8003134:	e00c      	b.n	8003150 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4619      	mov	r1, r3
 8003140:	4610      	mov	r0, r2
 8003142:	f000 fa7e 	bl	8003642 <TIM_ITRx_SetConfig>
      break;
 8003146:	e003      	b.n	8003150 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	73fb      	strb	r3, [r7, #15]
      break;
 800314c:	e000      	b.n	8003150 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800314e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003160:	7bfb      	ldrb	r3, [r7, #15]
}
 8003162:	4618      	mov	r0, r3
 8003164:	3710      	adds	r7, #16
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
	...

0800316c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800316c:	b480      	push	{r7}
 800316e:	b085      	sub	sp, #20
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	4a34      	ldr	r2, [pc, #208]	; (8003250 <TIM_Base_SetConfig+0xe4>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d00f      	beq.n	80031a4 <TIM_Base_SetConfig+0x38>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800318a:	d00b      	beq.n	80031a4 <TIM_Base_SetConfig+0x38>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	4a31      	ldr	r2, [pc, #196]	; (8003254 <TIM_Base_SetConfig+0xe8>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d007      	beq.n	80031a4 <TIM_Base_SetConfig+0x38>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	4a30      	ldr	r2, [pc, #192]	; (8003258 <TIM_Base_SetConfig+0xec>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d003      	beq.n	80031a4 <TIM_Base_SetConfig+0x38>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	4a2f      	ldr	r2, [pc, #188]	; (800325c <TIM_Base_SetConfig+0xf0>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d108      	bne.n	80031b6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	68fa      	ldr	r2, [r7, #12]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a25      	ldr	r2, [pc, #148]	; (8003250 <TIM_Base_SetConfig+0xe4>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d01b      	beq.n	80031f6 <TIM_Base_SetConfig+0x8a>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031c4:	d017      	beq.n	80031f6 <TIM_Base_SetConfig+0x8a>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a22      	ldr	r2, [pc, #136]	; (8003254 <TIM_Base_SetConfig+0xe8>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d013      	beq.n	80031f6 <TIM_Base_SetConfig+0x8a>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a21      	ldr	r2, [pc, #132]	; (8003258 <TIM_Base_SetConfig+0xec>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d00f      	beq.n	80031f6 <TIM_Base_SetConfig+0x8a>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a20      	ldr	r2, [pc, #128]	; (800325c <TIM_Base_SetConfig+0xf0>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d00b      	beq.n	80031f6 <TIM_Base_SetConfig+0x8a>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a1f      	ldr	r2, [pc, #124]	; (8003260 <TIM_Base_SetConfig+0xf4>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d007      	beq.n	80031f6 <TIM_Base_SetConfig+0x8a>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a1e      	ldr	r2, [pc, #120]	; (8003264 <TIM_Base_SetConfig+0xf8>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d003      	beq.n	80031f6 <TIM_Base_SetConfig+0x8a>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a1d      	ldr	r2, [pc, #116]	; (8003268 <TIM_Base_SetConfig+0xfc>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d108      	bne.n	8003208 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	68db      	ldr	r3, [r3, #12]
 8003202:	68fa      	ldr	r2, [r7, #12]
 8003204:	4313      	orrs	r3, r2
 8003206:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	695b      	ldr	r3, [r3, #20]
 8003212:	4313      	orrs	r3, r2
 8003214:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	68fa      	ldr	r2, [r7, #12]
 800321a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	689a      	ldr	r2, [r3, #8]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4a08      	ldr	r2, [pc, #32]	; (8003250 <TIM_Base_SetConfig+0xe4>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d103      	bne.n	800323c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	691a      	ldr	r2, [r3, #16]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	615a      	str	r2, [r3, #20]
}
 8003242:	bf00      	nop
 8003244:	3714      	adds	r7, #20
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	40010000 	.word	0x40010000
 8003254:	40000400 	.word	0x40000400
 8003258:	40000800 	.word	0x40000800
 800325c:	40000c00 	.word	0x40000c00
 8003260:	40014000 	.word	0x40014000
 8003264:	40014400 	.word	0x40014400
 8003268:	40014800 	.word	0x40014800

0800326c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800326c:	b480      	push	{r7}
 800326e:	b087      	sub	sp, #28
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a1b      	ldr	r3, [r3, #32]
 800327a:	f023 0201 	bic.w	r2, r3, #1
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a1b      	ldr	r3, [r3, #32]
 8003286:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	699b      	ldr	r3, [r3, #24]
 8003292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800329a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f023 0303 	bic.w	r3, r3, #3
 80032a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	68fa      	ldr	r2, [r7, #12]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	f023 0302 	bic.w	r3, r3, #2
 80032b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	697a      	ldr	r2, [r7, #20]
 80032bc:	4313      	orrs	r3, r2
 80032be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	4a1c      	ldr	r2, [pc, #112]	; (8003334 <TIM_OC1_SetConfig+0xc8>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d10c      	bne.n	80032e2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	f023 0308 	bic.w	r3, r3, #8
 80032ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	697a      	ldr	r2, [r7, #20]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	f023 0304 	bic.w	r3, r3, #4
 80032e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a13      	ldr	r2, [pc, #76]	; (8003334 <TIM_OC1_SetConfig+0xc8>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d111      	bne.n	800330e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80032f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	695b      	ldr	r3, [r3, #20]
 80032fe:	693a      	ldr	r2, [r7, #16]
 8003300:	4313      	orrs	r3, r2
 8003302:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	699b      	ldr	r3, [r3, #24]
 8003308:	693a      	ldr	r2, [r7, #16]
 800330a:	4313      	orrs	r3, r2
 800330c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	693a      	ldr	r2, [r7, #16]
 8003312:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	68fa      	ldr	r2, [r7, #12]
 8003318:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	685a      	ldr	r2, [r3, #4]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	697a      	ldr	r2, [r7, #20]
 8003326:	621a      	str	r2, [r3, #32]
}
 8003328:	bf00      	nop
 800332a:	371c      	adds	r7, #28
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr
 8003334:	40010000 	.word	0x40010000

08003338 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003338:	b480      	push	{r7}
 800333a:	b087      	sub	sp, #28
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6a1b      	ldr	r3, [r3, #32]
 8003346:	f023 0210 	bic.w	r2, r3, #16
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a1b      	ldr	r3, [r3, #32]
 8003352:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	699b      	ldr	r3, [r3, #24]
 800335e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003366:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800336e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	021b      	lsls	r3, r3, #8
 8003376:	68fa      	ldr	r2, [r7, #12]
 8003378:	4313      	orrs	r3, r2
 800337a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	f023 0320 	bic.w	r3, r3, #32
 8003382:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	011b      	lsls	r3, r3, #4
 800338a:	697a      	ldr	r2, [r7, #20]
 800338c:	4313      	orrs	r3, r2
 800338e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	4a1e      	ldr	r2, [pc, #120]	; (800340c <TIM_OC2_SetConfig+0xd4>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d10d      	bne.n	80033b4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800339e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	011b      	lsls	r3, r3, #4
 80033a6:	697a      	ldr	r2, [r7, #20]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033b2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	4a15      	ldr	r2, [pc, #84]	; (800340c <TIM_OC2_SetConfig+0xd4>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d113      	bne.n	80033e4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80033c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80033ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	695b      	ldr	r3, [r3, #20]
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	693a      	ldr	r2, [r7, #16]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	699b      	ldr	r3, [r3, #24]
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	693a      	ldr	r2, [r7, #16]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	693a      	ldr	r2, [r7, #16]
 80033e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	68fa      	ldr	r2, [r7, #12]
 80033ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	685a      	ldr	r2, [r3, #4]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	697a      	ldr	r2, [r7, #20]
 80033fc:	621a      	str	r2, [r3, #32]
}
 80033fe:	bf00      	nop
 8003400:	371c      	adds	r7, #28
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	40010000 	.word	0x40010000

08003410 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003410:	b480      	push	{r7}
 8003412:	b087      	sub	sp, #28
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6a1b      	ldr	r3, [r3, #32]
 800341e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a1b      	ldr	r3, [r3, #32]
 800342a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	69db      	ldr	r3, [r3, #28]
 8003436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800343e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f023 0303 	bic.w	r3, r3, #3
 8003446:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	68fa      	ldr	r2, [r7, #12]
 800344e:	4313      	orrs	r3, r2
 8003450:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003458:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	021b      	lsls	r3, r3, #8
 8003460:	697a      	ldr	r2, [r7, #20]
 8003462:	4313      	orrs	r3, r2
 8003464:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a1d      	ldr	r2, [pc, #116]	; (80034e0 <TIM_OC3_SetConfig+0xd0>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d10d      	bne.n	800348a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003474:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	021b      	lsls	r3, r3, #8
 800347c:	697a      	ldr	r2, [r7, #20]
 800347e:	4313      	orrs	r3, r2
 8003480:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003488:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a14      	ldr	r2, [pc, #80]	; (80034e0 <TIM_OC3_SetConfig+0xd0>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d113      	bne.n	80034ba <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003498:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80034a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	695b      	ldr	r3, [r3, #20]
 80034a6:	011b      	lsls	r3, r3, #4
 80034a8:	693a      	ldr	r2, [r7, #16]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	699b      	ldr	r3, [r3, #24]
 80034b2:	011b      	lsls	r3, r3, #4
 80034b4:	693a      	ldr	r2, [r7, #16]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	693a      	ldr	r2, [r7, #16]
 80034be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	68fa      	ldr	r2, [r7, #12]
 80034c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	685a      	ldr	r2, [r3, #4]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	697a      	ldr	r2, [r7, #20]
 80034d2:	621a      	str	r2, [r3, #32]
}
 80034d4:	bf00      	nop
 80034d6:	371c      	adds	r7, #28
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr
 80034e0:	40010000 	.word	0x40010000

080034e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b087      	sub	sp, #28
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a1b      	ldr	r3, [r3, #32]
 80034f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a1b      	ldr	r3, [r3, #32]
 80034fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	69db      	ldr	r3, [r3, #28]
 800350a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003512:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800351a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	021b      	lsls	r3, r3, #8
 8003522:	68fa      	ldr	r2, [r7, #12]
 8003524:	4313      	orrs	r3, r2
 8003526:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800352e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	031b      	lsls	r3, r3, #12
 8003536:	693a      	ldr	r2, [r7, #16]
 8003538:	4313      	orrs	r3, r2
 800353a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4a10      	ldr	r2, [pc, #64]	; (8003580 <TIM_OC4_SetConfig+0x9c>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d109      	bne.n	8003558 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800354a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	695b      	ldr	r3, [r3, #20]
 8003550:	019b      	lsls	r3, r3, #6
 8003552:	697a      	ldr	r2, [r7, #20]
 8003554:	4313      	orrs	r3, r2
 8003556:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	697a      	ldr	r2, [r7, #20]
 800355c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	68fa      	ldr	r2, [r7, #12]
 8003562:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	685a      	ldr	r2, [r3, #4]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	693a      	ldr	r2, [r7, #16]
 8003570:	621a      	str	r2, [r3, #32]
}
 8003572:	bf00      	nop
 8003574:	371c      	adds	r7, #28
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr
 800357e:	bf00      	nop
 8003580:	40010000 	.word	0x40010000

08003584 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003584:	b480      	push	{r7}
 8003586:	b087      	sub	sp, #28
 8003588:	af00      	add	r7, sp, #0
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6a1b      	ldr	r3, [r3, #32]
 8003594:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6a1b      	ldr	r3, [r3, #32]
 800359a:	f023 0201 	bic.w	r2, r3, #1
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	699b      	ldr	r3, [r3, #24]
 80035a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	011b      	lsls	r3, r3, #4
 80035b4:	693a      	ldr	r2, [r7, #16]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	f023 030a 	bic.w	r3, r3, #10
 80035c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80035c2:	697a      	ldr	r2, [r7, #20]
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	693a      	ldr	r2, [r7, #16]
 80035ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	697a      	ldr	r2, [r7, #20]
 80035d4:	621a      	str	r2, [r3, #32]
}
 80035d6:	bf00      	nop
 80035d8:	371c      	adds	r7, #28
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr

080035e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035e2:	b480      	push	{r7}
 80035e4:	b087      	sub	sp, #28
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	60f8      	str	r0, [r7, #12]
 80035ea:	60b9      	str	r1, [r7, #8]
 80035ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	6a1b      	ldr	r3, [r3, #32]
 80035f2:	f023 0210 	bic.w	r2, r3, #16
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	699b      	ldr	r3, [r3, #24]
 80035fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6a1b      	ldr	r3, [r3, #32]
 8003604:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800360c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	031b      	lsls	r3, r3, #12
 8003612:	697a      	ldr	r2, [r7, #20]
 8003614:	4313      	orrs	r3, r2
 8003616:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800361e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	011b      	lsls	r3, r3, #4
 8003624:	693a      	ldr	r2, [r7, #16]
 8003626:	4313      	orrs	r3, r2
 8003628:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	697a      	ldr	r2, [r7, #20]
 800362e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	693a      	ldr	r2, [r7, #16]
 8003634:	621a      	str	r2, [r3, #32]
}
 8003636:	bf00      	nop
 8003638:	371c      	adds	r7, #28
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr

08003642 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003642:	b480      	push	{r7}
 8003644:	b085      	sub	sp, #20
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
 800364a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003658:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800365a:	683a      	ldr	r2, [r7, #0]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	4313      	orrs	r3, r2
 8003660:	f043 0307 	orr.w	r3, r3, #7
 8003664:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	68fa      	ldr	r2, [r7, #12]
 800366a:	609a      	str	r2, [r3, #8]
}
 800366c:	bf00      	nop
 800366e:	3714      	adds	r7, #20
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr

08003678 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003678:	b480      	push	{r7}
 800367a:	b087      	sub	sp, #28
 800367c:	af00      	add	r7, sp, #0
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	60b9      	str	r1, [r7, #8]
 8003682:	607a      	str	r2, [r7, #4]
 8003684:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003692:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	021a      	lsls	r2, r3, #8
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	431a      	orrs	r2, r3
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	4313      	orrs	r3, r2
 80036a0:	697a      	ldr	r2, [r7, #20]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	697a      	ldr	r2, [r7, #20]
 80036aa:	609a      	str	r2, [r3, #8]
}
 80036ac:	bf00      	nop
 80036ae:	371c      	adds	r7, #28
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr

080036b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b085      	sub	sp, #20
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d101      	bne.n	80036d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80036cc:	2302      	movs	r3, #2
 80036ce:	e050      	b.n	8003772 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2202      	movs	r2, #2
 80036dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	68fa      	ldr	r2, [r7, #12]
 80036fe:	4313      	orrs	r3, r2
 8003700:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	68fa      	ldr	r2, [r7, #12]
 8003708:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a1c      	ldr	r2, [pc, #112]	; (8003780 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d018      	beq.n	8003746 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800371c:	d013      	beq.n	8003746 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a18      	ldr	r2, [pc, #96]	; (8003784 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d00e      	beq.n	8003746 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a16      	ldr	r2, [pc, #88]	; (8003788 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d009      	beq.n	8003746 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a15      	ldr	r2, [pc, #84]	; (800378c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d004      	beq.n	8003746 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a13      	ldr	r2, [pc, #76]	; (8003790 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d10c      	bne.n	8003760 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800374c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	68ba      	ldr	r2, [r7, #8]
 8003754:	4313      	orrs	r3, r2
 8003756:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	68ba      	ldr	r2, [r7, #8]
 800375e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2200      	movs	r2, #0
 800376c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003770:	2300      	movs	r3, #0
}
 8003772:	4618      	mov	r0, r3
 8003774:	3714      	adds	r7, #20
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr
 800377e:	bf00      	nop
 8003780:	40010000 	.word	0x40010000
 8003784:	40000400 	.word	0x40000400
 8003788:	40000800 	.word	0x40000800
 800378c:	40000c00 	.word	0x40000c00
 8003790:	40014000 	.word	0x40014000

08003794 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b082      	sub	sp, #8
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d101      	bne.n	80037a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e03f      	b.n	8003826 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d106      	bne.n	80037c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f7fd feac 	bl	8001518 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2224      	movs	r2, #36	; 0x24
 80037c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	68da      	ldr	r2, [r3, #12]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f000 fddb 	bl	8004394 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	691a      	ldr	r2, [r3, #16]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	695a      	ldr	r2, [r3, #20]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	68da      	ldr	r2, [r3, #12]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800380c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2220      	movs	r2, #32
 8003818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2220      	movs	r2, #32
 8003820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003824:	2300      	movs	r3, #0
}
 8003826:	4618      	mov	r0, r3
 8003828:	3708      	adds	r7, #8
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}

0800382e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800382e:	b580      	push	{r7, lr}
 8003830:	b08a      	sub	sp, #40	; 0x28
 8003832:	af02      	add	r7, sp, #8
 8003834:	60f8      	str	r0, [r7, #12]
 8003836:	60b9      	str	r1, [r7, #8]
 8003838:	603b      	str	r3, [r7, #0]
 800383a:	4613      	mov	r3, r2
 800383c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800383e:	2300      	movs	r3, #0
 8003840:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003848:	b2db      	uxtb	r3, r3
 800384a:	2b20      	cmp	r3, #32
 800384c:	d17c      	bne.n	8003948 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d002      	beq.n	800385a <HAL_UART_Transmit+0x2c>
 8003854:	88fb      	ldrh	r3, [r7, #6]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d101      	bne.n	800385e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e075      	b.n	800394a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003864:	2b01      	cmp	r3, #1
 8003866:	d101      	bne.n	800386c <HAL_UART_Transmit+0x3e>
 8003868:	2302      	movs	r3, #2
 800386a:	e06e      	b.n	800394a <HAL_UART_Transmit+0x11c>
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2200      	movs	r2, #0
 8003878:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2221      	movs	r2, #33	; 0x21
 800387e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003882:	f7fd ffdb 	bl	800183c <HAL_GetTick>
 8003886:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	88fa      	ldrh	r2, [r7, #6]
 800388c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	88fa      	ldrh	r2, [r7, #6]
 8003892:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800389c:	d108      	bne.n	80038b0 <HAL_UART_Transmit+0x82>
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d104      	bne.n	80038b0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80038a6:	2300      	movs	r3, #0
 80038a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	61bb      	str	r3, [r7, #24]
 80038ae:	e003      	b.n	80038b8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038b4:	2300      	movs	r3, #0
 80038b6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80038c0:	e02a      	b.n	8003918 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	9300      	str	r3, [sp, #0]
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	2200      	movs	r2, #0
 80038ca:	2180      	movs	r1, #128	; 0x80
 80038cc:	68f8      	ldr	r0, [r7, #12]
 80038ce:	f000 fb1f 	bl	8003f10 <UART_WaitOnFlagUntilTimeout>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d001      	beq.n	80038dc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80038d8:	2303      	movs	r3, #3
 80038da:	e036      	b.n	800394a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d10b      	bne.n	80038fa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038e2:	69bb      	ldr	r3, [r7, #24]
 80038e4:	881b      	ldrh	r3, [r3, #0]
 80038e6:	461a      	mov	r2, r3
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038f0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	3302      	adds	r3, #2
 80038f6:	61bb      	str	r3, [r7, #24]
 80038f8:	e007      	b.n	800390a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	781a      	ldrb	r2, [r3, #0]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	3301      	adds	r3, #1
 8003908:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800390e:	b29b      	uxth	r3, r3
 8003910:	3b01      	subs	r3, #1
 8003912:	b29a      	uxth	r2, r3
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800391c:	b29b      	uxth	r3, r3
 800391e:	2b00      	cmp	r3, #0
 8003920:	d1cf      	bne.n	80038c2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	9300      	str	r3, [sp, #0]
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	2200      	movs	r2, #0
 800392a:	2140      	movs	r1, #64	; 0x40
 800392c:	68f8      	ldr	r0, [r7, #12]
 800392e:	f000 faef 	bl	8003f10 <UART_WaitOnFlagUntilTimeout>
 8003932:	4603      	mov	r3, r0
 8003934:	2b00      	cmp	r3, #0
 8003936:	d001      	beq.n	800393c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003938:	2303      	movs	r3, #3
 800393a:	e006      	b.n	800394a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2220      	movs	r2, #32
 8003940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003944:	2300      	movs	r3, #0
 8003946:	e000      	b.n	800394a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003948:	2302      	movs	r3, #2
  }
}
 800394a:	4618      	mov	r0, r3
 800394c:	3720      	adds	r7, #32
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}

08003952 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003952:	b580      	push	{r7, lr}
 8003954:	b084      	sub	sp, #16
 8003956:	af00      	add	r7, sp, #0
 8003958:	60f8      	str	r0, [r7, #12]
 800395a:	60b9      	str	r1, [r7, #8]
 800395c:	4613      	mov	r3, r2
 800395e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003966:	b2db      	uxtb	r3, r3
 8003968:	2b20      	cmp	r3, #32
 800396a:	d11d      	bne.n	80039a8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d002      	beq.n	8003978 <HAL_UART_Receive_IT+0x26>
 8003972:	88fb      	ldrh	r3, [r7, #6]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d101      	bne.n	800397c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e016      	b.n	80039aa <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003982:	2b01      	cmp	r3, #1
 8003984:	d101      	bne.n	800398a <HAL_UART_Receive_IT+0x38>
 8003986:	2302      	movs	r3, #2
 8003988:	e00f      	b.n	80039aa <HAL_UART_Receive_IT+0x58>
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2201      	movs	r2, #1
 800398e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2200      	movs	r2, #0
 8003996:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003998:	88fb      	ldrh	r3, [r7, #6]
 800399a:	461a      	mov	r2, r3
 800399c:	68b9      	ldr	r1, [r7, #8]
 800399e:	68f8      	ldr	r0, [r7, #12]
 80039a0:	f000 fb24 	bl	8003fec <UART_Start_Receive_IT>
 80039a4:	4603      	mov	r3, r0
 80039a6:	e000      	b.n	80039aa <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80039a8:	2302      	movs	r3, #2
  }
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3710      	adds	r7, #16
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
	...

080039b4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b0ba      	sub	sp, #232	; 0xe8
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	695b      	ldr	r3, [r3, #20]
 80039d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80039da:	2300      	movs	r3, #0
 80039dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80039e0:	2300      	movs	r3, #0
 80039e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80039e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039ea:	f003 030f 	and.w	r3, r3, #15
 80039ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80039f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d10f      	bne.n	8003a1a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80039fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039fe:	f003 0320 	and.w	r3, r3, #32
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d009      	beq.n	8003a1a <HAL_UART_IRQHandler+0x66>
 8003a06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a0a:	f003 0320 	and.w	r3, r3, #32
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d003      	beq.n	8003a1a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f000 fc03 	bl	800421e <UART_Receive_IT>
      return;
 8003a18:	e256      	b.n	8003ec8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003a1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	f000 80de 	beq.w	8003be0 <HAL_UART_IRQHandler+0x22c>
 8003a24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a28:	f003 0301 	and.w	r3, r3, #1
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d106      	bne.n	8003a3e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003a30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a34:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	f000 80d1 	beq.w	8003be0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003a3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a42:	f003 0301 	and.w	r3, r3, #1
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d00b      	beq.n	8003a62 <HAL_UART_IRQHandler+0xae>
 8003a4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d005      	beq.n	8003a62 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5a:	f043 0201 	orr.w	r2, r3, #1
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a66:	f003 0304 	and.w	r3, r3, #4
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d00b      	beq.n	8003a86 <HAL_UART_IRQHandler+0xd2>
 8003a6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a72:	f003 0301 	and.w	r3, r3, #1
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d005      	beq.n	8003a86 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7e:	f043 0202 	orr.w	r2, r3, #2
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a8a:	f003 0302 	and.w	r3, r3, #2
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d00b      	beq.n	8003aaa <HAL_UART_IRQHandler+0xf6>
 8003a92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a96:	f003 0301 	and.w	r3, r3, #1
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d005      	beq.n	8003aaa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa2:	f043 0204 	orr.w	r2, r3, #4
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003aaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aae:	f003 0308 	and.w	r3, r3, #8
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d011      	beq.n	8003ada <HAL_UART_IRQHandler+0x126>
 8003ab6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003aba:	f003 0320 	and.w	r3, r3, #32
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d105      	bne.n	8003ace <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003ac2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ac6:	f003 0301 	and.w	r3, r3, #1
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d005      	beq.n	8003ada <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad2:	f043 0208 	orr.w	r2, r3, #8
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	f000 81ed 	beq.w	8003ebe <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ae4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ae8:	f003 0320 	and.w	r3, r3, #32
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d008      	beq.n	8003b02 <HAL_UART_IRQHandler+0x14e>
 8003af0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003af4:	f003 0320 	and.w	r3, r3, #32
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d002      	beq.n	8003b02 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f000 fb8e 	bl	800421e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	695b      	ldr	r3, [r3, #20]
 8003b08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b0c:	2b40      	cmp	r3, #64	; 0x40
 8003b0e:	bf0c      	ite	eq
 8003b10:	2301      	moveq	r3, #1
 8003b12:	2300      	movne	r3, #0
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1e:	f003 0308 	and.w	r3, r3, #8
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d103      	bne.n	8003b2e <HAL_UART_IRQHandler+0x17a>
 8003b26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d04f      	beq.n	8003bce <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f000 fa96 	bl	8004060 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	695b      	ldr	r3, [r3, #20]
 8003b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b3e:	2b40      	cmp	r3, #64	; 0x40
 8003b40:	d141      	bne.n	8003bc6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	3314      	adds	r3, #20
 8003b48:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003b50:	e853 3f00 	ldrex	r3, [r3]
 8003b54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003b58:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003b5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	3314      	adds	r3, #20
 8003b6a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003b6e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003b72:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b76:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003b7a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003b7e:	e841 2300 	strex	r3, r2, [r1]
 8003b82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003b86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d1d9      	bne.n	8003b42 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d013      	beq.n	8003bbe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b9a:	4a7d      	ldr	r2, [pc, #500]	; (8003d90 <HAL_UART_IRQHandler+0x3dc>)
 8003b9c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f7fe fa5d 	bl	8002062 <HAL_DMA_Abort_IT>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d016      	beq.n	8003bdc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003bb8:	4610      	mov	r0, r2
 8003bba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bbc:	e00e      	b.n	8003bdc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f000 f990 	bl	8003ee4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bc4:	e00a      	b.n	8003bdc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 f98c 	bl	8003ee4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bcc:	e006      	b.n	8003bdc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f000 f988 	bl	8003ee4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003bda:	e170      	b.n	8003ebe <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bdc:	bf00      	nop
    return;
 8003bde:	e16e      	b.n	8003ebe <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	f040 814a 	bne.w	8003e7e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003bea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bee:	f003 0310 	and.w	r3, r3, #16
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	f000 8143 	beq.w	8003e7e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003bf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bfc:	f003 0310 	and.w	r3, r3, #16
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	f000 813c 	beq.w	8003e7e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c06:	2300      	movs	r3, #0
 8003c08:	60bb      	str	r3, [r7, #8]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	60bb      	str	r3, [r7, #8]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	60bb      	str	r3, [r7, #8]
 8003c1a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	695b      	ldr	r3, [r3, #20]
 8003c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c26:	2b40      	cmp	r3, #64	; 0x40
 8003c28:	f040 80b4 	bne.w	8003d94 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003c38:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	f000 8140 	beq.w	8003ec2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003c46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	f080 8139 	bcs.w	8003ec2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003c56:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c5c:	69db      	ldr	r3, [r3, #28]
 8003c5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c62:	f000 8088 	beq.w	8003d76 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	330c      	adds	r3, #12
 8003c6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c70:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003c74:	e853 3f00 	ldrex	r3, [r3]
 8003c78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003c7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c84:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	330c      	adds	r3, #12
 8003c8e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003c92:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003c96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c9a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003c9e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003ca2:	e841 2300 	strex	r3, r2, [r1]
 8003ca6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003caa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d1d9      	bne.n	8003c66 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	3314      	adds	r3, #20
 8003cb8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cbc:	e853 3f00 	ldrex	r3, [r3]
 8003cc0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003cc2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003cc4:	f023 0301 	bic.w	r3, r3, #1
 8003cc8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	3314      	adds	r3, #20
 8003cd2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003cd6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003cda:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cdc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003cde:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003ce2:	e841 2300 	strex	r3, r2, [r1]
 8003ce6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003ce8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d1e1      	bne.n	8003cb2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	3314      	adds	r3, #20
 8003cf4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003cf8:	e853 3f00 	ldrex	r3, [r3]
 8003cfc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003cfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d04:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	3314      	adds	r3, #20
 8003d0e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003d12:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003d14:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d16:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003d18:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003d1a:	e841 2300 	strex	r3, r2, [r1]
 8003d1e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003d20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d1e3      	bne.n	8003cee <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2220      	movs	r2, #32
 8003d2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	330c      	adds	r3, #12
 8003d3a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d3e:	e853 3f00 	ldrex	r3, [r3]
 8003d42:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003d44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d46:	f023 0310 	bic.w	r3, r3, #16
 8003d4a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	330c      	adds	r3, #12
 8003d54:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003d58:	65ba      	str	r2, [r7, #88]	; 0x58
 8003d5a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d5c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003d5e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d60:	e841 2300 	strex	r3, r2, [r1]
 8003d64:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003d66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d1e3      	bne.n	8003d34 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d70:	4618      	mov	r0, r3
 8003d72:	f7fe f906 	bl	8001f82 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	4619      	mov	r1, r3
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f000 f8b6 	bl	8003ef8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003d8c:	e099      	b.n	8003ec2 <HAL_UART_IRQHandler+0x50e>
 8003d8e:	bf00      	nop
 8003d90:	08004127 	.word	0x08004127
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	f000 808b 	beq.w	8003ec6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003db0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	f000 8086 	beq.w	8003ec6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	330c      	adds	r3, #12
 8003dc0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dc4:	e853 3f00 	ldrex	r3, [r3]
 8003dc8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003dca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dcc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003dd0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	330c      	adds	r3, #12
 8003dda:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003dde:	647a      	str	r2, [r7, #68]	; 0x44
 8003de0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003de4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003de6:	e841 2300 	strex	r3, r2, [r1]
 8003dea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003dec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d1e3      	bne.n	8003dba <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	3314      	adds	r3, #20
 8003df8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfc:	e853 3f00 	ldrex	r3, [r3]
 8003e00:	623b      	str	r3, [r7, #32]
   return(result);
 8003e02:	6a3b      	ldr	r3, [r7, #32]
 8003e04:	f023 0301 	bic.w	r3, r3, #1
 8003e08:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	3314      	adds	r3, #20
 8003e12:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003e16:	633a      	str	r2, [r7, #48]	; 0x30
 8003e18:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e1e:	e841 2300 	strex	r3, r2, [r1]
 8003e22:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d1e3      	bne.n	8003df2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2220      	movs	r2, #32
 8003e2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	330c      	adds	r3, #12
 8003e3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	e853 3f00 	ldrex	r3, [r3]
 8003e46:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f023 0310 	bic.w	r3, r3, #16
 8003e4e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	330c      	adds	r3, #12
 8003e58:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003e5c:	61fa      	str	r2, [r7, #28]
 8003e5e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e60:	69b9      	ldr	r1, [r7, #24]
 8003e62:	69fa      	ldr	r2, [r7, #28]
 8003e64:	e841 2300 	strex	r3, r2, [r1]
 8003e68:	617b      	str	r3, [r7, #20]
   return(result);
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d1e3      	bne.n	8003e38 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003e70:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e74:	4619      	mov	r1, r3
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f000 f83e 	bl	8003ef8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e7c:	e023      	b.n	8003ec6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003e7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d009      	beq.n	8003e9e <HAL_UART_IRQHandler+0x4ea>
 8003e8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d003      	beq.n	8003e9e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f000 f959 	bl	800414e <UART_Transmit_IT>
    return;
 8003e9c:	e014      	b.n	8003ec8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003e9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d00e      	beq.n	8003ec8 <HAL_UART_IRQHandler+0x514>
 8003eaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d008      	beq.n	8003ec8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f000 f999 	bl	80041ee <UART_EndTransmit_IT>
    return;
 8003ebc:	e004      	b.n	8003ec8 <HAL_UART_IRQHandler+0x514>
    return;
 8003ebe:	bf00      	nop
 8003ec0:	e002      	b.n	8003ec8 <HAL_UART_IRQHandler+0x514>
      return;
 8003ec2:	bf00      	nop
 8003ec4:	e000      	b.n	8003ec8 <HAL_UART_IRQHandler+0x514>
      return;
 8003ec6:	bf00      	nop
  }
}
 8003ec8:	37e8      	adds	r7, #232	; 0xe8
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop

08003ed0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003ed8:	bf00      	nop
 8003eda:	370c      	adds	r7, #12
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003eec:	bf00      	nop
 8003eee:	370c      	adds	r7, #12
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr

08003ef8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	460b      	mov	r3, r1
 8003f02:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003f04:	bf00      	nop
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b090      	sub	sp, #64	; 0x40
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	60b9      	str	r1, [r7, #8]
 8003f1a:	603b      	str	r3, [r7, #0]
 8003f1c:	4613      	mov	r3, r2
 8003f1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f20:	e050      	b.n	8003fc4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f28:	d04c      	beq.n	8003fc4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003f2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d007      	beq.n	8003f40 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f30:	f7fd fc84 	bl	800183c <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d241      	bcs.n	8003fc4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	330c      	adds	r3, #12
 8003f46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f4a:	e853 3f00 	ldrex	r3, [r3]
 8003f4e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f52:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	330c      	adds	r3, #12
 8003f5e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f60:	637a      	str	r2, [r7, #52]	; 0x34
 8003f62:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f64:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f68:	e841 2300 	strex	r3, r2, [r1]
 8003f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d1e5      	bne.n	8003f40 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	3314      	adds	r3, #20
 8003f7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	e853 3f00 	ldrex	r3, [r3]
 8003f82:	613b      	str	r3, [r7, #16]
   return(result);
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	f023 0301 	bic.w	r3, r3, #1
 8003f8a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	3314      	adds	r3, #20
 8003f92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f94:	623a      	str	r2, [r7, #32]
 8003f96:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f98:	69f9      	ldr	r1, [r7, #28]
 8003f9a:	6a3a      	ldr	r2, [r7, #32]
 8003f9c:	e841 2300 	strex	r3, r2, [r1]
 8003fa0:	61bb      	str	r3, [r7, #24]
   return(result);
 8003fa2:	69bb      	ldr	r3, [r7, #24]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d1e5      	bne.n	8003f74 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2220      	movs	r2, #32
 8003fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2220      	movs	r2, #32
 8003fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	e00f      	b.n	8003fe4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	4013      	ands	r3, r2
 8003fce:	68ba      	ldr	r2, [r7, #8]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	bf0c      	ite	eq
 8003fd4:	2301      	moveq	r3, #1
 8003fd6:	2300      	movne	r3, #0
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	461a      	mov	r2, r3
 8003fdc:	79fb      	ldrb	r3, [r7, #7]
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d09f      	beq.n	8003f22 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003fe2:	2300      	movs	r3, #0
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3740      	adds	r7, #64	; 0x40
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}

08003fec <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b085      	sub	sp, #20
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	60f8      	str	r0, [r7, #12]
 8003ff4:	60b9      	str	r1, [r7, #8]
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	68ba      	ldr	r2, [r7, #8]
 8003ffe:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	88fa      	ldrh	r2, [r7, #6]
 8004004:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	88fa      	ldrh	r2, [r7, #6]
 800400a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2200      	movs	r2, #0
 8004010:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2222      	movs	r2, #34	; 0x22
 8004016:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2200      	movs	r2, #0
 800401e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	68da      	ldr	r2, [r3, #12]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004030:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	695a      	ldr	r2, [r3, #20]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f042 0201 	orr.w	r2, r2, #1
 8004040:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	68da      	ldr	r2, [r3, #12]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f042 0220 	orr.w	r2, r2, #32
 8004050:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004052:	2300      	movs	r3, #0
}
 8004054:	4618      	mov	r0, r3
 8004056:	3714      	adds	r7, #20
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr

08004060 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004060:	b480      	push	{r7}
 8004062:	b095      	sub	sp, #84	; 0x54
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	330c      	adds	r3, #12
 800406e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004072:	e853 3f00 	ldrex	r3, [r3]
 8004076:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800407a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800407e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	330c      	adds	r3, #12
 8004086:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004088:	643a      	str	r2, [r7, #64]	; 0x40
 800408a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800408c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800408e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004090:	e841 2300 	strex	r3, r2, [r1]
 8004094:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004098:	2b00      	cmp	r3, #0
 800409a:	d1e5      	bne.n	8004068 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	3314      	adds	r3, #20
 80040a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a4:	6a3b      	ldr	r3, [r7, #32]
 80040a6:	e853 3f00 	ldrex	r3, [r3]
 80040aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80040ac:	69fb      	ldr	r3, [r7, #28]
 80040ae:	f023 0301 	bic.w	r3, r3, #1
 80040b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	3314      	adds	r3, #20
 80040ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80040be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040c4:	e841 2300 	strex	r3, r2, [r1]
 80040c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80040ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d1e5      	bne.n	800409c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d119      	bne.n	800410c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	330c      	adds	r3, #12
 80040de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	e853 3f00 	ldrex	r3, [r3]
 80040e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	f023 0310 	bic.w	r3, r3, #16
 80040ee:	647b      	str	r3, [r7, #68]	; 0x44
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	330c      	adds	r3, #12
 80040f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80040f8:	61ba      	str	r2, [r7, #24]
 80040fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040fc:	6979      	ldr	r1, [r7, #20]
 80040fe:	69ba      	ldr	r2, [r7, #24]
 8004100:	e841 2300 	strex	r3, r2, [r1]
 8004104:	613b      	str	r3, [r7, #16]
   return(result);
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d1e5      	bne.n	80040d8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2220      	movs	r2, #32
 8004110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	631a      	str	r2, [r3, #48]	; 0x30
}
 800411a:	bf00      	nop
 800411c:	3754      	adds	r7, #84	; 0x54
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr

08004126 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004126:	b580      	push	{r7, lr}
 8004128:	b084      	sub	sp, #16
 800412a:	af00      	add	r7, sp, #0
 800412c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004132:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2200      	movs	r2, #0
 8004138:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2200      	movs	r2, #0
 800413e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004140:	68f8      	ldr	r0, [r7, #12]
 8004142:	f7ff fecf 	bl	8003ee4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004146:	bf00      	nop
 8004148:	3710      	adds	r7, #16
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}

0800414e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800414e:	b480      	push	{r7}
 8004150:	b085      	sub	sp, #20
 8004152:	af00      	add	r7, sp, #0
 8004154:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800415c:	b2db      	uxtb	r3, r3
 800415e:	2b21      	cmp	r3, #33	; 0x21
 8004160:	d13e      	bne.n	80041e0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800416a:	d114      	bne.n	8004196 <UART_Transmit_IT+0x48>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	691b      	ldr	r3, [r3, #16]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d110      	bne.n	8004196 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6a1b      	ldr	r3, [r3, #32]
 8004178:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	881b      	ldrh	r3, [r3, #0]
 800417e:	461a      	mov	r2, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004188:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a1b      	ldr	r3, [r3, #32]
 800418e:	1c9a      	adds	r2, r3, #2
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	621a      	str	r2, [r3, #32]
 8004194:	e008      	b.n	80041a8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a1b      	ldr	r3, [r3, #32]
 800419a:	1c59      	adds	r1, r3, #1
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	6211      	str	r1, [r2, #32]
 80041a0:	781a      	ldrb	r2, [r3, #0]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	3b01      	subs	r3, #1
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	4619      	mov	r1, r3
 80041b6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d10f      	bne.n	80041dc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	68da      	ldr	r2, [r3, #12]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041ca:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68da      	ldr	r2, [r3, #12]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041da:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80041dc:	2300      	movs	r3, #0
 80041de:	e000      	b.n	80041e2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80041e0:	2302      	movs	r3, #2
  }
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3714      	adds	r7, #20
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr

080041ee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80041ee:	b580      	push	{r7, lr}
 80041f0:	b082      	sub	sp, #8
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	68da      	ldr	r2, [r3, #12]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004204:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2220      	movs	r2, #32
 800420a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f7ff fe5e 	bl	8003ed0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004214:	2300      	movs	r3, #0
}
 8004216:	4618      	mov	r0, r3
 8004218:	3708      	adds	r7, #8
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}

0800421e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800421e:	b580      	push	{r7, lr}
 8004220:	b08c      	sub	sp, #48	; 0x30
 8004222:	af00      	add	r7, sp, #0
 8004224:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800422c:	b2db      	uxtb	r3, r3
 800422e:	2b22      	cmp	r3, #34	; 0x22
 8004230:	f040 80ab 	bne.w	800438a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800423c:	d117      	bne.n	800426e <UART_Receive_IT+0x50>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	691b      	ldr	r3, [r3, #16]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d113      	bne.n	800426e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004246:	2300      	movs	r3, #0
 8004248:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800424e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	b29b      	uxth	r3, r3
 8004258:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800425c:	b29a      	uxth	r2, r3
 800425e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004260:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004266:	1c9a      	adds	r2, r3, #2
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	629a      	str	r2, [r3, #40]	; 0x28
 800426c:	e026      	b.n	80042bc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004272:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004274:	2300      	movs	r3, #0
 8004276:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004280:	d007      	beq.n	8004292 <UART_Receive_IT+0x74>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d10a      	bne.n	80042a0 <UART_Receive_IT+0x82>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d106      	bne.n	80042a0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	b2da      	uxtb	r2, r3
 800429a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800429c:	701a      	strb	r2, [r3, #0]
 800429e:	e008      	b.n	80042b2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042ac:	b2da      	uxtb	r2, r3
 80042ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042b0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042b6:	1c5a      	adds	r2, r3, #1
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	3b01      	subs	r3, #1
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	4619      	mov	r1, r3
 80042ca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d15a      	bne.n	8004386 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	68da      	ldr	r2, [r3, #12]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f022 0220 	bic.w	r2, r2, #32
 80042de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	68da      	ldr	r2, [r3, #12]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	695a      	ldr	r2, [r3, #20]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f022 0201 	bic.w	r2, r2, #1
 80042fe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2220      	movs	r2, #32
 8004304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800430c:	2b01      	cmp	r3, #1
 800430e:	d135      	bne.n	800437c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2200      	movs	r2, #0
 8004314:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	330c      	adds	r3, #12
 800431c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	e853 3f00 	ldrex	r3, [r3]
 8004324:	613b      	str	r3, [r7, #16]
   return(result);
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	f023 0310 	bic.w	r3, r3, #16
 800432c:	627b      	str	r3, [r7, #36]	; 0x24
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	330c      	adds	r3, #12
 8004334:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004336:	623a      	str	r2, [r7, #32]
 8004338:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800433a:	69f9      	ldr	r1, [r7, #28]
 800433c:	6a3a      	ldr	r2, [r7, #32]
 800433e:	e841 2300 	strex	r3, r2, [r1]
 8004342:	61bb      	str	r3, [r7, #24]
   return(result);
 8004344:	69bb      	ldr	r3, [r7, #24]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d1e5      	bne.n	8004316 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 0310 	and.w	r3, r3, #16
 8004354:	2b10      	cmp	r3, #16
 8004356:	d10a      	bne.n	800436e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004358:	2300      	movs	r3, #0
 800435a:	60fb      	str	r3, [r7, #12]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	60fb      	str	r3, [r7, #12]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	60fb      	str	r3, [r7, #12]
 800436c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004372:	4619      	mov	r1, r3
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f7ff fdbf 	bl	8003ef8 <HAL_UARTEx_RxEventCallback>
 800437a:	e002      	b.n	8004382 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f7fc ffd3 	bl	8001328 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004382:	2300      	movs	r3, #0
 8004384:	e002      	b.n	800438c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004386:	2300      	movs	r3, #0
 8004388:	e000      	b.n	800438c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800438a:	2302      	movs	r3, #2
  }
}
 800438c:	4618      	mov	r0, r3
 800438e:	3730      	adds	r7, #48	; 0x30
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}

08004394 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004398:	b09f      	sub	sp, #124	; 0x7c
 800439a:	af00      	add	r7, sp, #0
 800439c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800439e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	691b      	ldr	r3, [r3, #16]
 80043a4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80043a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043aa:	68d9      	ldr	r1, [r3, #12]
 80043ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	ea40 0301 	orr.w	r3, r0, r1
 80043b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80043b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043b8:	689a      	ldr	r2, [r3, #8]
 80043ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043bc:	691b      	ldr	r3, [r3, #16]
 80043be:	431a      	orrs	r2, r3
 80043c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043c2:	695b      	ldr	r3, [r3, #20]
 80043c4:	431a      	orrs	r2, r3
 80043c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043c8:	69db      	ldr	r3, [r3, #28]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80043ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80043d8:	f021 010c 	bic.w	r1, r1, #12
 80043dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80043e2:	430b      	orrs	r3, r1
 80043e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80043e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	695b      	ldr	r3, [r3, #20]
 80043ec:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80043f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043f2:	6999      	ldr	r1, [r3, #24]
 80043f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	ea40 0301 	orr.w	r3, r0, r1
 80043fc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80043fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	4bc5      	ldr	r3, [pc, #788]	; (8004718 <UART_SetConfig+0x384>)
 8004404:	429a      	cmp	r2, r3
 8004406:	d004      	beq.n	8004412 <UART_SetConfig+0x7e>
 8004408:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	4bc3      	ldr	r3, [pc, #780]	; (800471c <UART_SetConfig+0x388>)
 800440e:	429a      	cmp	r2, r3
 8004410:	d103      	bne.n	800441a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004412:	f7fe fc79 	bl	8002d08 <HAL_RCC_GetPCLK2Freq>
 8004416:	6778      	str	r0, [r7, #116]	; 0x74
 8004418:	e002      	b.n	8004420 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800441a:	f7fe fc61 	bl	8002ce0 <HAL_RCC_GetPCLK1Freq>
 800441e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004420:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004422:	69db      	ldr	r3, [r3, #28]
 8004424:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004428:	f040 80b6 	bne.w	8004598 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800442c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800442e:	461c      	mov	r4, r3
 8004430:	f04f 0500 	mov.w	r5, #0
 8004434:	4622      	mov	r2, r4
 8004436:	462b      	mov	r3, r5
 8004438:	1891      	adds	r1, r2, r2
 800443a:	6439      	str	r1, [r7, #64]	; 0x40
 800443c:	415b      	adcs	r3, r3
 800443e:	647b      	str	r3, [r7, #68]	; 0x44
 8004440:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004444:	1912      	adds	r2, r2, r4
 8004446:	eb45 0303 	adc.w	r3, r5, r3
 800444a:	f04f 0000 	mov.w	r0, #0
 800444e:	f04f 0100 	mov.w	r1, #0
 8004452:	00d9      	lsls	r1, r3, #3
 8004454:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004458:	00d0      	lsls	r0, r2, #3
 800445a:	4602      	mov	r2, r0
 800445c:	460b      	mov	r3, r1
 800445e:	1911      	adds	r1, r2, r4
 8004460:	6639      	str	r1, [r7, #96]	; 0x60
 8004462:	416b      	adcs	r3, r5
 8004464:	667b      	str	r3, [r7, #100]	; 0x64
 8004466:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	461a      	mov	r2, r3
 800446c:	f04f 0300 	mov.w	r3, #0
 8004470:	1891      	adds	r1, r2, r2
 8004472:	63b9      	str	r1, [r7, #56]	; 0x38
 8004474:	415b      	adcs	r3, r3
 8004476:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004478:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800447c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004480:	f7fb ff16 	bl	80002b0 <__aeabi_uldivmod>
 8004484:	4602      	mov	r2, r0
 8004486:	460b      	mov	r3, r1
 8004488:	4ba5      	ldr	r3, [pc, #660]	; (8004720 <UART_SetConfig+0x38c>)
 800448a:	fba3 2302 	umull	r2, r3, r3, r2
 800448e:	095b      	lsrs	r3, r3, #5
 8004490:	011e      	lsls	r6, r3, #4
 8004492:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004494:	461c      	mov	r4, r3
 8004496:	f04f 0500 	mov.w	r5, #0
 800449a:	4622      	mov	r2, r4
 800449c:	462b      	mov	r3, r5
 800449e:	1891      	adds	r1, r2, r2
 80044a0:	6339      	str	r1, [r7, #48]	; 0x30
 80044a2:	415b      	adcs	r3, r3
 80044a4:	637b      	str	r3, [r7, #52]	; 0x34
 80044a6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80044aa:	1912      	adds	r2, r2, r4
 80044ac:	eb45 0303 	adc.w	r3, r5, r3
 80044b0:	f04f 0000 	mov.w	r0, #0
 80044b4:	f04f 0100 	mov.w	r1, #0
 80044b8:	00d9      	lsls	r1, r3, #3
 80044ba:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80044be:	00d0      	lsls	r0, r2, #3
 80044c0:	4602      	mov	r2, r0
 80044c2:	460b      	mov	r3, r1
 80044c4:	1911      	adds	r1, r2, r4
 80044c6:	65b9      	str	r1, [r7, #88]	; 0x58
 80044c8:	416b      	adcs	r3, r5
 80044ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	461a      	mov	r2, r3
 80044d2:	f04f 0300 	mov.w	r3, #0
 80044d6:	1891      	adds	r1, r2, r2
 80044d8:	62b9      	str	r1, [r7, #40]	; 0x28
 80044da:	415b      	adcs	r3, r3
 80044dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80044e2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80044e6:	f7fb fee3 	bl	80002b0 <__aeabi_uldivmod>
 80044ea:	4602      	mov	r2, r0
 80044ec:	460b      	mov	r3, r1
 80044ee:	4b8c      	ldr	r3, [pc, #560]	; (8004720 <UART_SetConfig+0x38c>)
 80044f0:	fba3 1302 	umull	r1, r3, r3, r2
 80044f4:	095b      	lsrs	r3, r3, #5
 80044f6:	2164      	movs	r1, #100	; 0x64
 80044f8:	fb01 f303 	mul.w	r3, r1, r3
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	00db      	lsls	r3, r3, #3
 8004500:	3332      	adds	r3, #50	; 0x32
 8004502:	4a87      	ldr	r2, [pc, #540]	; (8004720 <UART_SetConfig+0x38c>)
 8004504:	fba2 2303 	umull	r2, r3, r2, r3
 8004508:	095b      	lsrs	r3, r3, #5
 800450a:	005b      	lsls	r3, r3, #1
 800450c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004510:	441e      	add	r6, r3
 8004512:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004514:	4618      	mov	r0, r3
 8004516:	f04f 0100 	mov.w	r1, #0
 800451a:	4602      	mov	r2, r0
 800451c:	460b      	mov	r3, r1
 800451e:	1894      	adds	r4, r2, r2
 8004520:	623c      	str	r4, [r7, #32]
 8004522:	415b      	adcs	r3, r3
 8004524:	627b      	str	r3, [r7, #36]	; 0x24
 8004526:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800452a:	1812      	adds	r2, r2, r0
 800452c:	eb41 0303 	adc.w	r3, r1, r3
 8004530:	f04f 0400 	mov.w	r4, #0
 8004534:	f04f 0500 	mov.w	r5, #0
 8004538:	00dd      	lsls	r5, r3, #3
 800453a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800453e:	00d4      	lsls	r4, r2, #3
 8004540:	4622      	mov	r2, r4
 8004542:	462b      	mov	r3, r5
 8004544:	1814      	adds	r4, r2, r0
 8004546:	653c      	str	r4, [r7, #80]	; 0x50
 8004548:	414b      	adcs	r3, r1
 800454a:	657b      	str	r3, [r7, #84]	; 0x54
 800454c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	461a      	mov	r2, r3
 8004552:	f04f 0300 	mov.w	r3, #0
 8004556:	1891      	adds	r1, r2, r2
 8004558:	61b9      	str	r1, [r7, #24]
 800455a:	415b      	adcs	r3, r3
 800455c:	61fb      	str	r3, [r7, #28]
 800455e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004562:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004566:	f7fb fea3 	bl	80002b0 <__aeabi_uldivmod>
 800456a:	4602      	mov	r2, r0
 800456c:	460b      	mov	r3, r1
 800456e:	4b6c      	ldr	r3, [pc, #432]	; (8004720 <UART_SetConfig+0x38c>)
 8004570:	fba3 1302 	umull	r1, r3, r3, r2
 8004574:	095b      	lsrs	r3, r3, #5
 8004576:	2164      	movs	r1, #100	; 0x64
 8004578:	fb01 f303 	mul.w	r3, r1, r3
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	00db      	lsls	r3, r3, #3
 8004580:	3332      	adds	r3, #50	; 0x32
 8004582:	4a67      	ldr	r2, [pc, #412]	; (8004720 <UART_SetConfig+0x38c>)
 8004584:	fba2 2303 	umull	r2, r3, r2, r3
 8004588:	095b      	lsrs	r3, r3, #5
 800458a:	f003 0207 	and.w	r2, r3, #7
 800458e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4432      	add	r2, r6
 8004594:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004596:	e0b9      	b.n	800470c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004598:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800459a:	461c      	mov	r4, r3
 800459c:	f04f 0500 	mov.w	r5, #0
 80045a0:	4622      	mov	r2, r4
 80045a2:	462b      	mov	r3, r5
 80045a4:	1891      	adds	r1, r2, r2
 80045a6:	6139      	str	r1, [r7, #16]
 80045a8:	415b      	adcs	r3, r3
 80045aa:	617b      	str	r3, [r7, #20]
 80045ac:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80045b0:	1912      	adds	r2, r2, r4
 80045b2:	eb45 0303 	adc.w	r3, r5, r3
 80045b6:	f04f 0000 	mov.w	r0, #0
 80045ba:	f04f 0100 	mov.w	r1, #0
 80045be:	00d9      	lsls	r1, r3, #3
 80045c0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80045c4:	00d0      	lsls	r0, r2, #3
 80045c6:	4602      	mov	r2, r0
 80045c8:	460b      	mov	r3, r1
 80045ca:	eb12 0804 	adds.w	r8, r2, r4
 80045ce:	eb43 0905 	adc.w	r9, r3, r5
 80045d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	4618      	mov	r0, r3
 80045d8:	f04f 0100 	mov.w	r1, #0
 80045dc:	f04f 0200 	mov.w	r2, #0
 80045e0:	f04f 0300 	mov.w	r3, #0
 80045e4:	008b      	lsls	r3, r1, #2
 80045e6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80045ea:	0082      	lsls	r2, r0, #2
 80045ec:	4640      	mov	r0, r8
 80045ee:	4649      	mov	r1, r9
 80045f0:	f7fb fe5e 	bl	80002b0 <__aeabi_uldivmod>
 80045f4:	4602      	mov	r2, r0
 80045f6:	460b      	mov	r3, r1
 80045f8:	4b49      	ldr	r3, [pc, #292]	; (8004720 <UART_SetConfig+0x38c>)
 80045fa:	fba3 2302 	umull	r2, r3, r3, r2
 80045fe:	095b      	lsrs	r3, r3, #5
 8004600:	011e      	lsls	r6, r3, #4
 8004602:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004604:	4618      	mov	r0, r3
 8004606:	f04f 0100 	mov.w	r1, #0
 800460a:	4602      	mov	r2, r0
 800460c:	460b      	mov	r3, r1
 800460e:	1894      	adds	r4, r2, r2
 8004610:	60bc      	str	r4, [r7, #8]
 8004612:	415b      	adcs	r3, r3
 8004614:	60fb      	str	r3, [r7, #12]
 8004616:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800461a:	1812      	adds	r2, r2, r0
 800461c:	eb41 0303 	adc.w	r3, r1, r3
 8004620:	f04f 0400 	mov.w	r4, #0
 8004624:	f04f 0500 	mov.w	r5, #0
 8004628:	00dd      	lsls	r5, r3, #3
 800462a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800462e:	00d4      	lsls	r4, r2, #3
 8004630:	4622      	mov	r2, r4
 8004632:	462b      	mov	r3, r5
 8004634:	1814      	adds	r4, r2, r0
 8004636:	64bc      	str	r4, [r7, #72]	; 0x48
 8004638:	414b      	adcs	r3, r1
 800463a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800463c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	4618      	mov	r0, r3
 8004642:	f04f 0100 	mov.w	r1, #0
 8004646:	f04f 0200 	mov.w	r2, #0
 800464a:	f04f 0300 	mov.w	r3, #0
 800464e:	008b      	lsls	r3, r1, #2
 8004650:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004654:	0082      	lsls	r2, r0, #2
 8004656:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800465a:	f7fb fe29 	bl	80002b0 <__aeabi_uldivmod>
 800465e:	4602      	mov	r2, r0
 8004660:	460b      	mov	r3, r1
 8004662:	4b2f      	ldr	r3, [pc, #188]	; (8004720 <UART_SetConfig+0x38c>)
 8004664:	fba3 1302 	umull	r1, r3, r3, r2
 8004668:	095b      	lsrs	r3, r3, #5
 800466a:	2164      	movs	r1, #100	; 0x64
 800466c:	fb01 f303 	mul.w	r3, r1, r3
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	011b      	lsls	r3, r3, #4
 8004674:	3332      	adds	r3, #50	; 0x32
 8004676:	4a2a      	ldr	r2, [pc, #168]	; (8004720 <UART_SetConfig+0x38c>)
 8004678:	fba2 2303 	umull	r2, r3, r2, r3
 800467c:	095b      	lsrs	r3, r3, #5
 800467e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004682:	441e      	add	r6, r3
 8004684:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004686:	4618      	mov	r0, r3
 8004688:	f04f 0100 	mov.w	r1, #0
 800468c:	4602      	mov	r2, r0
 800468e:	460b      	mov	r3, r1
 8004690:	1894      	adds	r4, r2, r2
 8004692:	603c      	str	r4, [r7, #0]
 8004694:	415b      	adcs	r3, r3
 8004696:	607b      	str	r3, [r7, #4]
 8004698:	e9d7 2300 	ldrd	r2, r3, [r7]
 800469c:	1812      	adds	r2, r2, r0
 800469e:	eb41 0303 	adc.w	r3, r1, r3
 80046a2:	f04f 0400 	mov.w	r4, #0
 80046a6:	f04f 0500 	mov.w	r5, #0
 80046aa:	00dd      	lsls	r5, r3, #3
 80046ac:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80046b0:	00d4      	lsls	r4, r2, #3
 80046b2:	4622      	mov	r2, r4
 80046b4:	462b      	mov	r3, r5
 80046b6:	eb12 0a00 	adds.w	sl, r2, r0
 80046ba:	eb43 0b01 	adc.w	fp, r3, r1
 80046be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	4618      	mov	r0, r3
 80046c4:	f04f 0100 	mov.w	r1, #0
 80046c8:	f04f 0200 	mov.w	r2, #0
 80046cc:	f04f 0300 	mov.w	r3, #0
 80046d0:	008b      	lsls	r3, r1, #2
 80046d2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80046d6:	0082      	lsls	r2, r0, #2
 80046d8:	4650      	mov	r0, sl
 80046da:	4659      	mov	r1, fp
 80046dc:	f7fb fde8 	bl	80002b0 <__aeabi_uldivmod>
 80046e0:	4602      	mov	r2, r0
 80046e2:	460b      	mov	r3, r1
 80046e4:	4b0e      	ldr	r3, [pc, #56]	; (8004720 <UART_SetConfig+0x38c>)
 80046e6:	fba3 1302 	umull	r1, r3, r3, r2
 80046ea:	095b      	lsrs	r3, r3, #5
 80046ec:	2164      	movs	r1, #100	; 0x64
 80046ee:	fb01 f303 	mul.w	r3, r1, r3
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	011b      	lsls	r3, r3, #4
 80046f6:	3332      	adds	r3, #50	; 0x32
 80046f8:	4a09      	ldr	r2, [pc, #36]	; (8004720 <UART_SetConfig+0x38c>)
 80046fa:	fba2 2303 	umull	r2, r3, r2, r3
 80046fe:	095b      	lsrs	r3, r3, #5
 8004700:	f003 020f 	and.w	r2, r3, #15
 8004704:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4432      	add	r2, r6
 800470a:	609a      	str	r2, [r3, #8]
}
 800470c:	bf00      	nop
 800470e:	377c      	adds	r7, #124	; 0x7c
 8004710:	46bd      	mov	sp, r7
 8004712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004716:	bf00      	nop
 8004718:	40011000 	.word	0x40011000
 800471c:	40011400 	.word	0x40011400
 8004720:	51eb851f 	.word	0x51eb851f

08004724 <__errno>:
 8004724:	4b01      	ldr	r3, [pc, #4]	; (800472c <__errno+0x8>)
 8004726:	6818      	ldr	r0, [r3, #0]
 8004728:	4770      	bx	lr
 800472a:	bf00      	nop
 800472c:	20000024 	.word	0x20000024

08004730 <__libc_init_array>:
 8004730:	b570      	push	{r4, r5, r6, lr}
 8004732:	4d0d      	ldr	r5, [pc, #52]	; (8004768 <__libc_init_array+0x38>)
 8004734:	4c0d      	ldr	r4, [pc, #52]	; (800476c <__libc_init_array+0x3c>)
 8004736:	1b64      	subs	r4, r4, r5
 8004738:	10a4      	asrs	r4, r4, #2
 800473a:	2600      	movs	r6, #0
 800473c:	42a6      	cmp	r6, r4
 800473e:	d109      	bne.n	8004754 <__libc_init_array+0x24>
 8004740:	4d0b      	ldr	r5, [pc, #44]	; (8004770 <__libc_init_array+0x40>)
 8004742:	4c0c      	ldr	r4, [pc, #48]	; (8004774 <__libc_init_array+0x44>)
 8004744:	f000 fc56 	bl	8004ff4 <_init>
 8004748:	1b64      	subs	r4, r4, r5
 800474a:	10a4      	asrs	r4, r4, #2
 800474c:	2600      	movs	r6, #0
 800474e:	42a6      	cmp	r6, r4
 8004750:	d105      	bne.n	800475e <__libc_init_array+0x2e>
 8004752:	bd70      	pop	{r4, r5, r6, pc}
 8004754:	f855 3b04 	ldr.w	r3, [r5], #4
 8004758:	4798      	blx	r3
 800475a:	3601      	adds	r6, #1
 800475c:	e7ee      	b.n	800473c <__libc_init_array+0xc>
 800475e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004762:	4798      	blx	r3
 8004764:	3601      	adds	r6, #1
 8004766:	e7f2      	b.n	800474e <__libc_init_array+0x1e>
 8004768:	0800510c 	.word	0x0800510c
 800476c:	0800510c 	.word	0x0800510c
 8004770:	0800510c 	.word	0x0800510c
 8004774:	08005110 	.word	0x08005110

08004778 <memset>:
 8004778:	4402      	add	r2, r0
 800477a:	4603      	mov	r3, r0
 800477c:	4293      	cmp	r3, r2
 800477e:	d100      	bne.n	8004782 <memset+0xa>
 8004780:	4770      	bx	lr
 8004782:	f803 1b01 	strb.w	r1, [r3], #1
 8004786:	e7f9      	b.n	800477c <memset+0x4>

08004788 <siprintf>:
 8004788:	b40e      	push	{r1, r2, r3}
 800478a:	b500      	push	{lr}
 800478c:	b09c      	sub	sp, #112	; 0x70
 800478e:	ab1d      	add	r3, sp, #116	; 0x74
 8004790:	9002      	str	r0, [sp, #8]
 8004792:	9006      	str	r0, [sp, #24]
 8004794:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004798:	4809      	ldr	r0, [pc, #36]	; (80047c0 <siprintf+0x38>)
 800479a:	9107      	str	r1, [sp, #28]
 800479c:	9104      	str	r1, [sp, #16]
 800479e:	4909      	ldr	r1, [pc, #36]	; (80047c4 <siprintf+0x3c>)
 80047a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80047a4:	9105      	str	r1, [sp, #20]
 80047a6:	6800      	ldr	r0, [r0, #0]
 80047a8:	9301      	str	r3, [sp, #4]
 80047aa:	a902      	add	r1, sp, #8
 80047ac:	f000 f870 	bl	8004890 <_svfiprintf_r>
 80047b0:	9b02      	ldr	r3, [sp, #8]
 80047b2:	2200      	movs	r2, #0
 80047b4:	701a      	strb	r2, [r3, #0]
 80047b6:	b01c      	add	sp, #112	; 0x70
 80047b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80047bc:	b003      	add	sp, #12
 80047be:	4770      	bx	lr
 80047c0:	20000024 	.word	0x20000024
 80047c4:	ffff0208 	.word	0xffff0208

080047c8 <strcpy>:
 80047c8:	4603      	mov	r3, r0
 80047ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80047ce:	f803 2b01 	strb.w	r2, [r3], #1
 80047d2:	2a00      	cmp	r2, #0
 80047d4:	d1f9      	bne.n	80047ca <strcpy+0x2>
 80047d6:	4770      	bx	lr

080047d8 <__ssputs_r>:
 80047d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047dc:	688e      	ldr	r6, [r1, #8]
 80047de:	429e      	cmp	r6, r3
 80047e0:	4682      	mov	sl, r0
 80047e2:	460c      	mov	r4, r1
 80047e4:	4690      	mov	r8, r2
 80047e6:	461f      	mov	r7, r3
 80047e8:	d838      	bhi.n	800485c <__ssputs_r+0x84>
 80047ea:	898a      	ldrh	r2, [r1, #12]
 80047ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80047f0:	d032      	beq.n	8004858 <__ssputs_r+0x80>
 80047f2:	6825      	ldr	r5, [r4, #0]
 80047f4:	6909      	ldr	r1, [r1, #16]
 80047f6:	eba5 0901 	sub.w	r9, r5, r1
 80047fa:	6965      	ldr	r5, [r4, #20]
 80047fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004800:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004804:	3301      	adds	r3, #1
 8004806:	444b      	add	r3, r9
 8004808:	106d      	asrs	r5, r5, #1
 800480a:	429d      	cmp	r5, r3
 800480c:	bf38      	it	cc
 800480e:	461d      	movcc	r5, r3
 8004810:	0553      	lsls	r3, r2, #21
 8004812:	d531      	bpl.n	8004878 <__ssputs_r+0xa0>
 8004814:	4629      	mov	r1, r5
 8004816:	f000 fb47 	bl	8004ea8 <_malloc_r>
 800481a:	4606      	mov	r6, r0
 800481c:	b950      	cbnz	r0, 8004834 <__ssputs_r+0x5c>
 800481e:	230c      	movs	r3, #12
 8004820:	f8ca 3000 	str.w	r3, [sl]
 8004824:	89a3      	ldrh	r3, [r4, #12]
 8004826:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800482a:	81a3      	strh	r3, [r4, #12]
 800482c:	f04f 30ff 	mov.w	r0, #4294967295
 8004830:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004834:	6921      	ldr	r1, [r4, #16]
 8004836:	464a      	mov	r2, r9
 8004838:	f000 fabe 	bl	8004db8 <memcpy>
 800483c:	89a3      	ldrh	r3, [r4, #12]
 800483e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004842:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004846:	81a3      	strh	r3, [r4, #12]
 8004848:	6126      	str	r6, [r4, #16]
 800484a:	6165      	str	r5, [r4, #20]
 800484c:	444e      	add	r6, r9
 800484e:	eba5 0509 	sub.w	r5, r5, r9
 8004852:	6026      	str	r6, [r4, #0]
 8004854:	60a5      	str	r5, [r4, #8]
 8004856:	463e      	mov	r6, r7
 8004858:	42be      	cmp	r6, r7
 800485a:	d900      	bls.n	800485e <__ssputs_r+0x86>
 800485c:	463e      	mov	r6, r7
 800485e:	4632      	mov	r2, r6
 8004860:	6820      	ldr	r0, [r4, #0]
 8004862:	4641      	mov	r1, r8
 8004864:	f000 fab6 	bl	8004dd4 <memmove>
 8004868:	68a3      	ldr	r3, [r4, #8]
 800486a:	6822      	ldr	r2, [r4, #0]
 800486c:	1b9b      	subs	r3, r3, r6
 800486e:	4432      	add	r2, r6
 8004870:	60a3      	str	r3, [r4, #8]
 8004872:	6022      	str	r2, [r4, #0]
 8004874:	2000      	movs	r0, #0
 8004876:	e7db      	b.n	8004830 <__ssputs_r+0x58>
 8004878:	462a      	mov	r2, r5
 800487a:	f000 fb6f 	bl	8004f5c <_realloc_r>
 800487e:	4606      	mov	r6, r0
 8004880:	2800      	cmp	r0, #0
 8004882:	d1e1      	bne.n	8004848 <__ssputs_r+0x70>
 8004884:	6921      	ldr	r1, [r4, #16]
 8004886:	4650      	mov	r0, sl
 8004888:	f000 fabe 	bl	8004e08 <_free_r>
 800488c:	e7c7      	b.n	800481e <__ssputs_r+0x46>
	...

08004890 <_svfiprintf_r>:
 8004890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004894:	4698      	mov	r8, r3
 8004896:	898b      	ldrh	r3, [r1, #12]
 8004898:	061b      	lsls	r3, r3, #24
 800489a:	b09d      	sub	sp, #116	; 0x74
 800489c:	4607      	mov	r7, r0
 800489e:	460d      	mov	r5, r1
 80048a0:	4614      	mov	r4, r2
 80048a2:	d50e      	bpl.n	80048c2 <_svfiprintf_r+0x32>
 80048a4:	690b      	ldr	r3, [r1, #16]
 80048a6:	b963      	cbnz	r3, 80048c2 <_svfiprintf_r+0x32>
 80048a8:	2140      	movs	r1, #64	; 0x40
 80048aa:	f000 fafd 	bl	8004ea8 <_malloc_r>
 80048ae:	6028      	str	r0, [r5, #0]
 80048b0:	6128      	str	r0, [r5, #16]
 80048b2:	b920      	cbnz	r0, 80048be <_svfiprintf_r+0x2e>
 80048b4:	230c      	movs	r3, #12
 80048b6:	603b      	str	r3, [r7, #0]
 80048b8:	f04f 30ff 	mov.w	r0, #4294967295
 80048bc:	e0d1      	b.n	8004a62 <_svfiprintf_r+0x1d2>
 80048be:	2340      	movs	r3, #64	; 0x40
 80048c0:	616b      	str	r3, [r5, #20]
 80048c2:	2300      	movs	r3, #0
 80048c4:	9309      	str	r3, [sp, #36]	; 0x24
 80048c6:	2320      	movs	r3, #32
 80048c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80048cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80048d0:	2330      	movs	r3, #48	; 0x30
 80048d2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004a7c <_svfiprintf_r+0x1ec>
 80048d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80048da:	f04f 0901 	mov.w	r9, #1
 80048de:	4623      	mov	r3, r4
 80048e0:	469a      	mov	sl, r3
 80048e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80048e6:	b10a      	cbz	r2, 80048ec <_svfiprintf_r+0x5c>
 80048e8:	2a25      	cmp	r2, #37	; 0x25
 80048ea:	d1f9      	bne.n	80048e0 <_svfiprintf_r+0x50>
 80048ec:	ebba 0b04 	subs.w	fp, sl, r4
 80048f0:	d00b      	beq.n	800490a <_svfiprintf_r+0x7a>
 80048f2:	465b      	mov	r3, fp
 80048f4:	4622      	mov	r2, r4
 80048f6:	4629      	mov	r1, r5
 80048f8:	4638      	mov	r0, r7
 80048fa:	f7ff ff6d 	bl	80047d8 <__ssputs_r>
 80048fe:	3001      	adds	r0, #1
 8004900:	f000 80aa 	beq.w	8004a58 <_svfiprintf_r+0x1c8>
 8004904:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004906:	445a      	add	r2, fp
 8004908:	9209      	str	r2, [sp, #36]	; 0x24
 800490a:	f89a 3000 	ldrb.w	r3, [sl]
 800490e:	2b00      	cmp	r3, #0
 8004910:	f000 80a2 	beq.w	8004a58 <_svfiprintf_r+0x1c8>
 8004914:	2300      	movs	r3, #0
 8004916:	f04f 32ff 	mov.w	r2, #4294967295
 800491a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800491e:	f10a 0a01 	add.w	sl, sl, #1
 8004922:	9304      	str	r3, [sp, #16]
 8004924:	9307      	str	r3, [sp, #28]
 8004926:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800492a:	931a      	str	r3, [sp, #104]	; 0x68
 800492c:	4654      	mov	r4, sl
 800492e:	2205      	movs	r2, #5
 8004930:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004934:	4851      	ldr	r0, [pc, #324]	; (8004a7c <_svfiprintf_r+0x1ec>)
 8004936:	f7fb fc6b 	bl	8000210 <memchr>
 800493a:	9a04      	ldr	r2, [sp, #16]
 800493c:	b9d8      	cbnz	r0, 8004976 <_svfiprintf_r+0xe6>
 800493e:	06d0      	lsls	r0, r2, #27
 8004940:	bf44      	itt	mi
 8004942:	2320      	movmi	r3, #32
 8004944:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004948:	0711      	lsls	r1, r2, #28
 800494a:	bf44      	itt	mi
 800494c:	232b      	movmi	r3, #43	; 0x2b
 800494e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004952:	f89a 3000 	ldrb.w	r3, [sl]
 8004956:	2b2a      	cmp	r3, #42	; 0x2a
 8004958:	d015      	beq.n	8004986 <_svfiprintf_r+0xf6>
 800495a:	9a07      	ldr	r2, [sp, #28]
 800495c:	4654      	mov	r4, sl
 800495e:	2000      	movs	r0, #0
 8004960:	f04f 0c0a 	mov.w	ip, #10
 8004964:	4621      	mov	r1, r4
 8004966:	f811 3b01 	ldrb.w	r3, [r1], #1
 800496a:	3b30      	subs	r3, #48	; 0x30
 800496c:	2b09      	cmp	r3, #9
 800496e:	d94e      	bls.n	8004a0e <_svfiprintf_r+0x17e>
 8004970:	b1b0      	cbz	r0, 80049a0 <_svfiprintf_r+0x110>
 8004972:	9207      	str	r2, [sp, #28]
 8004974:	e014      	b.n	80049a0 <_svfiprintf_r+0x110>
 8004976:	eba0 0308 	sub.w	r3, r0, r8
 800497a:	fa09 f303 	lsl.w	r3, r9, r3
 800497e:	4313      	orrs	r3, r2
 8004980:	9304      	str	r3, [sp, #16]
 8004982:	46a2      	mov	sl, r4
 8004984:	e7d2      	b.n	800492c <_svfiprintf_r+0x9c>
 8004986:	9b03      	ldr	r3, [sp, #12]
 8004988:	1d19      	adds	r1, r3, #4
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	9103      	str	r1, [sp, #12]
 800498e:	2b00      	cmp	r3, #0
 8004990:	bfbb      	ittet	lt
 8004992:	425b      	neglt	r3, r3
 8004994:	f042 0202 	orrlt.w	r2, r2, #2
 8004998:	9307      	strge	r3, [sp, #28]
 800499a:	9307      	strlt	r3, [sp, #28]
 800499c:	bfb8      	it	lt
 800499e:	9204      	strlt	r2, [sp, #16]
 80049a0:	7823      	ldrb	r3, [r4, #0]
 80049a2:	2b2e      	cmp	r3, #46	; 0x2e
 80049a4:	d10c      	bne.n	80049c0 <_svfiprintf_r+0x130>
 80049a6:	7863      	ldrb	r3, [r4, #1]
 80049a8:	2b2a      	cmp	r3, #42	; 0x2a
 80049aa:	d135      	bne.n	8004a18 <_svfiprintf_r+0x188>
 80049ac:	9b03      	ldr	r3, [sp, #12]
 80049ae:	1d1a      	adds	r2, r3, #4
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	9203      	str	r2, [sp, #12]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	bfb8      	it	lt
 80049b8:	f04f 33ff 	movlt.w	r3, #4294967295
 80049bc:	3402      	adds	r4, #2
 80049be:	9305      	str	r3, [sp, #20]
 80049c0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004a8c <_svfiprintf_r+0x1fc>
 80049c4:	7821      	ldrb	r1, [r4, #0]
 80049c6:	2203      	movs	r2, #3
 80049c8:	4650      	mov	r0, sl
 80049ca:	f7fb fc21 	bl	8000210 <memchr>
 80049ce:	b140      	cbz	r0, 80049e2 <_svfiprintf_r+0x152>
 80049d0:	2340      	movs	r3, #64	; 0x40
 80049d2:	eba0 000a 	sub.w	r0, r0, sl
 80049d6:	fa03 f000 	lsl.w	r0, r3, r0
 80049da:	9b04      	ldr	r3, [sp, #16]
 80049dc:	4303      	orrs	r3, r0
 80049de:	3401      	adds	r4, #1
 80049e0:	9304      	str	r3, [sp, #16]
 80049e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049e6:	4826      	ldr	r0, [pc, #152]	; (8004a80 <_svfiprintf_r+0x1f0>)
 80049e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80049ec:	2206      	movs	r2, #6
 80049ee:	f7fb fc0f 	bl	8000210 <memchr>
 80049f2:	2800      	cmp	r0, #0
 80049f4:	d038      	beq.n	8004a68 <_svfiprintf_r+0x1d8>
 80049f6:	4b23      	ldr	r3, [pc, #140]	; (8004a84 <_svfiprintf_r+0x1f4>)
 80049f8:	bb1b      	cbnz	r3, 8004a42 <_svfiprintf_r+0x1b2>
 80049fa:	9b03      	ldr	r3, [sp, #12]
 80049fc:	3307      	adds	r3, #7
 80049fe:	f023 0307 	bic.w	r3, r3, #7
 8004a02:	3308      	adds	r3, #8
 8004a04:	9303      	str	r3, [sp, #12]
 8004a06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a08:	4433      	add	r3, r6
 8004a0a:	9309      	str	r3, [sp, #36]	; 0x24
 8004a0c:	e767      	b.n	80048de <_svfiprintf_r+0x4e>
 8004a0e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a12:	460c      	mov	r4, r1
 8004a14:	2001      	movs	r0, #1
 8004a16:	e7a5      	b.n	8004964 <_svfiprintf_r+0xd4>
 8004a18:	2300      	movs	r3, #0
 8004a1a:	3401      	adds	r4, #1
 8004a1c:	9305      	str	r3, [sp, #20]
 8004a1e:	4619      	mov	r1, r3
 8004a20:	f04f 0c0a 	mov.w	ip, #10
 8004a24:	4620      	mov	r0, r4
 8004a26:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a2a:	3a30      	subs	r2, #48	; 0x30
 8004a2c:	2a09      	cmp	r2, #9
 8004a2e:	d903      	bls.n	8004a38 <_svfiprintf_r+0x1a8>
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d0c5      	beq.n	80049c0 <_svfiprintf_r+0x130>
 8004a34:	9105      	str	r1, [sp, #20]
 8004a36:	e7c3      	b.n	80049c0 <_svfiprintf_r+0x130>
 8004a38:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a3c:	4604      	mov	r4, r0
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e7f0      	b.n	8004a24 <_svfiprintf_r+0x194>
 8004a42:	ab03      	add	r3, sp, #12
 8004a44:	9300      	str	r3, [sp, #0]
 8004a46:	462a      	mov	r2, r5
 8004a48:	4b0f      	ldr	r3, [pc, #60]	; (8004a88 <_svfiprintf_r+0x1f8>)
 8004a4a:	a904      	add	r1, sp, #16
 8004a4c:	4638      	mov	r0, r7
 8004a4e:	f3af 8000 	nop.w
 8004a52:	1c42      	adds	r2, r0, #1
 8004a54:	4606      	mov	r6, r0
 8004a56:	d1d6      	bne.n	8004a06 <_svfiprintf_r+0x176>
 8004a58:	89ab      	ldrh	r3, [r5, #12]
 8004a5a:	065b      	lsls	r3, r3, #25
 8004a5c:	f53f af2c 	bmi.w	80048b8 <_svfiprintf_r+0x28>
 8004a60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004a62:	b01d      	add	sp, #116	; 0x74
 8004a64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a68:	ab03      	add	r3, sp, #12
 8004a6a:	9300      	str	r3, [sp, #0]
 8004a6c:	462a      	mov	r2, r5
 8004a6e:	4b06      	ldr	r3, [pc, #24]	; (8004a88 <_svfiprintf_r+0x1f8>)
 8004a70:	a904      	add	r1, sp, #16
 8004a72:	4638      	mov	r0, r7
 8004a74:	f000 f87a 	bl	8004b6c <_printf_i>
 8004a78:	e7eb      	b.n	8004a52 <_svfiprintf_r+0x1c2>
 8004a7a:	bf00      	nop
 8004a7c:	080050d0 	.word	0x080050d0
 8004a80:	080050da 	.word	0x080050da
 8004a84:	00000000 	.word	0x00000000
 8004a88:	080047d9 	.word	0x080047d9
 8004a8c:	080050d6 	.word	0x080050d6

08004a90 <_printf_common>:
 8004a90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a94:	4616      	mov	r6, r2
 8004a96:	4699      	mov	r9, r3
 8004a98:	688a      	ldr	r2, [r1, #8]
 8004a9a:	690b      	ldr	r3, [r1, #16]
 8004a9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	bfb8      	it	lt
 8004aa4:	4613      	movlt	r3, r2
 8004aa6:	6033      	str	r3, [r6, #0]
 8004aa8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004aac:	4607      	mov	r7, r0
 8004aae:	460c      	mov	r4, r1
 8004ab0:	b10a      	cbz	r2, 8004ab6 <_printf_common+0x26>
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	6033      	str	r3, [r6, #0]
 8004ab6:	6823      	ldr	r3, [r4, #0]
 8004ab8:	0699      	lsls	r1, r3, #26
 8004aba:	bf42      	ittt	mi
 8004abc:	6833      	ldrmi	r3, [r6, #0]
 8004abe:	3302      	addmi	r3, #2
 8004ac0:	6033      	strmi	r3, [r6, #0]
 8004ac2:	6825      	ldr	r5, [r4, #0]
 8004ac4:	f015 0506 	ands.w	r5, r5, #6
 8004ac8:	d106      	bne.n	8004ad8 <_printf_common+0x48>
 8004aca:	f104 0a19 	add.w	sl, r4, #25
 8004ace:	68e3      	ldr	r3, [r4, #12]
 8004ad0:	6832      	ldr	r2, [r6, #0]
 8004ad2:	1a9b      	subs	r3, r3, r2
 8004ad4:	42ab      	cmp	r3, r5
 8004ad6:	dc26      	bgt.n	8004b26 <_printf_common+0x96>
 8004ad8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004adc:	1e13      	subs	r3, r2, #0
 8004ade:	6822      	ldr	r2, [r4, #0]
 8004ae0:	bf18      	it	ne
 8004ae2:	2301      	movne	r3, #1
 8004ae4:	0692      	lsls	r2, r2, #26
 8004ae6:	d42b      	bmi.n	8004b40 <_printf_common+0xb0>
 8004ae8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004aec:	4649      	mov	r1, r9
 8004aee:	4638      	mov	r0, r7
 8004af0:	47c0      	blx	r8
 8004af2:	3001      	adds	r0, #1
 8004af4:	d01e      	beq.n	8004b34 <_printf_common+0xa4>
 8004af6:	6823      	ldr	r3, [r4, #0]
 8004af8:	68e5      	ldr	r5, [r4, #12]
 8004afa:	6832      	ldr	r2, [r6, #0]
 8004afc:	f003 0306 	and.w	r3, r3, #6
 8004b00:	2b04      	cmp	r3, #4
 8004b02:	bf08      	it	eq
 8004b04:	1aad      	subeq	r5, r5, r2
 8004b06:	68a3      	ldr	r3, [r4, #8]
 8004b08:	6922      	ldr	r2, [r4, #16]
 8004b0a:	bf0c      	ite	eq
 8004b0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b10:	2500      	movne	r5, #0
 8004b12:	4293      	cmp	r3, r2
 8004b14:	bfc4      	itt	gt
 8004b16:	1a9b      	subgt	r3, r3, r2
 8004b18:	18ed      	addgt	r5, r5, r3
 8004b1a:	2600      	movs	r6, #0
 8004b1c:	341a      	adds	r4, #26
 8004b1e:	42b5      	cmp	r5, r6
 8004b20:	d11a      	bne.n	8004b58 <_printf_common+0xc8>
 8004b22:	2000      	movs	r0, #0
 8004b24:	e008      	b.n	8004b38 <_printf_common+0xa8>
 8004b26:	2301      	movs	r3, #1
 8004b28:	4652      	mov	r2, sl
 8004b2a:	4649      	mov	r1, r9
 8004b2c:	4638      	mov	r0, r7
 8004b2e:	47c0      	blx	r8
 8004b30:	3001      	adds	r0, #1
 8004b32:	d103      	bne.n	8004b3c <_printf_common+0xac>
 8004b34:	f04f 30ff 	mov.w	r0, #4294967295
 8004b38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b3c:	3501      	adds	r5, #1
 8004b3e:	e7c6      	b.n	8004ace <_printf_common+0x3e>
 8004b40:	18e1      	adds	r1, r4, r3
 8004b42:	1c5a      	adds	r2, r3, #1
 8004b44:	2030      	movs	r0, #48	; 0x30
 8004b46:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b4a:	4422      	add	r2, r4
 8004b4c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b50:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b54:	3302      	adds	r3, #2
 8004b56:	e7c7      	b.n	8004ae8 <_printf_common+0x58>
 8004b58:	2301      	movs	r3, #1
 8004b5a:	4622      	mov	r2, r4
 8004b5c:	4649      	mov	r1, r9
 8004b5e:	4638      	mov	r0, r7
 8004b60:	47c0      	blx	r8
 8004b62:	3001      	adds	r0, #1
 8004b64:	d0e6      	beq.n	8004b34 <_printf_common+0xa4>
 8004b66:	3601      	adds	r6, #1
 8004b68:	e7d9      	b.n	8004b1e <_printf_common+0x8e>
	...

08004b6c <_printf_i>:
 8004b6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b70:	460c      	mov	r4, r1
 8004b72:	4691      	mov	r9, r2
 8004b74:	7e27      	ldrb	r7, [r4, #24]
 8004b76:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004b78:	2f78      	cmp	r7, #120	; 0x78
 8004b7a:	4680      	mov	r8, r0
 8004b7c:	469a      	mov	sl, r3
 8004b7e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b82:	d807      	bhi.n	8004b94 <_printf_i+0x28>
 8004b84:	2f62      	cmp	r7, #98	; 0x62
 8004b86:	d80a      	bhi.n	8004b9e <_printf_i+0x32>
 8004b88:	2f00      	cmp	r7, #0
 8004b8a:	f000 80d8 	beq.w	8004d3e <_printf_i+0x1d2>
 8004b8e:	2f58      	cmp	r7, #88	; 0x58
 8004b90:	f000 80a3 	beq.w	8004cda <_printf_i+0x16e>
 8004b94:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004b98:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004b9c:	e03a      	b.n	8004c14 <_printf_i+0xa8>
 8004b9e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004ba2:	2b15      	cmp	r3, #21
 8004ba4:	d8f6      	bhi.n	8004b94 <_printf_i+0x28>
 8004ba6:	a001      	add	r0, pc, #4	; (adr r0, 8004bac <_printf_i+0x40>)
 8004ba8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004bac:	08004c05 	.word	0x08004c05
 8004bb0:	08004c19 	.word	0x08004c19
 8004bb4:	08004b95 	.word	0x08004b95
 8004bb8:	08004b95 	.word	0x08004b95
 8004bbc:	08004b95 	.word	0x08004b95
 8004bc0:	08004b95 	.word	0x08004b95
 8004bc4:	08004c19 	.word	0x08004c19
 8004bc8:	08004b95 	.word	0x08004b95
 8004bcc:	08004b95 	.word	0x08004b95
 8004bd0:	08004b95 	.word	0x08004b95
 8004bd4:	08004b95 	.word	0x08004b95
 8004bd8:	08004d25 	.word	0x08004d25
 8004bdc:	08004c49 	.word	0x08004c49
 8004be0:	08004d07 	.word	0x08004d07
 8004be4:	08004b95 	.word	0x08004b95
 8004be8:	08004b95 	.word	0x08004b95
 8004bec:	08004d47 	.word	0x08004d47
 8004bf0:	08004b95 	.word	0x08004b95
 8004bf4:	08004c49 	.word	0x08004c49
 8004bf8:	08004b95 	.word	0x08004b95
 8004bfc:	08004b95 	.word	0x08004b95
 8004c00:	08004d0f 	.word	0x08004d0f
 8004c04:	680b      	ldr	r3, [r1, #0]
 8004c06:	1d1a      	adds	r2, r3, #4
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	600a      	str	r2, [r1, #0]
 8004c0c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004c10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c14:	2301      	movs	r3, #1
 8004c16:	e0a3      	b.n	8004d60 <_printf_i+0x1f4>
 8004c18:	6825      	ldr	r5, [r4, #0]
 8004c1a:	6808      	ldr	r0, [r1, #0]
 8004c1c:	062e      	lsls	r6, r5, #24
 8004c1e:	f100 0304 	add.w	r3, r0, #4
 8004c22:	d50a      	bpl.n	8004c3a <_printf_i+0xce>
 8004c24:	6805      	ldr	r5, [r0, #0]
 8004c26:	600b      	str	r3, [r1, #0]
 8004c28:	2d00      	cmp	r5, #0
 8004c2a:	da03      	bge.n	8004c34 <_printf_i+0xc8>
 8004c2c:	232d      	movs	r3, #45	; 0x2d
 8004c2e:	426d      	negs	r5, r5
 8004c30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c34:	485e      	ldr	r0, [pc, #376]	; (8004db0 <_printf_i+0x244>)
 8004c36:	230a      	movs	r3, #10
 8004c38:	e019      	b.n	8004c6e <_printf_i+0x102>
 8004c3a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004c3e:	6805      	ldr	r5, [r0, #0]
 8004c40:	600b      	str	r3, [r1, #0]
 8004c42:	bf18      	it	ne
 8004c44:	b22d      	sxthne	r5, r5
 8004c46:	e7ef      	b.n	8004c28 <_printf_i+0xbc>
 8004c48:	680b      	ldr	r3, [r1, #0]
 8004c4a:	6825      	ldr	r5, [r4, #0]
 8004c4c:	1d18      	adds	r0, r3, #4
 8004c4e:	6008      	str	r0, [r1, #0]
 8004c50:	0628      	lsls	r0, r5, #24
 8004c52:	d501      	bpl.n	8004c58 <_printf_i+0xec>
 8004c54:	681d      	ldr	r5, [r3, #0]
 8004c56:	e002      	b.n	8004c5e <_printf_i+0xf2>
 8004c58:	0669      	lsls	r1, r5, #25
 8004c5a:	d5fb      	bpl.n	8004c54 <_printf_i+0xe8>
 8004c5c:	881d      	ldrh	r5, [r3, #0]
 8004c5e:	4854      	ldr	r0, [pc, #336]	; (8004db0 <_printf_i+0x244>)
 8004c60:	2f6f      	cmp	r7, #111	; 0x6f
 8004c62:	bf0c      	ite	eq
 8004c64:	2308      	moveq	r3, #8
 8004c66:	230a      	movne	r3, #10
 8004c68:	2100      	movs	r1, #0
 8004c6a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c6e:	6866      	ldr	r6, [r4, #4]
 8004c70:	60a6      	str	r6, [r4, #8]
 8004c72:	2e00      	cmp	r6, #0
 8004c74:	bfa2      	ittt	ge
 8004c76:	6821      	ldrge	r1, [r4, #0]
 8004c78:	f021 0104 	bicge.w	r1, r1, #4
 8004c7c:	6021      	strge	r1, [r4, #0]
 8004c7e:	b90d      	cbnz	r5, 8004c84 <_printf_i+0x118>
 8004c80:	2e00      	cmp	r6, #0
 8004c82:	d04d      	beq.n	8004d20 <_printf_i+0x1b4>
 8004c84:	4616      	mov	r6, r2
 8004c86:	fbb5 f1f3 	udiv	r1, r5, r3
 8004c8a:	fb03 5711 	mls	r7, r3, r1, r5
 8004c8e:	5dc7      	ldrb	r7, [r0, r7]
 8004c90:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004c94:	462f      	mov	r7, r5
 8004c96:	42bb      	cmp	r3, r7
 8004c98:	460d      	mov	r5, r1
 8004c9a:	d9f4      	bls.n	8004c86 <_printf_i+0x11a>
 8004c9c:	2b08      	cmp	r3, #8
 8004c9e:	d10b      	bne.n	8004cb8 <_printf_i+0x14c>
 8004ca0:	6823      	ldr	r3, [r4, #0]
 8004ca2:	07df      	lsls	r7, r3, #31
 8004ca4:	d508      	bpl.n	8004cb8 <_printf_i+0x14c>
 8004ca6:	6923      	ldr	r3, [r4, #16]
 8004ca8:	6861      	ldr	r1, [r4, #4]
 8004caa:	4299      	cmp	r1, r3
 8004cac:	bfde      	ittt	le
 8004cae:	2330      	movle	r3, #48	; 0x30
 8004cb0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004cb4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004cb8:	1b92      	subs	r2, r2, r6
 8004cba:	6122      	str	r2, [r4, #16]
 8004cbc:	f8cd a000 	str.w	sl, [sp]
 8004cc0:	464b      	mov	r3, r9
 8004cc2:	aa03      	add	r2, sp, #12
 8004cc4:	4621      	mov	r1, r4
 8004cc6:	4640      	mov	r0, r8
 8004cc8:	f7ff fee2 	bl	8004a90 <_printf_common>
 8004ccc:	3001      	adds	r0, #1
 8004cce:	d14c      	bne.n	8004d6a <_printf_i+0x1fe>
 8004cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8004cd4:	b004      	add	sp, #16
 8004cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cda:	4835      	ldr	r0, [pc, #212]	; (8004db0 <_printf_i+0x244>)
 8004cdc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004ce0:	6823      	ldr	r3, [r4, #0]
 8004ce2:	680e      	ldr	r6, [r1, #0]
 8004ce4:	061f      	lsls	r7, r3, #24
 8004ce6:	f856 5b04 	ldr.w	r5, [r6], #4
 8004cea:	600e      	str	r6, [r1, #0]
 8004cec:	d514      	bpl.n	8004d18 <_printf_i+0x1ac>
 8004cee:	07d9      	lsls	r1, r3, #31
 8004cf0:	bf44      	itt	mi
 8004cf2:	f043 0320 	orrmi.w	r3, r3, #32
 8004cf6:	6023      	strmi	r3, [r4, #0]
 8004cf8:	b91d      	cbnz	r5, 8004d02 <_printf_i+0x196>
 8004cfa:	6823      	ldr	r3, [r4, #0]
 8004cfc:	f023 0320 	bic.w	r3, r3, #32
 8004d00:	6023      	str	r3, [r4, #0]
 8004d02:	2310      	movs	r3, #16
 8004d04:	e7b0      	b.n	8004c68 <_printf_i+0xfc>
 8004d06:	6823      	ldr	r3, [r4, #0]
 8004d08:	f043 0320 	orr.w	r3, r3, #32
 8004d0c:	6023      	str	r3, [r4, #0]
 8004d0e:	2378      	movs	r3, #120	; 0x78
 8004d10:	4828      	ldr	r0, [pc, #160]	; (8004db4 <_printf_i+0x248>)
 8004d12:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004d16:	e7e3      	b.n	8004ce0 <_printf_i+0x174>
 8004d18:	065e      	lsls	r6, r3, #25
 8004d1a:	bf48      	it	mi
 8004d1c:	b2ad      	uxthmi	r5, r5
 8004d1e:	e7e6      	b.n	8004cee <_printf_i+0x182>
 8004d20:	4616      	mov	r6, r2
 8004d22:	e7bb      	b.n	8004c9c <_printf_i+0x130>
 8004d24:	680b      	ldr	r3, [r1, #0]
 8004d26:	6826      	ldr	r6, [r4, #0]
 8004d28:	6960      	ldr	r0, [r4, #20]
 8004d2a:	1d1d      	adds	r5, r3, #4
 8004d2c:	600d      	str	r5, [r1, #0]
 8004d2e:	0635      	lsls	r5, r6, #24
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	d501      	bpl.n	8004d38 <_printf_i+0x1cc>
 8004d34:	6018      	str	r0, [r3, #0]
 8004d36:	e002      	b.n	8004d3e <_printf_i+0x1d2>
 8004d38:	0671      	lsls	r1, r6, #25
 8004d3a:	d5fb      	bpl.n	8004d34 <_printf_i+0x1c8>
 8004d3c:	8018      	strh	r0, [r3, #0]
 8004d3e:	2300      	movs	r3, #0
 8004d40:	6123      	str	r3, [r4, #16]
 8004d42:	4616      	mov	r6, r2
 8004d44:	e7ba      	b.n	8004cbc <_printf_i+0x150>
 8004d46:	680b      	ldr	r3, [r1, #0]
 8004d48:	1d1a      	adds	r2, r3, #4
 8004d4a:	600a      	str	r2, [r1, #0]
 8004d4c:	681e      	ldr	r6, [r3, #0]
 8004d4e:	6862      	ldr	r2, [r4, #4]
 8004d50:	2100      	movs	r1, #0
 8004d52:	4630      	mov	r0, r6
 8004d54:	f7fb fa5c 	bl	8000210 <memchr>
 8004d58:	b108      	cbz	r0, 8004d5e <_printf_i+0x1f2>
 8004d5a:	1b80      	subs	r0, r0, r6
 8004d5c:	6060      	str	r0, [r4, #4]
 8004d5e:	6863      	ldr	r3, [r4, #4]
 8004d60:	6123      	str	r3, [r4, #16]
 8004d62:	2300      	movs	r3, #0
 8004d64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d68:	e7a8      	b.n	8004cbc <_printf_i+0x150>
 8004d6a:	6923      	ldr	r3, [r4, #16]
 8004d6c:	4632      	mov	r2, r6
 8004d6e:	4649      	mov	r1, r9
 8004d70:	4640      	mov	r0, r8
 8004d72:	47d0      	blx	sl
 8004d74:	3001      	adds	r0, #1
 8004d76:	d0ab      	beq.n	8004cd0 <_printf_i+0x164>
 8004d78:	6823      	ldr	r3, [r4, #0]
 8004d7a:	079b      	lsls	r3, r3, #30
 8004d7c:	d413      	bmi.n	8004da6 <_printf_i+0x23a>
 8004d7e:	68e0      	ldr	r0, [r4, #12]
 8004d80:	9b03      	ldr	r3, [sp, #12]
 8004d82:	4298      	cmp	r0, r3
 8004d84:	bfb8      	it	lt
 8004d86:	4618      	movlt	r0, r3
 8004d88:	e7a4      	b.n	8004cd4 <_printf_i+0x168>
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	4632      	mov	r2, r6
 8004d8e:	4649      	mov	r1, r9
 8004d90:	4640      	mov	r0, r8
 8004d92:	47d0      	blx	sl
 8004d94:	3001      	adds	r0, #1
 8004d96:	d09b      	beq.n	8004cd0 <_printf_i+0x164>
 8004d98:	3501      	adds	r5, #1
 8004d9a:	68e3      	ldr	r3, [r4, #12]
 8004d9c:	9903      	ldr	r1, [sp, #12]
 8004d9e:	1a5b      	subs	r3, r3, r1
 8004da0:	42ab      	cmp	r3, r5
 8004da2:	dcf2      	bgt.n	8004d8a <_printf_i+0x21e>
 8004da4:	e7eb      	b.n	8004d7e <_printf_i+0x212>
 8004da6:	2500      	movs	r5, #0
 8004da8:	f104 0619 	add.w	r6, r4, #25
 8004dac:	e7f5      	b.n	8004d9a <_printf_i+0x22e>
 8004dae:	bf00      	nop
 8004db0:	080050e1 	.word	0x080050e1
 8004db4:	080050f2 	.word	0x080050f2

08004db8 <memcpy>:
 8004db8:	440a      	add	r2, r1
 8004dba:	4291      	cmp	r1, r2
 8004dbc:	f100 33ff 	add.w	r3, r0, #4294967295
 8004dc0:	d100      	bne.n	8004dc4 <memcpy+0xc>
 8004dc2:	4770      	bx	lr
 8004dc4:	b510      	push	{r4, lr}
 8004dc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004dca:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004dce:	4291      	cmp	r1, r2
 8004dd0:	d1f9      	bne.n	8004dc6 <memcpy+0xe>
 8004dd2:	bd10      	pop	{r4, pc}

08004dd4 <memmove>:
 8004dd4:	4288      	cmp	r0, r1
 8004dd6:	b510      	push	{r4, lr}
 8004dd8:	eb01 0402 	add.w	r4, r1, r2
 8004ddc:	d902      	bls.n	8004de4 <memmove+0x10>
 8004dde:	4284      	cmp	r4, r0
 8004de0:	4623      	mov	r3, r4
 8004de2:	d807      	bhi.n	8004df4 <memmove+0x20>
 8004de4:	1e43      	subs	r3, r0, #1
 8004de6:	42a1      	cmp	r1, r4
 8004de8:	d008      	beq.n	8004dfc <memmove+0x28>
 8004dea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004dee:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004df2:	e7f8      	b.n	8004de6 <memmove+0x12>
 8004df4:	4402      	add	r2, r0
 8004df6:	4601      	mov	r1, r0
 8004df8:	428a      	cmp	r2, r1
 8004dfa:	d100      	bne.n	8004dfe <memmove+0x2a>
 8004dfc:	bd10      	pop	{r4, pc}
 8004dfe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004e02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004e06:	e7f7      	b.n	8004df8 <memmove+0x24>

08004e08 <_free_r>:
 8004e08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004e0a:	2900      	cmp	r1, #0
 8004e0c:	d048      	beq.n	8004ea0 <_free_r+0x98>
 8004e0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e12:	9001      	str	r0, [sp, #4]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	f1a1 0404 	sub.w	r4, r1, #4
 8004e1a:	bfb8      	it	lt
 8004e1c:	18e4      	addlt	r4, r4, r3
 8004e1e:	f000 f8d3 	bl	8004fc8 <__malloc_lock>
 8004e22:	4a20      	ldr	r2, [pc, #128]	; (8004ea4 <_free_r+0x9c>)
 8004e24:	9801      	ldr	r0, [sp, #4]
 8004e26:	6813      	ldr	r3, [r2, #0]
 8004e28:	4615      	mov	r5, r2
 8004e2a:	b933      	cbnz	r3, 8004e3a <_free_r+0x32>
 8004e2c:	6063      	str	r3, [r4, #4]
 8004e2e:	6014      	str	r4, [r2, #0]
 8004e30:	b003      	add	sp, #12
 8004e32:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004e36:	f000 b8cd 	b.w	8004fd4 <__malloc_unlock>
 8004e3a:	42a3      	cmp	r3, r4
 8004e3c:	d90b      	bls.n	8004e56 <_free_r+0x4e>
 8004e3e:	6821      	ldr	r1, [r4, #0]
 8004e40:	1862      	adds	r2, r4, r1
 8004e42:	4293      	cmp	r3, r2
 8004e44:	bf04      	itt	eq
 8004e46:	681a      	ldreq	r2, [r3, #0]
 8004e48:	685b      	ldreq	r3, [r3, #4]
 8004e4a:	6063      	str	r3, [r4, #4]
 8004e4c:	bf04      	itt	eq
 8004e4e:	1852      	addeq	r2, r2, r1
 8004e50:	6022      	streq	r2, [r4, #0]
 8004e52:	602c      	str	r4, [r5, #0]
 8004e54:	e7ec      	b.n	8004e30 <_free_r+0x28>
 8004e56:	461a      	mov	r2, r3
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	b10b      	cbz	r3, 8004e60 <_free_r+0x58>
 8004e5c:	42a3      	cmp	r3, r4
 8004e5e:	d9fa      	bls.n	8004e56 <_free_r+0x4e>
 8004e60:	6811      	ldr	r1, [r2, #0]
 8004e62:	1855      	adds	r5, r2, r1
 8004e64:	42a5      	cmp	r5, r4
 8004e66:	d10b      	bne.n	8004e80 <_free_r+0x78>
 8004e68:	6824      	ldr	r4, [r4, #0]
 8004e6a:	4421      	add	r1, r4
 8004e6c:	1854      	adds	r4, r2, r1
 8004e6e:	42a3      	cmp	r3, r4
 8004e70:	6011      	str	r1, [r2, #0]
 8004e72:	d1dd      	bne.n	8004e30 <_free_r+0x28>
 8004e74:	681c      	ldr	r4, [r3, #0]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	6053      	str	r3, [r2, #4]
 8004e7a:	4421      	add	r1, r4
 8004e7c:	6011      	str	r1, [r2, #0]
 8004e7e:	e7d7      	b.n	8004e30 <_free_r+0x28>
 8004e80:	d902      	bls.n	8004e88 <_free_r+0x80>
 8004e82:	230c      	movs	r3, #12
 8004e84:	6003      	str	r3, [r0, #0]
 8004e86:	e7d3      	b.n	8004e30 <_free_r+0x28>
 8004e88:	6825      	ldr	r5, [r4, #0]
 8004e8a:	1961      	adds	r1, r4, r5
 8004e8c:	428b      	cmp	r3, r1
 8004e8e:	bf04      	itt	eq
 8004e90:	6819      	ldreq	r1, [r3, #0]
 8004e92:	685b      	ldreq	r3, [r3, #4]
 8004e94:	6063      	str	r3, [r4, #4]
 8004e96:	bf04      	itt	eq
 8004e98:	1949      	addeq	r1, r1, r5
 8004e9a:	6021      	streq	r1, [r4, #0]
 8004e9c:	6054      	str	r4, [r2, #4]
 8004e9e:	e7c7      	b.n	8004e30 <_free_r+0x28>
 8004ea0:	b003      	add	sp, #12
 8004ea2:	bd30      	pop	{r4, r5, pc}
 8004ea4:	20000110 	.word	0x20000110

08004ea8 <_malloc_r>:
 8004ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eaa:	1ccd      	adds	r5, r1, #3
 8004eac:	f025 0503 	bic.w	r5, r5, #3
 8004eb0:	3508      	adds	r5, #8
 8004eb2:	2d0c      	cmp	r5, #12
 8004eb4:	bf38      	it	cc
 8004eb6:	250c      	movcc	r5, #12
 8004eb8:	2d00      	cmp	r5, #0
 8004eba:	4606      	mov	r6, r0
 8004ebc:	db01      	blt.n	8004ec2 <_malloc_r+0x1a>
 8004ebe:	42a9      	cmp	r1, r5
 8004ec0:	d903      	bls.n	8004eca <_malloc_r+0x22>
 8004ec2:	230c      	movs	r3, #12
 8004ec4:	6033      	str	r3, [r6, #0]
 8004ec6:	2000      	movs	r0, #0
 8004ec8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004eca:	f000 f87d 	bl	8004fc8 <__malloc_lock>
 8004ece:	4921      	ldr	r1, [pc, #132]	; (8004f54 <_malloc_r+0xac>)
 8004ed0:	680a      	ldr	r2, [r1, #0]
 8004ed2:	4614      	mov	r4, r2
 8004ed4:	b99c      	cbnz	r4, 8004efe <_malloc_r+0x56>
 8004ed6:	4f20      	ldr	r7, [pc, #128]	; (8004f58 <_malloc_r+0xb0>)
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	b923      	cbnz	r3, 8004ee6 <_malloc_r+0x3e>
 8004edc:	4621      	mov	r1, r4
 8004ede:	4630      	mov	r0, r6
 8004ee0:	f000 f862 	bl	8004fa8 <_sbrk_r>
 8004ee4:	6038      	str	r0, [r7, #0]
 8004ee6:	4629      	mov	r1, r5
 8004ee8:	4630      	mov	r0, r6
 8004eea:	f000 f85d 	bl	8004fa8 <_sbrk_r>
 8004eee:	1c43      	adds	r3, r0, #1
 8004ef0:	d123      	bne.n	8004f3a <_malloc_r+0x92>
 8004ef2:	230c      	movs	r3, #12
 8004ef4:	6033      	str	r3, [r6, #0]
 8004ef6:	4630      	mov	r0, r6
 8004ef8:	f000 f86c 	bl	8004fd4 <__malloc_unlock>
 8004efc:	e7e3      	b.n	8004ec6 <_malloc_r+0x1e>
 8004efe:	6823      	ldr	r3, [r4, #0]
 8004f00:	1b5b      	subs	r3, r3, r5
 8004f02:	d417      	bmi.n	8004f34 <_malloc_r+0x8c>
 8004f04:	2b0b      	cmp	r3, #11
 8004f06:	d903      	bls.n	8004f10 <_malloc_r+0x68>
 8004f08:	6023      	str	r3, [r4, #0]
 8004f0a:	441c      	add	r4, r3
 8004f0c:	6025      	str	r5, [r4, #0]
 8004f0e:	e004      	b.n	8004f1a <_malloc_r+0x72>
 8004f10:	6863      	ldr	r3, [r4, #4]
 8004f12:	42a2      	cmp	r2, r4
 8004f14:	bf0c      	ite	eq
 8004f16:	600b      	streq	r3, [r1, #0]
 8004f18:	6053      	strne	r3, [r2, #4]
 8004f1a:	4630      	mov	r0, r6
 8004f1c:	f000 f85a 	bl	8004fd4 <__malloc_unlock>
 8004f20:	f104 000b 	add.w	r0, r4, #11
 8004f24:	1d23      	adds	r3, r4, #4
 8004f26:	f020 0007 	bic.w	r0, r0, #7
 8004f2a:	1ac2      	subs	r2, r0, r3
 8004f2c:	d0cc      	beq.n	8004ec8 <_malloc_r+0x20>
 8004f2e:	1a1b      	subs	r3, r3, r0
 8004f30:	50a3      	str	r3, [r4, r2]
 8004f32:	e7c9      	b.n	8004ec8 <_malloc_r+0x20>
 8004f34:	4622      	mov	r2, r4
 8004f36:	6864      	ldr	r4, [r4, #4]
 8004f38:	e7cc      	b.n	8004ed4 <_malloc_r+0x2c>
 8004f3a:	1cc4      	adds	r4, r0, #3
 8004f3c:	f024 0403 	bic.w	r4, r4, #3
 8004f40:	42a0      	cmp	r0, r4
 8004f42:	d0e3      	beq.n	8004f0c <_malloc_r+0x64>
 8004f44:	1a21      	subs	r1, r4, r0
 8004f46:	4630      	mov	r0, r6
 8004f48:	f000 f82e 	bl	8004fa8 <_sbrk_r>
 8004f4c:	3001      	adds	r0, #1
 8004f4e:	d1dd      	bne.n	8004f0c <_malloc_r+0x64>
 8004f50:	e7cf      	b.n	8004ef2 <_malloc_r+0x4a>
 8004f52:	bf00      	nop
 8004f54:	20000110 	.word	0x20000110
 8004f58:	20000114 	.word	0x20000114

08004f5c <_realloc_r>:
 8004f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f5e:	4607      	mov	r7, r0
 8004f60:	4614      	mov	r4, r2
 8004f62:	460e      	mov	r6, r1
 8004f64:	b921      	cbnz	r1, 8004f70 <_realloc_r+0x14>
 8004f66:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004f6a:	4611      	mov	r1, r2
 8004f6c:	f7ff bf9c 	b.w	8004ea8 <_malloc_r>
 8004f70:	b922      	cbnz	r2, 8004f7c <_realloc_r+0x20>
 8004f72:	f7ff ff49 	bl	8004e08 <_free_r>
 8004f76:	4625      	mov	r5, r4
 8004f78:	4628      	mov	r0, r5
 8004f7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f7c:	f000 f830 	bl	8004fe0 <_malloc_usable_size_r>
 8004f80:	42a0      	cmp	r0, r4
 8004f82:	d20f      	bcs.n	8004fa4 <_realloc_r+0x48>
 8004f84:	4621      	mov	r1, r4
 8004f86:	4638      	mov	r0, r7
 8004f88:	f7ff ff8e 	bl	8004ea8 <_malloc_r>
 8004f8c:	4605      	mov	r5, r0
 8004f8e:	2800      	cmp	r0, #0
 8004f90:	d0f2      	beq.n	8004f78 <_realloc_r+0x1c>
 8004f92:	4631      	mov	r1, r6
 8004f94:	4622      	mov	r2, r4
 8004f96:	f7ff ff0f 	bl	8004db8 <memcpy>
 8004f9a:	4631      	mov	r1, r6
 8004f9c:	4638      	mov	r0, r7
 8004f9e:	f7ff ff33 	bl	8004e08 <_free_r>
 8004fa2:	e7e9      	b.n	8004f78 <_realloc_r+0x1c>
 8004fa4:	4635      	mov	r5, r6
 8004fa6:	e7e7      	b.n	8004f78 <_realloc_r+0x1c>

08004fa8 <_sbrk_r>:
 8004fa8:	b538      	push	{r3, r4, r5, lr}
 8004faa:	4d06      	ldr	r5, [pc, #24]	; (8004fc4 <_sbrk_r+0x1c>)
 8004fac:	2300      	movs	r3, #0
 8004fae:	4604      	mov	r4, r0
 8004fb0:	4608      	mov	r0, r1
 8004fb2:	602b      	str	r3, [r5, #0]
 8004fb4:	f7fc fb6a 	bl	800168c <_sbrk>
 8004fb8:	1c43      	adds	r3, r0, #1
 8004fba:	d102      	bne.n	8004fc2 <_sbrk_r+0x1a>
 8004fbc:	682b      	ldr	r3, [r5, #0]
 8004fbe:	b103      	cbz	r3, 8004fc2 <_sbrk_r+0x1a>
 8004fc0:	6023      	str	r3, [r4, #0]
 8004fc2:	bd38      	pop	{r3, r4, r5, pc}
 8004fc4:	20000280 	.word	0x20000280

08004fc8 <__malloc_lock>:
 8004fc8:	4801      	ldr	r0, [pc, #4]	; (8004fd0 <__malloc_lock+0x8>)
 8004fca:	f000 b811 	b.w	8004ff0 <__retarget_lock_acquire_recursive>
 8004fce:	bf00      	nop
 8004fd0:	20000288 	.word	0x20000288

08004fd4 <__malloc_unlock>:
 8004fd4:	4801      	ldr	r0, [pc, #4]	; (8004fdc <__malloc_unlock+0x8>)
 8004fd6:	f000 b80c 	b.w	8004ff2 <__retarget_lock_release_recursive>
 8004fda:	bf00      	nop
 8004fdc:	20000288 	.word	0x20000288

08004fe0 <_malloc_usable_size_r>:
 8004fe0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004fe4:	1f18      	subs	r0, r3, #4
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	bfbc      	itt	lt
 8004fea:	580b      	ldrlt	r3, [r1, r0]
 8004fec:	18c0      	addlt	r0, r0, r3
 8004fee:	4770      	bx	lr

08004ff0 <__retarget_lock_acquire_recursive>:
 8004ff0:	4770      	bx	lr

08004ff2 <__retarget_lock_release_recursive>:
 8004ff2:	4770      	bx	lr

08004ff4 <_init>:
 8004ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ff6:	bf00      	nop
 8004ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ffa:	bc08      	pop	{r3}
 8004ffc:	469e      	mov	lr, r3
 8004ffe:	4770      	bx	lr

08005000 <_fini>:
 8005000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005002:	bf00      	nop
 8005004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005006:	bc08      	pop	{r3}
 8005008:	469e      	mov	lr, r3
 800500a:	4770      	bx	lr
